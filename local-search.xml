<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>竞赛记录</title>
    <link href="/2021/12/30/%E7%AB%9E%E8%B5%9B%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/12/30/%E7%AB%9E%E8%B5%9B%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="竞赛记录"><a href="#竞赛记录" class="headerlink" title="竞赛记录"></a>竞赛记录</h1><blockquote><p>= 打铁记录</p></blockquote><h2 id="2020-10-CCPC威海打铁"><a href="#2020-10-CCPC威海打铁" class="headerlink" title="2020.10 CCPC威海打铁"></a>2020.10 CCPC威海打铁</h2><h2 id="2020-10-17-蓝桥省二打铁"><a href="#2020-10-17-蓝桥省二打铁" class="headerlink" title="2020.10.17 蓝桥省二打铁"></a>2020.10.17 蓝桥省二打铁</h2><h2 id="2020-11-华为杯校赛三等"><a href="#2020-11-华为杯校赛三等" class="headerlink" title="2020.11 华为杯校赛三等"></a>2020.11 华为杯校赛三等</h2><h2 id="2020-12-ICPC南京线上赛打铁"><a href="#2020-12-ICPC南京线上赛打铁" class="headerlink" title="2020.12 ICPC南京线上赛打铁"></a>2020.12 ICPC南京线上赛打铁</h2><h2 id="2021-3-ICPC山东省赛打铁"><a href="#2021-3-ICPC山东省赛打铁" class="headerlink" title="2021.3 ICPC山东省赛打铁"></a>2021.3 ICPC山东省赛打铁</h2><blockquote><p>这也能铁？纯废物</p></blockquote><h2 id="2021-5-16-ICPC银川现场赛打铁"><a href="#2021-5-16-ICPC银川现场赛打铁" class="headerlink" title="2021.5.16 ICPC银川现场赛打铁"></a>2021.5.16 ICPC银川现场赛打铁</h2><blockquote><p>阅读签到WA32，卡行末空格AC+6，Trie当时没掌握</p></blockquote><h2 id="2021-4-18-蓝桥省二打铁"><a href="#2021-4-18-蓝桥省二打铁" class="headerlink" title="2021.4.18 蓝桥省二打铁"></a>2021.4.18 蓝桥省二打铁</h2><h2 id="2021-8-21-百度之星复赛打铁"><a href="#2021-8-21-百度之星复赛打铁" class="headerlink" title="2021.8.21 百度之星复赛打铁"></a>2021.8.21 百度之星复赛打铁</h2><h2 id="2021-8-CCPC网络预选赛打铁"><a href="#2021-8-CCPC网络预选赛打铁" class="headerlink" title="2021.8 CCPC网络预选赛打铁"></a>2021.8 CCPC网络预选赛打铁</h2><h2 id="2021-9-ICPC网络预选赛打铁"><a href="#2021-9-ICPC网络预选赛打铁" class="headerlink" title="2021.9 ICPC网络预选赛打铁"></a>2021.9 ICPC网络预选赛打铁</h2><h2 id="2021-10-CCPC网络赛重赛打铁"><a href="#2021-10-CCPC网络赛重赛打铁" class="headerlink" title="2021.10 CCPC网络赛重赛打铁"></a>2021.10 CCPC网络赛重赛打铁</h2><h2 id="2021-11-28-ICPC上海线上赛打铁"><a href="#2021-11-28-ICPC上海线上赛打铁" class="headerlink" title="2021.11.28 ICPC上海线上赛打铁"></a>2021.11.28 ICPC上海线上赛打铁</h2><blockquote><p>卡树上DP签到，DP变形</p></blockquote><h2 id="2021-12-CCSP分赛铜首华东rk71"><a href="#2021-12-CCSP分赛铜首华东rk71" class="headerlink" title="2021.12 CCSP分赛铜首华东rk71"></a>2021.12 CCSP分赛铜首华东rk71</h2>]]></content>
    
    
    <categories>
      
      <category>LIFE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes on Kurose&#39;s Computer Networking：A TOP-DOWN APPROACH</title>
    <link href="/2021/12/10/ComputerNetwork_Note/"/>
    <url>/2021/12/10/ComputerNetwork_Note/</url>
    
    <content type="html"><![CDATA[<h1 id="Notes-on-Kurose’s-Computer-Networking"><a href="#Notes-on-Kurose’s-Computer-Networking" class="headerlink" title="Notes on Kurose’s Computer Networking"></a>Notes on Kurose’s Computer Networking</h1><p>A TOP-DOWN APPROACH </p><blockquote><p>Thanks to <a href="https://nerdzzh.me/">我爹的博客</a>，让我偷了不少😋</p></blockquote><h2 id="Chapter-1-Computer-Networks-and-the-Internet"><a href="#Chapter-1-Computer-Networks-and-the-Internet" class="headerlink" title="Chapter 1  Computer Networks and the Internet"></a>Chapter 1  Computer Networks and the Internet</h2><h3 id="1-1-What-is-the-Internet"><a href="#1-1-What-is-the-Internet" class="headerlink" title="1.1 What is the Internet?"></a>1.1 What is the Internet?</h3><blockquote><p>因特网：世界范围的计算机网络</p></blockquote><p><strong>Nuts-and-Bolts Description</strong></p><ul><li><p>计算设备称为 <strong>主机</strong>(host) / <strong>端系统</strong>(end system) </p></li><li><p>端系统通过 <strong>通信链路</strong>(communication link) 和 <strong>分组交换机</strong>(packet switch) 连接到一起；不同链路传输速率不同，发送端将数据分段后每段加上首部所形成的信息包称为 <strong>分组</strong>(packet)</p></li><li><p>端系统通过 <strong>因特网服务提供商</strong>(ISP, Internet Service Provider) 接入因特网</p></li><li><p>端系统、分组交换机和其他部件需要运行一系列<strong>协议</strong>(protocol) 。因特网的主要协议：<strong>TCP/IP</strong> (Transmission Control Protocol, 传输控制协议 / Internet Protocol, 网际协议)</p></li></ul><p><strong>Service</strong></p><ul><li><strong>分布式应用程序</strong>：因特网应用中涉及多个相互交换数据的端系统的应用程序</li><li>与因特网相连的端系统提供了一个 <strong>套接字接口</strong>(Socket interface)，规定在一个端系统上的程序请求因特网基础设施向另一个端系统上的目的地程序交付数据的方式</li></ul><p><strong>Protocol</strong></p><blockquote><p><em>Def:</em>  定义了在两个或多个通信实体之间交换的报文的格式和顺序，以及报文发送和/或接收一条报文或其他事件所采取的动作</p></blockquote><ul><li>不同的协议用于不同的通信任务</li></ul><h3 id="1-2-The-Network-Edge"><a href="#1-2-The-Network-Edge" class="headerlink" title="1.2 The Network Edge"></a>1.2 The Network Edge</h3><ul><li>主机分类：<strong>客户</strong>(Client) / <strong>服务器</strong>(Server)</li></ul><p><strong>Access Networks</strong></p><blockquote><p>接入网：将主机物理连接到其边缘路由器(Edge router)的网络</p></blockquote><p>家庭接入：数字用户线(DSL)、电缆因特网接入、光纤到户(FTTH)、拨号、卫星</p><p>企业/家庭接入：以太网(Ethernet)、WIFI</p><p>广域无线接入：3G、LTE</p><p><strong>Physical Media</strong></p><p>双绞铜线、同轴电缆、光纤、陆地/卫星无线电信道</p><h3 id="1-3-The-Network-Core"><a href="#1-3-The-Network-Core" class="headerlink" title="1.3 The Network Core"></a>1.3 The Network Core</h3><blockquote><p>通过网络链路和交换机移动数据有两种基本方法：<strong>电路交换</strong> 和 <strong>分组交换</strong></p></blockquote><h4 id="1-3-1-Packet-Switching"><a href="#1-3-1-Packet-Switching" class="headerlink" title="1.3.1 Packet Switching"></a>1.3.1 Packet Switching</h4><blockquote><p><strong>分组交换</strong> : 端系统彼此交换<strong>报文</strong>(message)，源端将报文划分成较小的数据块，称为分组；在源和目的地之间每个分组经过通信链路和 <strong>分组交换机</strong> (packet switch)传送，两类交换机分别为 <strong>路由器</strong>(router) 和 <strong>链路层交换机</strong>(link-layer switch)</p></blockquote><p><strong>Store-and-Forward Transmission</strong></p><p>存储转发传输：交换机在开始向输出链路传输分组之前需要接收到整个分组</p><p><em>exp:</em> 通过 $N$ 条速率均为 $R$ 的链路组成的路径 (即在源和目的地之间有 $N-1$ 台路由器) 所用 端到端时延为 $d=N \dfrac{L}{R}$</p><p><strong>Queuing Delays and Packet Loss</strong></p><p>排队时延和分组丢失：分组交换机具有一个<strong>输出缓存</strong>(output buffer) 即输出队列，除存储转发时延外分组还要承受输出缓存的<strong>排队时延</strong>(queuing delay)，如果一个分组到达后发现该缓存空间已满，则发生<strong>丢包</strong>(packet loss)，到达的分组或已经排队的分组之一将被丢弃</p><p><strong>Forwarding Tables and Routing Protocols</strong></p><p>转发表和路由选择协议：每台路由器有一个<strong>转发表</strong>(Forwarding Table)，用于将目的地址/目的地址的一部分映射成输出链路。<strong>路由选择协议</strong>(routing protocol)用于自动地设置转发表</p><h4 id="1-3-2-Circuit-Switching"><a href="#1-3-2-Circuit-Switching" class="headerlink" title="1.3.2 Circuit Switching"></a>1.3.2 Circuit Switching</h4><blockquote><p><strong>电路交换</strong>：建立名副其实的连接，路径上的交换机维护连接状态，电路交换网络上的两主机通信时，网络在两主机间创建一条专用的<strong>端到端连接</strong>(end-to-end connection)</p></blockquote><p><strong>Multiplexing</strong></p><p>链路中的电路通过<strong>频分复用</strong>(FDM, Frequency-Division Multiplexing)或<strong>时分复用</strong>(TDM, Time-Division Multiplexing)来实现</p><p>FDM：链路的频谱由所有连接共享，在连接期间链路为每条连接专用一个频段，频段的宽度称为<strong>带宽</strong>(band-width)</p><p>TDM：时间被划分为固定期间的<strong>帧</strong>，每个帧被划分为固定数量的<strong>时隙</strong>(slot)，在网络跨越链路创建连接时，在每个帧中为该联结制定一个时隙，由该连接单独使用</p><blockquote><p><strong>分组交换的性能优于电路交换的性能</strong></p></blockquote><h3 id="1-4-Delay-Loss-and-Throughput-in-Packet-Switched-Networks"><a href="#1-4-Delay-Loss-and-Throughput-in-Packet-Switched-Networks" class="headerlink" title="1.4 Delay, Loss, and Throughput in Packet-Switched Networks"></a>1.4 Delay, Loss, and Throughput in Packet-Switched Networks</h3><blockquote><p>计算机网络的性能测度：时延、丢包、吞吐量</p></blockquote><p><strong>Delay</strong></p><p>Total nodal delay = <strong>节点处理时延</strong>(nodal processing delay) + <strong>排队时延</strong>(queuing delay) + <strong>传输时延</strong>(transmission delay) + <strong>传播时延</strong>(propagation delay)</p><p>传输时延：将所有分组的比特推向链路所需要的时间 $\frac{L}{R}$</p><p>传播时延：将比特从链路的起点到目的地传播所需要的时间 $\frac{d}{s}$，传播速率 $s$ 取决于物理媒体(光纤/双铜绞线等)</p><p><strong>Throughput</strong></p><p><strong>瞬时吞吐量</strong>(instantaneous throughput)：接收到文件的瞬时速率 (bps)</p><p><strong>平均吞吐量</strong>(average throughput)：文件大小/收到文件所有比特的时间 计算所得的平均速率 (bps)</p><h3 id="1-5-Protocol-Layers-and-Their-Service-Models"><a href="#1-5-Protocol-Layers-and-Their-Service-Models" class="headerlink" title="1.5 Protocol Layers and Their Service Models"></a>1.5 Protocol Layers and Their Service Models</h3><ul><li><strong>分层</strong>(Layer)的体系结构</li><li>每层通过自己的内部动作/依靠下一层提供的服务来提供服务</li></ul><p><strong>Protocol Stack</strong></p><blockquote><p><strong>协议栈</strong>：各层的所有协议</p><p>因特网协议栈：应用层、运输层、网络层、链路层、物理层</p><p>ISO OSI参考模型：应用层、表示层、会话层、运输层、网络层、链路层、物理层</p></blockquote><p><strong>应用层</strong> Application Layer</p><ul><li>网络应用程序、应用层协议</li><li>HTTP/SMTP/FTP/DNS</li><li>协议数据单元(实体交换的数据单位)/信息分组：<strong>报文</strong>(message)</li></ul><p><strong>运输层</strong> Transport Layer</p><ul><li>TCP/UDP</li><li>协议数据单元：<strong>报文段</strong>(segment)</li><li>进程间传输</li></ul><p><strong>网络层</strong> Network Layer</p><ul><li>IP/路由选择协议</li><li>协议数据单元：<strong>数据报</strong>(datagram)</li><li>主机间传输</li></ul><p><strong>链路层</strong> Link Layer</p><ul><li>以太网/802.11(WiFi)/PPP</li><li>协议数据单元：<strong>帧</strong>(frame)</li></ul><p><strong>物理层</strong> Physical Layer</p><ul><li>控制比特的发送</li></ul><p><strong>Encapsulation</strong></p><blockquote><p>封装过程：应用层报文 -&gt; 运输层报文段 -&gt; 网络层数据报 -&gt; 链路层帧</p><p>每一层的分组：首部字段 + 有效载荷字段(payload field)</p></blockquote><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nix">┌───────────┐┌─────────┐        ┌───────┐                  ┌────┐                    ┌────────┐<br>│Application││Transport│        │Network│                  │Link│                    │Physical│<br>└─────┬─────┘└────┬────┘        └───┬───┘                  └─┬──┘                    └───┬────┘<br>      │           │                 │                        │                           │     <br>      │<span class="hljs-attr">Message</span> = M│                 │                        │                           │     <br>      │──────────&gt;│                 │                        │                           │     <br>      │           │                 │                        │                           │     <br>      │           │<span class="hljs-attr">Segment</span> = H_t + M│                        │                           │     <br>      │           │────────────────&gt;│                        │                           │     <br>      │           │                 │                        │                           │     <br>      │           │                 │<span class="hljs-attr">Datagram</span> = H_n + H_t + M│                           │     <br>      │           │                 │───────────────────────&gt;│                           │     <br>      │           │                 │                        │                           │     <br>      │           │                 │                        │<span class="hljs-attr">Frame</span> = H_l + H_n + H_t + M│     <br>      │           │                 │                        │──────────────────────────&gt;│     <br>┌─────┴─────┐┌────┴────┐        ┌───┴───┐                  ┌─┴──┐                    ┌───┴────┐<br>│Application││Transport│        │Network│                  │Link│                    │Physical│<br>└───────────┘└─────────┘        └───────┘                  └────┘                    └────────┘<br></code></pre></td></tr></table></figure><hr><h2 id="Chapter-2-Application-Layer"><a href="#Chapter-2-Application-Layer" class="headerlink" title="Chapter 2 Application Layer"></a>Chapter 2 Application Layer</h2><blockquote><p>应用层</p></blockquote><h3 id="2-1-Principles-of-Network-Applications"><a href="#2-1-Principles-of-Network-Applications" class="headerlink" title="2.1 Principles of Network Applications"></a>2.1 Principles of Network Applications</h3><p>主流体系结构：**客户-服务器体系结构 **(<strong>C/S</strong>, client-server)，对等体系结构 (<strong>P2P</strong>, peer-to-peer)</p><p><strong>C/S</strong>：</p><ul><li><p>服务器S：</p><ul><li>总是打开的主机 (always-on host)</li><li>固定的IP地址 (permanent IP address)</li><li>服务于客户的请求</li></ul></li><li><p>客户C:</p><ul><li><p>请求主机</p></li><li><p>客户间不进行通信  <em>exp:</em> 两个浏览器并不直接通信</p></li><li><p>动态IP地址 (dynamic IP address)</p></li></ul></li></ul><p><strong>P2P</strong>：</p><ul><li><p>没有永远在线的服务器</p></li><li><p>任意主机对直接通信，对等方</p></li><li><p><strong>自扩展性</strong> (self-scalability)  新的对等方增加服务能力 </p><p><em>exp:</em> P2P文件共享</p></li><li><p>流量密集型</p></li><li><p>动态IP地址</p></li></ul><p><strong>Processes Communicating</strong></p><blockquote><p>进程(process) : 运行在主机上的程序</p><p>同一主机内的进程：进程间通信</p><p>不同主机内的进程：交换<strong>报文</strong>(Message)</p></blockquote><p>客户进程：发起通信的进程</p><p>服务器进程：在会话开始时等待联系的进程</p><p>进程与计算机网络间的接口：<strong>套接字</strong>(socket)，软件接口，进程向/从其套接字发送/接收报文</p><p><strong>Reliable Date Transfer</strong></p><blockquote><p><em>Def:</em> 确保应用程序的一端发送的数据正确、完全地交付给了该应用程序的另一端，称为<strong>可靠数据传输</strong></p></blockquote><h3 id="2-2-The-Web-and-HTTP"><a href="#2-2-The-Web-and-HTTP" class="headerlink" title="2.2 The Web and HTTP"></a>2.2 The Web and HTTP</h3><blockquote><p>Web的应用层协议是 <strong>超文本传输协议</strong> (HTTP, HyperText Transfer Protocol) </p></blockquote><ul><li><p>C/S 模式</p></li><li><p>HTTP客户端：Web浏览器 (Web browser)</p></li><li><p>HTTP服务器端：Web服务器 (Web server)</p></li><li><p>定义了Web客户向Web服务器请求Web页面的方式，以及服务器向客户传送Web页面的方式</p></li><li><p>支撑运输协议：<strong>TCP</strong></p></li><li><p>客户发起TCP连接，服务器接受TCP连接</p></li><li><p>建立连接后浏览器和服务器进程就可以通过套接字接口访问TCP</p></li><li><p><strong>无状态协议</strong>(stateless protocol)：HTTP服务器不保存关于客户的信息</p></li></ul><p><strong>HTTP Message Format</strong></p><ul><li>Request Message 请求报文<ul><li>第一行为请求行(request line)：方法字段、URL字段、HTTP版本字段</li><li>后继四行为首部行(header line)</li></ul></li><li>Response Message 响应报文<ul><li>一个状态初始行(status linge)</li><li>六个首部行(header line)</li><li>实体体(entity body)</li></ul></li><li>Status Code 状态码<ul><li><em>200 OK</em>：请求成功，信息在返回的相应报文中</li><li><em>301 Moved Permanently</em>：请求的对象已经被永久转移了，新的URL定义在响应报文的Location：首部行中。客户软件将自动获取新的URL</li><li><em>400 Bad Request</em>：一个通用差错代码，指示该请求不能被服务器理解</li><li><em>404 Not Found</em>：被请求的文档不在服务器上</li><li><em>505 HTTP Version Not Supported</em>：服务器不支持请求报文使用的HTTP协议版本</li></ul></li></ul><p><strong>User-Server Interaction: Cookies</strong></p><p>cookie的4个组件：</p><ul><li>HTTP响应报文中的一个cookie首部行</li><li>HTTP请求报文中的一个cookie首部行</li><li>保留在客户端的cookie文件，由用户的浏览器进行管理</li><li>保留在Web服务器的后端数据库</li></ul><p><strong>Web Caching</strong></p><blockquote><p>Web缓存器(Web cache) 又称 <strong>代理服务器</strong>(proxy server)</p><p>代表初始Web服务器来满足HTTP请求的网络实体</p></blockquote><ul><li><p>浏览器建立到Web缓存器的TCP连接，客户端将所有HTTP请求首先发送到Web缓存器中的对象，Web缓存器检查本地是否存储该对象副本</p><ul><li>有：Web缓存器向客户浏览器用HTTP响应报文返回该对象</li><li>无：打开一个与该对象的初始服务器的TCP连接，发送该对象的HTTP请求，收到请求后初始服务器向该Web缓存器发送HTTP响应</li></ul></li><li><p>Web缓存器既是客户也是服务器</p><ul><li>服务器：接收浏览器的请求发回响应</li><li>客户：向初始服务器发出请求并接收响应</li></ul></li><li><p>减少了客户端请求的响应时间</p></li><li><p>减少了一个机构的接入链路到因特网的通信量</p></li></ul><p><strong>The Conditional GET</strong></p><blockquote><p>条件GET：为了保证Web缓存器的对象是最新的</p></blockquote><ul><li>请求报文中使用GET方法并且包含一个”If-Modified-Since”首部行</li><li>客户端：在HTTP请求中指定缓存副本的日期</li><li>服务器：如果缓存的副本是最新的，则响应不包含任何对象</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs axapta">┌──────┐                  ┌──────┐<br>│<span class="hljs-keyword">client</span>│                  │<span class="hljs-keyword">server</span>│<br>└──┬───┘                  └──┬───┘<br>   │                         │    <br>   │If-modified-since &lt;<span class="hljs-built_in">date</span>&gt; │    <br>   │────────────────────────&gt;│    <br>   │                         │    <br>   │HTTP/<span class="hljs-number">1.0</span> <span class="hljs-number">304</span> Not Modified│    <br>   │&lt;────────────────────────│    <br>   │                         │    <br>   │If-modified-since &lt;<span class="hljs-built_in">date</span>&gt; │    <br>   │────────────────────────&gt;│    <br>   │                         │    <br>   │ HTTP/<span class="hljs-number">1.0</span> <span class="hljs-number">200</span> OK &lt;data&gt;  │    <br>   │&lt;────────────────────────│    <br>┌──┴───┐                  ┌──┴───┐<br>│<span class="hljs-keyword">client</span>│                  │<span class="hljs-keyword">server</span>│<br>└──────┘                  └──────┘<br></code></pre></td></tr></table></figure><h3 id="2-3-Electronic-Mail-in-the-Internet"><a href="#2-3-Electronic-Mail-in-the-Internet" class="headerlink" title="2.3 Electronic Mail in the Internet"></a>2.3 Electronic Mail in the Internet</h3><p><strong>Components of Email</strong></p><ul><li><p><strong>用户代理</strong>(User Agent)：邮件客户端</p></li><li><p><strong>邮件服务器</strong>(Mail Server)：</p><ul><li><strong>邮箱</strong>(mailbox)：包含用户的传入信息</li><li><strong>报文队列</strong>(message queue)：包含外发(待发)信息</li></ul></li><li><p><strong>简单邮件传输协议</strong>(<strong>SMTP</strong>, Simple Mail Transfer Protocol)：</p><ul><li>向/在邮件服务器上传递/存储消息</li><li>C/S模式：<ul><li>客户端：用户代理或邮件服务器</li><li>服务器：邮件服务器</li></ul></li><li>与HTTP的比较：<ul><li>HTTP：<strong>拉协议</strong>(pull protocol)，用户使用HTTP协议从服务器拉取信息</li><li>SMTP：<strong>推协议</strong>(push protocol)，发送邮件服务器把文件推向接受邮件服务器</li></ul></li></ul></li><li><p><strong>因特网邮件访问协议</strong>(<strong>IMAP</strong>, Internet Mail Access Protocol)</p><ul><li>检索/删除/文件夹中存储的邮件服务器上的邮件</li></ul></li></ul><p><em>exp: Alice sends an email to Bob</em></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">┌──────────────────┐┌───────────────────┐┌─────────────────┐                 ┌────────────────┐<br>│Alic<span class="hljs-string">e&#x27;s user agent││Alice&#x27;</span>s mail <span class="hljs-keyword">server</span>││Bob<span class="hljs-string">&#x27;s mail server│                 │Bob&#x27;</span>s <span class="hljs-keyword">user</span> agent│<br>└────────┬─────────┘└─────────┬─────────┘└────────┬────────┘                 └───────┬────────┘<br>         │                    │                   │                                  │         <br>         │        SMTP        │                   │                                  │         <br>         │───────────────────&gt;│                   │                                  │         <br>         │                    │                   │                                  │         <br>         │                    │       SMTP        │                                  │         <br>         │                    │──────────────────&gt;│                                  │         <br>         │                    │                   │                                  │         <br>         │                    │                   │mail <span class="hljs-keyword">access</span> protocol (IMAP <span class="hljs-keyword">or</span> POP)│         <br>         │                    │                   │─────────────────────────────────&gt;│         <br>┌────────┴─────────┐┌─────────┴─────────┐┌────────┴────────┐                 ┌───────┴────────┐<br>│Alic<span class="hljs-string">e&#x27;s user agent││Alice&#x27;</span>s mail <span class="hljs-keyword">server</span>││Bob<span class="hljs-string">&#x27;s mail server│                 │Bob&#x27;</span>s <span class="hljs-keyword">user</span> agent│<br>└──────────────────┘└───────────────────┘└─────────────────┘                 └────────────────┘<br></code></pre></td></tr></table></figure><h3 id="2-4-DNS-The-Internet’s-Directory-Service"><a href="#2-4-DNS-The-Internet’s-Directory-Service" class="headerlink" title="2.4 DNS-The Internet’s Directory Service"></a>2.4 DNS-The Internet’s Directory Service</h3><blockquote><p><strong>域名系统</strong>(<strong>DNS</strong>, Domain Name System)：一个由分层的<strong>DNS服务器</strong>(DNS server)实现的分布式数据库；一个使得主机能够查询分布式数据库的应用层协议</p></blockquote><p><strong>Services</strong></p><ul><li><p>主机名到IP地址的转换</p></li><li><p><strong>主机别名</strong>(host aliasing)，<strong>规范主机名</strong>(CNAME, canonical hostname)</p></li><li><p><strong>邮件服务器别名</strong>(mail server aliasing)</p></li><li><p><strong>负载分配</strong>(load distribution)：许多IP地址对应一个名称</p></li></ul><p><strong>How DNS Works</strong></p><ul><li><strong>分布式、层次数据库</strong><ul><li>根DNS服务器，顶级域DNS服务器，权威DNS服务器</li><li>本地DNS服务器</li><li><strong>递归查询</strong>(recursive query)，<strong>迭代查询</strong>(iterative query)</li></ul></li><li>DNS缓存(DNS caching)</li></ul><blockquote><p><em>exp:</em> a distributed, hierarchical database</p></blockquote><p><img src="https://i.bmp.ovh/imgs/2021/12/aca8f1f7517ded6c.png" alt="img"></p><blockquote><p><em>exp:</em> iterative query (more commonly used) vs recursive query</p></blockquote><p><img src="https://i.bmp.ovh/imgs/2021/12/2182111ae9326099.png" alt="img"></p><h3 id="2-6-Video-Streaming-and-Content-Distribution-Networks"><a href="#2-6-Video-Streaming-and-Content-Distribution-Networks" class="headerlink" title="2.6 Video Streaming and Content Distribution Networks"></a>2.6 Video Streaming and Content Distribution Networks</h3><blockquote><p><strong>经HTTP的动态适应性流</strong>(<strong>DASH</strong>, Dynamic Adaptive Streaming over HTTP)</p><p><strong>内容分发网</strong>(<strong>CDN</strong>, Content Distribution Network)</p></blockquote><ul><li>服务器：<ul><li>将视频文件分为多个块，每个块以多种不同速率进行编码</li><li>不同速率的编码(encoding)存储在不同的文件中</li><li>文件被复制到多个CDN节点中</li><li>生成<strong>告示文件</strong>(maifest file)，为不同块提供URL</li></ul></li><li>客户端：<ul><li>定义估算服务器到客户的带宽</li><li>查阅告示文件，每次请求一个分块</li><li>决定何时/何种编码率/请求哪台服务器</li></ul></li></ul><p>Streaming stored video: playout buffering</p><blockquote><p>Summary: video streaming = encoding + DASH + playout buffering</p></blockquote><hr><h2 id="Chapter-3-Transport-Layer"><a href="#Chapter-3-Transport-Layer" class="headerlink" title="Chapter 3 Transport Layer"></a>Chapter 3 Transport Layer</h2><blockquote><p>传输层</p></blockquote><h3 id="3-1-Introduction-and-Transport-Layer-Services"><a href="#3-1-Introduction-and-Transport-Layer-Services" class="headerlink" title="3.1 Introduction and Transport-Layer Services"></a>3.1 Introduction and Transport-Layer Services</h3><blockquote><p>运输层协议为不同主机上的应用进程之间提供了<strong>逻辑通信</strong>(logic communication)</p></blockquote><ul><li>发送方<ul><li>通过套接字传递应用层的报文</li><li>确定<strong>报文段</strong>(segment)报头的值</li><li>创建报文段</li><li>将报文段传递给网络层</li></ul></li><li>接收方<ul><li>从网络层接收报文段</li><li>检查报头值</li><li>提取应用层的报文</li><li>通过套接字将报文传递给应用层</li></ul></li></ul><p><strong>Transport vs Network layer services</strong></p><p><em>exp:</em> 家庭间的邮件传递</p><p>主机：家庭</p><p>进程：孩子</p><p>应用层报文：信件</p><p>运输层协议：两个家庭中由 Ann 和 Bill 为孩子们收发信件</p><p>网络层协议：邮政服务</p><p>不提供的服务：延迟保证，带宽保证</p><h3 id="3-2-Multiplexing-and-Demultiplexing"><a href="#3-2-Multiplexing-and-Demultiplexing" class="headerlink" title="3.2 Multiplexing and Demultiplexing"></a>3.2 Multiplexing and Demultiplexing</h3><blockquote><p><strong>复用</strong>(multiplexing)：在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息生成报文段，将报文段传递给网络层</p><p><strong>分用</strong>(demultiplexing)：将运输层报文段的数据交付到正确的套接字</p></blockquote><p>套接字有唯一标识符，而每个报文段通过<strong>源端口号字段</strong>(source port number field)，<strong>目的端口号字段</strong>(destination port number field)指示报文段所要交付到的套接字</p><blockquote><p>下图展示了复用和分用的过程</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2021/12/221622d4ff0c0e4f.jpg" alt="img"></p><h3 id="3-3-UDP-Connectionless-Transport"><a href="#3-3-UDP-Connectionless-Transport" class="headerlink" title="3.3 UDP: Connectionless Transport"></a>3.3 UDP: Connectionless Transport</h3><blockquote><p>用户数据报协议</p></blockquote><ul><li><p><strong>无连接的</strong></p><ul><li>UDP发送方和接收方之间没有握手协议</li><li>每个UDP数据报独立处理</li></ul></li><li><p><strong>尽力而为交付服务</strong>(best-effort delivery service)</p><ul><li>报文段可能丢失</li><li>报文段可能不符合顺序</li></ul></li></ul><p><strong>Why there is a UDP</strong></p><ul><li>无需建立连接<ul><li>不需要握手(无RTT延迟)</li><li>无连接状态</li></ul></li><li>报头尺寸小</li><li>没有拥塞控制<ul><li>速度快</li><li>有面对拥堵时的机制</li></ul></li><li>用例：<strong>DNS</strong>, SNMP, HTTP/3(在应用层增加所需可靠性以及拥堵控制)</li></ul><p><strong>UDP Segment Structure</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"> ------------ 32bit ------------<br>┌───────────────┬───────────────┐<br>|<span class="hljs-string"> source port # </span>|<span class="hljs-string">  dest port #  </span>|<br>├───────────────┼───────────────┤<br>|<span class="hljs-string">    length     </span>|<span class="hljs-string">   checksum    </span>|<br>├───────────────┴───────────────┤<br>|<span class="hljs-string">                               </span>|<br>|<span class="hljs-string">  application data (payload)   </span>|<br>|<span class="hljs-string">                               </span>|<br>└───────────────────────────────┘<br></code></pre></td></tr></table></figure><p>检验和(checksum): 提供差错检测功能，发送方的UDP对报文段中所有16bit字的和进行反码运算得到</p><h3 id="3-4-Principles-of-Reliable-Data-Transfer"><a href="#3-4-Principles-of-Reliable-Data-Transfer" class="headerlink" title="3.4 Principles of Reliable Data Transfer"></a>3.4 Principles of Reliable Data Transfer</h3><blockquote><p>可靠数据传输协议(<strong>rdt</strong>协议, reliable data transfer protocol)：为TCP的可靠性保证做准备</p></blockquote><p><strong>Building a Reliable Data Transfer Protocol</strong></p><p>假设：</p><ul><li>单向的数据传输(发送方到接收方)</li><li>在不可靠的信道中进行双向控制信息(即ACK)流动</li></ul><p>逐步改进rdt协议(提供<strong>有限状态机</strong>(Finite-State Machine, FSM) )：</p><ul><li><p>rdt1.0：信道完全可靠</p></li><li><p>rdt2.0：信道具有比特差错，使用<strong>ACK</strong>(肯定确认, positive acknowledgment) /<strong>NAK</strong>(否定确认, negative acknowledgment)，基于这样重传机制的可靠数据传输协议称为<strong>自动重传请求</strong>(<strong>ARQ</strong>, Automatic Repeat reQuest)协议</p></li><li><p>rdt2.1：如果ACK/NAK被破坏，使用<strong>序号</strong>(sequence number)来处理重复的信息</p></li><li><p>rdt2.2：只使用ACK</p></li><li><p>rdt3.0：信道具有比特差错和丢包，使用<strong>倒计数定时器</strong>(countdown timer)，rdt3.0又称比特交替协议</p></li></ul><p><strong>Stop-and-Wait (starting from rdt2.0)</strong></p><blockquote><p><strong>停等协议</strong>：发送方发送一个数据包，然后等待接收方的回应</p></blockquote><p>发送方必须等待发送的数据包到达，或者直到超时，在某些情况下会导致发送方长时间处于空闲状态等待确认</p><p><strong>Pipelining</strong></p><blockquote><p>successor of Stop-and-Wait</p><p><strong>流水线</strong>：发送方允许多个发送中的、尚未被ACK的数据包</p></blockquote><ul><li><strong>Go-Back-N</strong>(GBN)<ul><li>发送方：<ul><li>最多可以有序号范围为N个的、连续传输但未ACK的数据包的窗口，N被称为<strong>窗口长度</strong>(window size)</li><li><strong>累计确认</strong>(commulative ACK(n))<ul><li>表明接收方以正确收到序号为n的以前且包括n在内的所有数据包</li><li>向前移动窗口使起点位于 n+1</li></ul></li><li>对发送时间最早但未被确认的数据包进行计时</li><li><strong>超时事件</strong>(timeout(n))：重传n号和所有序号更高的数据包</li></ul></li><li>接收方：<ul><li>仅发送最高序号的ACK</li><li>在收到失序的数据包时<ul><li>丢弃或缓存</li><li>重新发送按照顺序的最高序号的ACK</li></ul></li></ul></li></ul></li><li><strong>Selective Repeat</strong>(SR)<ul><li>发送方：<ul><li>最多可以有序号范围为N个的、连续传输但未ACK的数据包的窗口</li><li>ACK(n)：标记n号数据包已收到，如果n是最小的未ACK的数据包，则窗口向前移动到下一个未ACK的数据包开始</li><li>timeout(n)：对未ACK的数据包单独重传</li></ul></li><li>接收方<ul><li>单独ACK(n)</li><li>收到失序的数据包时：缓存</li><li>收到有序的数据包时：交付(也交付缓冲的、符合顺序的数据包)</li></ul></li></ul></li></ul><blockquote><p>在Go-Back-N中使用的累计确认在TCP中也有使用</p><p>发送窗口和接收窗口的大小必须相等</p></blockquote><h3 id="3-5-TCP-Connection-Oriented-Transport"><a href="#3-5-TCP-Connection-Oriented-Transport" class="headerlink" title="3.5 TCP: Connection-Oriented Transport"></a>3.5 TCP: Connection-Oriented Transport</h3><blockquote><p>传输控制协议</p></blockquote><ul><li>点对点(point-to-point)：一个发送方，一个接收方</li><li><strong>可靠的</strong>，有序的字节流(byte-stream)</li><li><strong>面向连接的</strong>(connection-oriented)：在数据交换前 <strong>握手</strong>(handshaking) 初始化发送方和服务器状态</li><li>累计确认(cumulative ACKs)</li><li><strong>全双工服务</strong>(full-duplex service)：在同一连接中同时进行双向数据流</li><li>流水线：流量和拥堵控制</li></ul><p><strong>TCP Segment Structure</strong></p><p><img src="https://s3.bmp.ovh/imgs/2021/12/9fd073778c705eb6.png" alt="img"></p><blockquote><p>UAPRSF：URG, <strong>ACK</strong>, PSH, RST, SYN, FIN</p></blockquote><ul><li>序列号(Sequence Number)：分段数据中第一个字节的字节流编号</li><li>确认号(Acknowledgement Number)：确认对方下一个字节的序列号，累计ACK</li></ul><p><strong>RTT Estimation(via EWMA) and Timeout</strong></p><blockquote><p>RTT: 连接的往返时间</p><p>SampleRTT: 报文段的样本RTT</p><p>EstimateRTT: 估计往返时间</p><p>TimeoutInterval: 超时重传间隔</p><p>DevRTT: 偏差RTT</p><p>EWMA: 指数加权移动平均 Exponential Weighted Moving Average</p></blockquote><ul><li><p><code>EstimatedRTT = (1-α) * EstimatedRTT + α * SampleRTT</code></p></li><li><p>取<code>α = 0.125</code></p></li><li><p><code>TimeoutInterval = EstimatedRTT + 4·DevRTT</code></p></li><li><p><code>DevRTT = (1-β) * DevRTT + β * |SampleRTT - EstimatedRTT|</code></p></li><li><p>取<code>β = 0.25</code></p></li></ul><p><strong>Fast Retransmit</strong></p><p>TCP快速重传：如果检测到3个冗余的ACK，则TCP执行快速重传，在该报文段的定时器过期之前重传丢失的报文段</p><p><strong>Flow Control</strong></p><p>流量控制：</p><ul><li><p>接收方控制发送方，这样发送方就不会溢出接收方的缓冲区</p></li><li><p><strong>接收窗口rwnd</strong>(receive window)：在TCP头的rwnd字段中，指示该接收方还有多少可用的缓存空间，或表示发送方将数据量限制在rwnd内</p></li></ul><p><strong>TCP Connection Management</strong></p><ul><li><strong>三次握手</strong>(three-way handshake)建立连接</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/ba608442b0ef1d22.png" alt="img"></p><ul><li><strong>四次挥手</strong>(four-way handshake)结束连接</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/16129a4f2b9c24c2.png" alt="img"></p><blockquote><p>TCP状态(TCO state)的变迁，有限状态机(FSM)</p></blockquote><h3 id="3-6-Principles-of-Congestion-Control"><a href="#3-6-Principles-of-Congestion-Control" class="headerlink" title="3.6 Principles of Congestion Control"></a>3.6 Principles of Congestion Control</h3><blockquote><p>拥塞控制</p></blockquote><p><strong>拥塞</strong>(Congestion)：</p><ul><li>太多的发送者以太快的速度发送太多的数据</li><li>表现：高延迟、丢包</li><li>与流量控制不同(一个发送方对于一个接收方来说速度太快)</li></ul><p><strong>The Causes and the Costs of Congestion</strong></p><ul><li>吞吐量永远不会超过容量</li><li>延迟随着容量的增加而增加</li><li>丢失/转发/不必要的中端会降低有效吞吐量(throughput)</li><li>上游传输容量/缓冲区会因下游丢包而被浪费</li></ul><p><strong>Congestion Control</strong></p><ul><li><p>端到端拥塞控制(end-end approach)：</p><p>没有来自网络的明确反馈，从观察到的延迟、损失推断拥塞情况</p></li><li><p>网络辅助的拥塞控制：</p><p>IP路由器在拥堵时向发送/接受主机提供直接反馈，可以显示拥堵程度或者明确设置发送速率</p></li></ul><h3 id="3-7-TCP-Congestion-Control"><a href="#3-7-TCP-Congestion-Control" class="headerlink" title="3.7 TCP Congestion Control"></a>3.7 TCP Congestion Control</h3><p>TCP的拥塞控制算法(CCA, congestion control algorithm)：</p><ul><li><p><strong>拥塞窗口cwnd</strong>(Congestion Window)</p></li><li><p><strong>慢启动</strong>(slow-start)：</p><ul><li>cwnd的值以1个MSS开始，每当传输的报文段首次被确认就增加一个MSS，这一过程中每过一个RTT，发送速率就翻倍，指数增长</li><li><strong>慢启动阈值ssthresh</strong>：如果存在一个由超时指示的丢包(即拥塞)，TCP发送方将 cwnd 设置为1并重新开始慢启动，将ssthresh设为 <strong>cwnd/2</strong>, 即当检测到拥塞时将其置位拥塞窗口值的一半。当到达或者超过ssthresh的值时，进入<strong>拥塞避免</strong></li></ul></li><li><p><strong>拥塞避免</strong>(Congestion Avoidance)</p><ul><li>cwnd的值每个RTT只增加一个MSS，线性增长</li><li>由3个冗余ACK引起的丢包时, ssthresh = cwnd/2, cwnd = 1MSS, 进入<strong>快速恢复</strong></li></ul></li><li><p><strong>快速恢复</strong>(Fast Recovery)</p><ul><li>对于引起TCP进入快速恢复状态的缺失报文段，对收到的每个冗余ACK，cwnd的值就加一个MSS，当对丢失报文段的一个ACK到达时，TCP降低cwnd后进入拥塞避免状态</li></ul></li><li><p><strong>加性增、乘性减</strong>(AIMD, Additive-Increase, Multiplicative-Decrease) 拥塞控制方式</p><p>假定丢包由3个冗余ACK而不是超时指示：每个RTT内cwnd线性(加性)增加1MSS，然后出现3个冗余ACK事件时cwnd减半(乘性减)</p></li></ul><hr><h2 id="Chapter-4-The-Network-Layer-Data-Plane"><a href="#Chapter-4-The-Network-Layer-Data-Plane" class="headerlink" title="Chapter 4 The Network Layer: Data Plane"></a>Chapter 4 The Network Layer: Data Plane</h2><p>网络层：数据平面</p><h3 id="4-1-Overview-of-Network-Layer"><a href="#4-1-Overview-of-Network-Layer" class="headerlink" title="4.1 Overview of Network Layer"></a>4.1 Overview of Network Layer</h3><ul><li>发送方：<ul><li>将报文段封装成<strong>数据报</strong>(datagram)，传递给链路层</li></ul></li><li>接收方：<ul><li>从数据报中提取报文段，传递给传输层</li></ul></li><li>两种重要功能：<ul><li><strong>转发</strong>(Forwarding)：将数据报从输入链路转移到适当的输出链路上，类比旅游中在每个路口做决定</li><li><strong>路由</strong>(Routing)：确定数据报从原点到目的地的路线</li></ul></li></ul><p><strong>Two Network Layer Planes</strong></p><ul><li><p>Data Plane 数据平面</p><ul><li>本地，每台路由器的功能</li><li>路由器内的数据报转发</li><li>硬件</li></ul></li><li><p>Control Plane 控制平面</p><ul><li>全网</li><li>沿着从原点到目的地的路径，在路由器之间进行数据报路由<ul><li>传统路由算法：在路由器中实现</li><li>软件定义网络(<strong>SDN</strong>, Software-Defined Networking)：在远程服务器中实现</li></ul></li><li>软件</li></ul></li></ul><p><strong>Network layer’s “best effort” service model</strong></p><blockquote><p><strong>尽力而为服务</strong>：不保证成功交付，及时/按顺序交付，最小带宽</p></blockquote><h3 id="4-2-What’s-inside-a-Router"><a href="#4-2-What’s-inside-a-Router" class="headerlink" title="4.2 What’s inside a Router?"></a>4.2 What’s inside a Router?</h3><p><img src="https://s3.bmp.ovh/imgs/2021/12/92f205a54874d3b5.png" alt="img"></p><p><strong>输入端口</strong>(input port):</p><ul><li>通过header的值进行转发表查询</li><li>转发方式：<ul><li>基于目的地转发：只根据目的地的IP地址进行转发</li><li>通用转发：基于任何一组header值的转发，不仅仅是网络层的功能：转发(路由器，交换机)，丢弃(防火墙)，修改(NAT)，封装并转发到控制器(SDN)</li></ul></li><li><strong>最长前缀匹配</strong>(longest prefix matching rule)：通常使用三态内容可寻址存储器(TCAM, Tenary Content Address Memory)来查找</li></ul><p><strong>交换结构</strong>(switching fabric)：</p><ul><li>将数据报从输入链路传输到适当的输出链路</li><li>交换率：数据报传输的速率，通常以多个输入/输出线路速率来衡量</li><li>三种主要类型：内存、总线、互联网</li></ul><p><strong>排队</strong>(queueing)：</p><ul><li>输入排队：<ul><li>输入端口的综合线路速率大于交换速率</li><li>需要缓冲：排队延迟和输入缓冲器溢出造成的损失</li><li><strong>阻塞</strong>(HOL, Head-Of-the-Line)：排在前面的数据报阻断后面的数据报</li></ul></li><li>输出排队：<ul><li>交换率大于链路传输速率</li><li>需要缓冲：由于输出缓冲区溢出，造成排队延迟和损失</li></ul></li></ul><p>缓冲区管理：</p><ul><li>丢弃策略：尾部丢弃，基于优先级的丢弃</li><li>标记：ECN，RED</li></ul><p><strong>Packet Scheduling</strong></p><ul><li><strong>先进先出</strong>(<strong>FIFO</strong>, First-In-First-Out)</li><li><strong>优先权排队</strong>(priority queuing)：<ul><li>到达时分类</li><li>从最高优先级到最低优先级</li><li>优先级内的FIFO</li></ul></li><li><strong>循环排队</strong>(RR, Round Robin queuing discipline)<ul><li>到达时分类</li><li>通过类循环</li><li>依次从每个类中选出一个</li></ul></li><li><strong>加权公平排队</strong>(WFQ, Weight Fair Queuing)<ul><li>广义的Round  Robin</li><li>每个类别有权重</li><li>在每个循环中加权服务量</li><li>每个流量类别的最低带宽保证</li></ul></li></ul><h3 id="4-3-The-Internet-Protocol-IP-IPv4-Addressing-IPv6-and-More"><a href="#4-3-The-Internet-Protocol-IP-IPv4-Addressing-IPv6-and-More" class="headerlink" title="4.3 The Internet Protocol(IP): IPv4, Addressing, IPv6, and More"></a>4.3 The Internet Protocol(IP): IPv4, Addressing, IPv6, and More</h3><p>网际协议IP</p><p><strong>IPv4 vs IPv6</strong></p><blockquote><p>IPv4 32位地址编码   IPv6 128位地址编码</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2021/12/5702a60838acf657.png" alt="img"></p><p>通过<strong>隧道</strong>(tunnel)时，IPv6数据报作为IPv4数据报的有效载荷实现共存</p><p><img src="https://s3.bmp.ovh/imgs/2021/12/582d7cf3857fc714.png" alt="img"></p><p><strong>IP Addressing</strong>：</p><ul><li>IP地址：与每个主机/路由器<strong>接口</strong>(interface)相关的32位标识符</li><li>接口：<ul><li>主机/路由器和物理链路之间的连接</li><li>接口的数量：路由器通常多个，主机通常一个或两个<ul><li>有线以太网</li><li>无限802.11</li></ul></li></ul></li><li><strong>点分十进制记法</strong>(dotted-decimal notation)<ul><li>无类别域间路由选择(<strong>CIDR</strong>, Classless Interdomain Routing)</li><li>任意长度的子网地址x，即<strong>子网掩码</strong>(subnet mask)</li><li>a.b.c.d/x</li></ul></li></ul><p><strong>How to get an IP ?</strong></p><ul><li>主机：<ul><li>硬编码</li><li><strong>动态主机配置协议</strong>(<strong>DHCP</strong>, Dynamic Host Configuration)：<ul><li>主机在加入网络时动态地从DHCP服务器获取一个IP地址</li><li>DHCP服务器位于路由器中</li><li>地址的重复使用</li><li>即插即用协议(plug-and-play protocol)</li><li>返回的不仅仅是子网中分配的IP地址<ul><li>第一跳路由器的地址</li><li>DNS服务器的名称和IP地址</li><li>子网掩码</li></ul></li></ul></li></ul></li><li>子网(subnet) (即网络如何获得其IP地址的子网部分)<ul><li>从其ISP获得</li></ul></li><li>ISP (即一个ISP如何获得其地址块)<ul><li>从ICANN</li></ul></li></ul><p><strong>Network Address Translation(NAT)</strong></p><p>网络地址转换NAT</p><ul><li>就外部世界而言，本地网络中的所有设备只共享一个IPv4地址<ul><li>本地IP地址在3个专用IP地址(private network)范围内</li></ul></li><li>优势<ul><li>所有设备都有一个来自ISP的IP地址</li><li>改变本地地址不需要通知外部世界</li><li>改变ISP而不改变本地地址</li><li>本地设备不会被外界直接看到，保证安全</li></ul></li><li>实现 (透明)<ul><li>对发出的数据报：<ul><li>将 (源IP地址，端口) 替换为 (NAT IP地址，新端口)</li><li>远程主机将以 (NAT IP地址，新端口) 作为目的地进行响应</li></ul></li><li><strong>NAT转换表</strong>(NAT translation table)<ul><li>每个 (源IP地址，端口)  &lt;-&gt;  (NAT IP地址，端口)</li></ul></li><li>对传入的数据报：<ul><li>用NAT转换表进行反向转换</li></ul></li></ul></li></ul><h3 id="4-4-Generalized-Forwarding-and-SDN"><a href="#4-4-Generalized-Forwarding-and-SDN" class="headerlink" title="4.4 Generalized Forwarding and SDN"></a>4.4 Generalized Forwarding and SDN</h3><p><strong>Generalized Forwarding</strong></p><p>通用转发：一张<strong>流表</strong>(flow table)将基于目的地的转发表一般化</p><ul><li><p>OpenFlow：一个匹配加动作转发抽象的标准</p></li><li><p>流表：匹配加动作转发表</p><ul><li>匹配：入端口、IP源地址、IP目的地址 (允许通配符*****)</li><li>动作：转发、丢弃、修改字段</li></ul></li></ul><hr><h2 id="Chapter-5-The-Network-Layer-Control-Plane"><a href="#Chapter-5-The-Network-Layer-Control-Plane" class="headerlink" title="Chapter 5 The Network Layer: Control Plane"></a>Chapter 5 The Network Layer: Control Plane</h2><p>网络层：控制平面</p><h3 id="5-1-Introduction"><a href="#5-1-Introduction" class="headerlink" title="5.1 Introduction"></a>5.1 Introduction</h3><p>构建网络控制平面的两种方法：</p><ul><li>每路由器控制(per-router control)：(传统的，分布式)<ul><li>每个路由器中都有单独的路由算法组件</li><li>路由器之间直接互动</li></ul></li><li>逻辑集中式控制(logically centralized/ SDN control)<ul><li>路由器之间不相互影响</li></ul></li></ul><blockquote><p>路由算法在两种方法中都是一样的，区别只是如何实现</p></blockquote><h3 id="5-2-Routing-Algorithms"><a href="#5-2-Routing-Algorithms" class="headerlink" title="5.2 Routing Algorithms"></a>5.2 Routing Algorithms</h3><p><strong>路由选择算法</strong></p><ul><li><p>Dijkstra’s <strong>link state</strong> algorithm</p><blockquote><p><strong>链路状态</strong>(Link State, LS)</p></blockquote><ul><li>属于<strong>集中式路由选择算法</strong>(centralized routing algorithm)</li><li>必须知道网络中每条链路的开销</li></ul></li><li><p>Bellman Ford’s (BS) <strong>distance vector</strong> algorithm</p><blockquote><p><strong>距离向量</strong>(Distance Vector, DV)</p></blockquote><ul><li>属于<strong>分散式路由选择算法</strong>(decentralized routing algorithm)</li><li>每个节点维护到网络中所有其他结点的开销(距离)估计的向量</li></ul></li></ul><p><strong>Dijkstra’s Link State Algorithm</strong></p><ul><li><p><strong>集中式</strong></p><ul><li>所有节点都知道网络拓扑结构(图)</li><li>所有节点都有相同的信息</li><li>通过链路状态广播完成</li></ul></li><li><p>计算从一个节点到所有其他节点的最小成本路径，为该节点生成转发表</p></li><li><p><strong>迭代</strong>(iterative)</p><ul><li>经过k次迭代，知道到k个目的地的最低成本路径</li></ul></li><li><p>算法复杂性: $O(n^2)$</p><ul><li>每次迭代需要检查所有不在N中的节点</li><li>有 $O((n+m)logn )$ 的可能，有最小优先级的队列</li></ul></li><li><p>信息复杂性: $O(n^2)$</p><ul><li><strong>链路状态广播</strong>(link state broadcast)：每个路由器必须向所有其他路由器广播链接状态</li><li>有效的广播算法：$O(n)$ 个链路交叉点来传播来自一个源的广播消息</li><li>每个路由器的消息穿过 $O(n)$​​ 个链接</li></ul></li><li><p>当链路成本取决于流量时可能出现振荡</p></li></ul><p><strong>Bellman Ford’s Distance Vector Algorithm</strong></p><ul><li><p><strong>分散式</strong>(decentralized)</p><ul><li>路由器最初只知道连接到邻居的成本</li><li><strong>路由选择表</strong>(routing table)</li></ul></li><li><p><strong>迭代的</strong>(iterative)</p><p>每个节点的行动：</p><ul><li>等待触发本地迭代的变化<ul><li>本地链路成本变化</li><li>来自邻居的距离向量更新信息</li></ul></li><li>重新计算本地距离向量</li><li>如果变化，发送新的本地距离向量给邻居</li></ul></li><li><p><strong>异步的</strong>(asynchronous)</p><ul><li>每个节点的迭代速度可以不同</li><li>自我终止的(self stopping) <ul><li>每个节点只在本地距离向量发生变化时通知其邻居</li><li>没有收到通知，不采取任何行动</li></ul></li></ul></li><li><p><strong>好消息传得快</strong>(链接成本降低)，<strong>坏消息传的慢</strong>(链接成本增加)：无穷计数(count-to-infinity)问题</p></li><li><p>算法复杂性：$O(n+m)$</p></li><li><p>信息复杂性：(网络直径为 $d$ 的节点) $O(d)$ : 状态信息的扩散</p></li><li><p>收敛的速度不同导致收敛的时间不同，可能有<strong>路由选择环路</strong>(routing loop) 和 <strong>无穷计数问题</strong> (count-to-infinity)</p></li></ul><h3 id="5-3-Intra-AS-Routing-in-the-Internet-OSPF"><a href="#5-3-Intra-AS-Routing-in-the-Internet-OSPF" class="headerlink" title="5.3 Intra-AS Routing in the Internet: OSPF"></a>5.3 Intra-AS Routing in the Internet: OSPF</h3><blockquote><p>ISP, AS, 域在这里具有相同含义</p></blockquote><p><strong>Autonomous System(AS)</strong></p><blockquote><p><strong>自治系统</strong>：将路由器组织进AS</p></blockquote><p>域内路由协议：</p><ul><li>AS中的所有路由器必须运行相同的域内协议</li><li>不同AS种的路由器可以运行不同的域内协议</li><li>网关路由器(gateway router)：</li></ul><p>域间路由协议：</p><ul><li>在AS之间进行路由选择</li><li>网关路由器既执行域间路由，也执行域内路由</li></ul><p>转发表(Forwarding table)是由域内和域间填充的协议(目的地在AS内: Intra-; 目的地在AS外: Intra- 和 Inter-)</p><p><strong>OSPF(Open Shortest Path First)</strong></p><blockquote><p><strong>开放最短路优先</strong></p></blockquote><ul><li>最常用的域内路由协议</li><li>经典的Dijkstra链路状态算法<ul><li>每个路由器向AS内<strong>所有</strong>其他路由器广播选择信息(直接通过IP而非TCP/UDP)</li><li>可能有多个指标：带宽、延迟</li></ul></li><li>所有OSPF消息都经过认证以防止恶意入侵</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/52eb99cc68d3e92d.jpg" alt="img"></p><h3 id="5-4-Routing-Among-the-ISPs-BGP"><a href="#5-4-Routing-Among-the-ISPs-BGP" class="headerlink" title="5.4 Routing Among the ISPs: BGP"></a>5.4 Routing Among the ISPs: BGP</h3><blockquote><p><strong>边界网关协议</strong> (Broder Gateway Protocol, BGP)</p><p>既涉及决策，也涉及性能</p></blockquote><ul><li>自治系统间的路由选择协议 (inter- AS routing protocol)</li><li>BGP为每个AS提供了一种方法来：<ul><li>从邻近的AS获得可达性信息(<strong>eBGP</strong>)</li><li>将可达性信息传播给AS内的所有路由器(<strong>iBGP</strong>)</li></ul></li><li>BGP会话<ul><li>两个BGP路由器通过TCP连接交换BGP信息</li><li>路径通告：<strong>前缀</strong>(prefix, CIDR化目标网络) + <strong>属性</strong>(BGP attribute)</li><li>两个重要的属性：<ul><li><strong>AS-PATH</strong>：通告已经通过的AS列表</li><li><strong>NEXT-HOP</strong>(<strong>下一跳</strong>)：通往下一跳AS的内部AS路由器</li></ul></li></ul></li><li>基于策略的路由选择：<ul><li>是否接受一个路径通告，<em>exp:</em> 永远不通过X的路由</li><li>是否发布路径通告，<em>exp:</em> 流量永远不会路由到X</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/f4621f393da171a1.png" alt="img"></p><p><strong>Hot Potato Routing</strong></p><blockquote><p><strong>热土豆路由选择</strong>：选择域内成本最低的本地网关，不用担心域间成本，即尽可能快地将数据送出</p></blockquote><p><strong>Route-Selection Algorithm</strong></p><blockquote><p><strong>路由器选择算法</strong>：当有一条以上的路由可用时</p></blockquote><ul><li>策略决定</li><li>最短的AS-PATH</li><li>最近的NEXT-HOP路由器(hot potato)</li><li>额外标准</li></ul><h3 id="5-5-The-SDN-Control-Plane"><a href="#5-5-The-SDN-Control-Plane" class="headerlink" title="5.5 The SDN Control Plane"></a>5.5 The SDN Control Plane</h3><blockquote><p><strong>软件定义网络</strong>(Software Defined Networking, SDN)</p></blockquote><p><strong>Why a logically centralized control plane?</strong></p><ul><li><p>更容易管理</p></li><li><p>基于表的转发 (OpenFlow API) 允许对路由器进行编程</p><ul><li>集中式编程更容易：集中计算表并分发</li></ul></li><li><p>开放的实现</p></li><li><p>促进创新</p></li></ul><hr><h2 id="Chapter-6-The-Link-Layer-and-LANs"><a href="#Chapter-6-The-Link-Layer-and-LANs" class="headerlink" title="Chapter 6 The Link Layer and LANs"></a>Chapter 6 The Link Layer and LANs</h2><p>链路层和局域网</p><h3 id="6-1-Introduction-to-the-Link-Layer"><a href="#6-1-Introduction-to-the-Link-Layer" class="headerlink" title="6.1 Introduction to the Link Layer"></a>6.1 Introduction to the Link Layer</h3><ul><li>发送方：<ul><li>将网络层的数据报封装成<strong>帧</strong>(Frame)</li></ul></li><li>接收方<ul><li>从帧中提取数据报，传递给网络层</li></ul></li><li>链路层信道：<ul><li>广播信道：有线局域网、卫星网、HFC</li><li>点对点通信链路：<strong>点对点协议</strong>(<strong>PPP</strong>, Point-to-Point Protocol)</li></ul></li></ul><p><strong>The Services Provided by the Link Layer</strong></p><ul><li><strong>成帧</strong>(framing)</li><li><strong>链路接入</strong>(link access)：<strong>媒体访问控制</strong>(<strong>MAC</strong>, Media Access Control)协议规定了帧在链路上的传输规则</li><li><strong>可靠交付</strong>(Reliable delivery)：无差错地经链路层移动每个网络层数据报</li><li><strong>差错检测和纠正</strong>(Error detection and correction)</li></ul><p><strong>Where Is the Link Layer Implemented?</strong></p><p><strong>网络适配器</strong>(network adapter)，也称<strong>网卡</strong>(Network Interface Card , NIC)</p><h3 id="6-2-Error-Detection-and-Correction-Techniques"><a href="#6-2-Error-Detection-and-Correction-Techniques" class="headerlink" title="6.2 Error-Detection and -Correction Techniques"></a>6.2 Error-Detection and -Correction Techniques</h3><ul><li><strong>奇偶校验</strong>(Parity Checks)<ul><li><strong>前向纠错</strong>(Forward Error Correction, FEC)：接收方检测和纠正差错的能力</li></ul></li><li><strong>检验和</strong>(Checksumming)</li><li><strong>循环冗余检测</strong>(<strong>CRC</strong>, Cyclic Redundancy Check)<ul><li>多项式编码(polynomial code)</li><li>生成多项式(generator)</li></ul></li></ul><h3 id="6-3-Multiple-Access-Links-and-Protocols"><a href="#6-3-Multiple-Access-Links-and-Protocols" class="headerlink" title="6.3 Multiple Access Links and Protocols"></a>6.3 Multiple Access Links and Protocols</h3><blockquote><p>多路访问链路和协议</p></blockquote><ul><li><strong>信道划分协议</strong>(Channel Partitioning Protocols)：<ul><li>TDM（时分多路复用）</li><li>FDM（频分多路复用）</li><li><strong>CDMA</strong> (<strong>码分多址</strong>, Code Divison Multiple Access)</li></ul></li><li><strong>随机接入协议</strong>(Random Access Protocols)<ul><li>Slotted ALOHA（时隙ALOHA）</li><li>ALOHA</li><li>CSMA（载波侦听多路访问）</li><li><strong>CSMA/CD</strong>（<strong>具有碰撞检测的载波侦听多路访问</strong>）</li></ul></li><li><strong>轮流协议</strong>(Taking-Turns Protocols)<ul><li>轮询协议(polling protocol)</li><li>令牌传递协议(token-passing protocol)</li></ul></li><li>DOCSIS：用于电缆因特网接入的链路层协议</li></ul><h3 id="6-4-Switched-Local-Area-Networks"><a href="#6-4-Switched-Local-Area-Networks" class="headerlink" title="6.4 Switched Local Area Networks"></a>6.4 Switched Local Area Networks</h3><p><strong>Link-Layer Addressing and ARP</strong></p><ul><li><strong>MAC</strong> Addresses(物理地址)<ul><li>长度6字节，2^48个可能的MAC地址</li><li>MAC广播地址(broadcast address)：FF-FF-FF-FF-FF-FF</li></ul></li><li><strong>ARP</strong>(<strong>地址解析协议</strong>, Address Resolution Protocol)<ul><li>在IP地址和MAC地址间进行转换</li></ul></li></ul><p><strong>Ethernet Frame</strong> </p><p><img src="https://s3.bmp.ovh/imgs/2021/12/59e4f76c0bea4c8c.png" alt="img"></p><p><strong>Link-Layer Switches</strong></p><p>链路层交换机：</p><ul><li><strong>交换机表</strong>(switch table)：(MAC地址，通向该MAC地址的交换机接口，时间)</li><li><strong>自学习</strong>(self-learning)</li><li><strong>即插即用</strong>设备(plug-and-play device)</li></ul><p><strong>Switches vs Routers</strong></p><ul><li><p>交换机是第二层的分组交换机，路由器是第三层的分组交换机</p></li><li><p>交换机即插即用，但对于广播风暴(broadcast storms)没有保护措施</p></li><li><p>路由器和连接到他们的主机需要人为配置IP地址，路由器对第二层的广播风暴提供了防火墙保护(firewall protections)</p></li></ul><blockquote><p>交换机，路由器和主机中的数据包处理</p></blockquote><p><img src="https://i.bmp.ovh/imgs/2021/12/58edaa0fa0a50548.png" alt="img"></p><p><strong>Virtual Local Area Networks (VLANs)</strong></p><p>虚拟局域网的作用：流量隔离(traffic isolation)，管理用户(managing users)</p><hr><h2 id="Chapter-7-Wireless-and-Mobile-Networks"><a href="#Chapter-7-Wireless-and-Mobile-Networks" class="headerlink" title="Chapter 7 Wireless and Mobile Networks"></a>Chapter 7 Wireless and Mobile Networks</h2><p>无线网络和移动网络</p><h3 id="7-1-Introduction"><a href="#7-1-Introduction" class="headerlink" title="7.1 Introduction"></a>7.1 Introduction</h3><ul><li>无线主机(wireless host)：主机本身可能移动也可能不移动</li><li>无线链路(wireless communication link)：主机通过无线线路连接到一个基站或者另一台无线主机<ul><li>基站(base station)：<em>exp:</em> 蜂窝塔(cell tower)，802.11无线LAN中的接入点(access point)</li></ul></li></ul><h3 id="7-2-Wireless-Links-and-Network-Characteristics"><a href="#7-2-Wireless-Links-and-Network-Characteristics" class="headerlink" title="7.2 Wireless Links and Network Characteristics"></a>7.2 Wireless Links and Network Characteristics</h3><p><strong>wire link vs wireless link</strong></p><ul><li><p><strong>路径损耗</strong>(path loss)：信号强度递减</p></li><li><p>来自其他源的干扰</p></li><li><p><strong>多径传播</strong>(multipath propagation)：电磁波的一部分受反射在发送方和接收方间走了不同长度的路径</p></li></ul><p><strong>Signal-to-Noise Ratio(SNR)</strong></p><blockquote><p> <strong>信噪比</strong>(SNR)：所受到的信号和噪声强度的相对测量</p></blockquote><p><strong>比特差错率</strong>(BER)：接收方收到的有错传输的比特的概率</p><ul><li>给定调制方案，SNR越高BER越低</li><li>给定SNR，就要较高比特传输率的调制技术将具有较高的BER</li><li>物理层调制技术的动态选择能用于适配对信道条件的调制技术</li></ul><h3 id="7-3-WiFi-802-11-Wireless-LANs"><a href="#7-3-WiFi-802-11-Wireless-LANs" class="headerlink" title="7.3 WiFi: 802.11 Wireless LANs"></a>7.3 WiFi: 802.11 Wireless LANs</h3><p><strong>The 802.11 Architecture</strong></p><blockquote><p>速率适应(Rate Adaptation)，功率管理(Power Management)</p></blockquote><ul><li>基本构建模块：<strong>基本服务集</strong>(Basic Service Set, BSS)</li><li>BSS：一个/多个无线站点，一个<strong>接入点</strong>(Access Point, <strong>AP</strong>)的中央<strong>基站</strong>(base station)</li></ul><p><img src="https://s3.bmp.ovh/imgs/2021/12/6a6b65eb13d209b2.png" alt="img"></p><p><strong>Channels and Association</strong></p><p><em>exp:</em> 你携带移动设备进入WiFi丛林，找无线因特网接入，设在丛林中有5个AP，为获得因特网接入你的无线站点应加入其中一个子网故需与其中一个AP相<strong>关联</strong>(associate)，即建立一条虚拟线路</p><p><strong>The 802.11 MAC Protocol</strong></p><ul><li><p>随机访问协议：带碰撞避免的CSMA(CSMA with collision avoidance)，<strong>CSMA/CA</strong>，类比以太网的CSMA/CD</p></li><li><p>处理隐藏终端：<strong>RTS</strong>(短请求发送，Reqeust to Send), <strong>CTS</strong>(允许发送，Clear to Send)</p></li></ul><p><strong>The IEEE 802.11 Frame</strong></p><p><img src="https://s3.bmp.ovh/imgs/2021/12/bb4f115e281187d0.png" alt="img"></p><hr>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>ComputerNetwork</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Trie专题训练</title>
    <link href="/2021/11/27/trie_problem/"/>
    <url>/2021/11/27/trie_problem/</url>
    
    <content type="html"><![CDATA[<h1 id="Trie-专题训练"><a href="#Trie-专题训练" class="headerlink" title="Trie 专题训练"></a>Trie 专题训练</h1><p>0.0</p><h2 id="0x01-统计难题-HDU-1251"><a href="#0x01-统计难题-HDU-1251" class="headerlink" title="0x01 统计难题 HDU 1251"></a>0x01 统计难题 HDU 1251</h2><blockquote><p><a href="https://acm.dingbacode.com/showproblem.php?pid=1251">link</a></p><p>题意：给了一堆字符串，统计以模式串作前缀出现的单词个数</p><p>trie入门题，存结点时统计一下过当前结点的单词个数即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//对于字符串比较多的要统计个数的，map被卡的情况下，直接用字典树</span><br><span class="hljs-comment">//很多题都是要用到节点下标来表示某个字符串</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e6</span> + <span class="hljs-number">5</span>;  <span class="hljs-comment">//如果是64MB可以开到2e6+5，尽量开大</span><br><span class="hljs-keyword">int</span> tree[maxn][<span class="hljs-number">30</span>];        <span class="hljs-comment">//tree[i][j]表示节点i的第j个儿子的节点编号</span><br><span class="hljs-keyword">bool</span> flagg[maxn];          <span class="hljs-comment">//表示以该节点结尾是一个单词</span><br><span class="hljs-keyword">int</span> tot;                   <span class="hljs-comment">//总节点数</span><br><span class="hljs-keyword">int</span> cnt[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert_</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">int</span> root = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">int</span> id = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!tree[root][id])<br>            tree[root][id] = ++tot;<br>        root = tree[root][id];<br>        cnt[root]++;<br>    &#125;<br>    flagg[root] = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find_</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span> </span>&#123;  <span class="hljs-comment">//查询操作，按具体要求改动</span><br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">int</span> root = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">int</span> id = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!tree[root][id])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        root = tree[root][id];<br>        <span class="hljs-comment">// if(!flagg[root] &amp;&amp; i==len-1) return false;   //判断是否两个单词完全匹配</span><br>    &#125;<br>    ans = cnt[root];<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">//最后清空，节省时间</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot; i++) &#123;<br>        flagg[i] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>            tree[i][j] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(cnt,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(cnt));<br>    tot = <span class="hljs-number">0</span>;  <span class="hljs-comment">//RE有可能是这里的问题</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> str[<span class="hljs-number">15</span>];<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">gets</span>(str)&amp;&amp;str[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        <span class="hljs-built_in">insert_</span>(str);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">gets</span>(str)&amp;&amp;str[<span class="hljs-number">0</span>]!=EOF)&#123;<br>        <span class="hljs-keyword">bool</span> t = <span class="hljs-built_in">find_</span>(str);<br>        <span class="hljs-keyword">if</span>(!t) cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;endl;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x02-Remember-the-Word-LA-3942"><a href="#0x02-Remember-the-Word-LA-3942" class="headerlink" title="0x02 Remember the Word LA 3942"></a>0x02 Remember the Word LA 3942</h2><blockquote><p><a href="https://vjudge.net/problem/UVALive-3942">link</a></p><p>题意：</p><p>给出一个由S个不同单词组成的字典和一个长字符串，把这个字符串分解成若干个单词的连接(可重复使用)，有多少种方法。ex: 有四个单词：a, b, cd, ab；则abcd有两种分解方法：a+b+cd 和 ab+cd</p><p>思路：</p><p>dp + Trie</p><p>计数问题考虑dp：</p><p>考虑状态：<code>dp[i]</code> 为以i开始的后缀的方案数</p><p>考虑转移：因为单词长度不大于100，我们可以直接暴力向后看当前单词是否存在，所以可以用Trie或者字符串哈希完成</p><p>令dp(i)表示从字符i开始的字符串，dp(i)=sum{dp(i+len(x))}, x是s[i…L]的前缀。然后把所有可分解成的单词构造成一颗Trie树，再让母串在上面跑，dp[0]即是方案总数。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 300005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 20071027</span><br><span class="hljs-keyword">char</span> P[maxn];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt;= y; i--)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> dp[maxn];        <span class="hljs-comment">//dp[i] 为以i开始的后缀的方案数</span><br><span class="hljs-keyword">int</span> tree[maxn][<span class="hljs-number">30</span>];  <span class="hljs-comment">//tree[i][j]表示节点i的第j个儿子的节点编号</span><br><span class="hljs-keyword">bool</span> flagg[maxn];    <span class="hljs-comment">//表示以该节点结尾是一个单词</span><br><span class="hljs-keyword">int</span> tot;             <span class="hljs-comment">//总节点数</span><br><span class="hljs-keyword">int</span> m;               <span class="hljs-comment">//主串长度</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert_</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">int</span> root = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">int</span> id = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!tree[root][id])<br>            tree[root][id] = ++tot;<br>        root = tree[root][id];<br>    &#125;<br>    flagg[root] = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;  <span class="hljs-comment">//查询操作，按具体要求改动</span><br>    <span class="hljs-keyword">int</span> root = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = id; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">int</span> k = P[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!tree[root][k]) <span class="hljs-keyword">break</span>;<br>        root = tree[root][k];<br>        <span class="hljs-keyword">if</span> (flagg[root])    <br>            dp[id] = (dp[id] + dp[i + <span class="hljs-number">1</span>]) % mod;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot; i++) &#123;<br>        flagg[i] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">30</span>; j++)<br>            tree[i][j] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dp));<br>    tot = <span class="hljs-number">0</span>; <br>&#125;<br><span class="hljs-keyword">char</span> c[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> times = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, P)!=EOF) &#123;<br>        times++;<br>        <span class="hljs-keyword">int</span> S;<br>        cin &gt;&gt; S;<br>        <span class="hljs-comment">// init();</span><br>        <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, S) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, c);<br>            <span class="hljs-built_in">insert_</span>(c);<br>        &#125;<br>        m = <span class="hljs-built_in">strlen</span>(P);<br>        dp[m] = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">red</span>(i, m, <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">find_</span>(i);<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Case &quot;</span> &lt;&lt; times &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; dp[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>        <span class="hljs-built_in">init</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x03-“strcmp-”-Anyone"><a href="#0x03-“strcmp-”-Anyone" class="headerlink" title="0x03 “strcmp()” Anyone?"></a>0x03 “strcmp()” Anyone?</h2><blockquote><p><a href="https://vjudge.net/problem/UVA-11732">link</a></p><p>题意：</p><p>输入n个字符串，两两调用一次strcmp()，问字符比较的总次数是多少？ex:</p><p><code>strcmp(“than”, &quot;that&quot;)：cnt = 7</code></p><p>题解：两个字符串比较次数其实是 *<em>相同字符数</em>2 + (存在不同字符? 1 : 0)**；然后建字典树，dfs一下即可。因为节点的个数比较多，所以用左孩子右兄弟的方法建立字典树。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxnode = <span class="hljs-number">4000</span> * <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> sigma_size = <span class="hljs-number">26</span>;<br><span class="hljs-comment">// 字母表为全体小写字母的Trie</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Trie</span> &#123;</span><br>    <span class="hljs-keyword">int</span> head[maxnode];  <span class="hljs-comment">// head[i]为第i个结点的左儿子编号</span><br>    <span class="hljs-keyword">int</span> next[maxnode];  <span class="hljs-comment">// next[i]为第i个结点的右兄弟编号</span><br>    <span class="hljs-keyword">char</span> ch[maxnode];   <span class="hljs-comment">// ch[i]为第i个结点上的字符</span><br>    <span class="hljs-keyword">int</span> tot[maxnode];   <span class="hljs-comment">// tot[i]为第i个结点为根的子树包含的叶结点总数</span><br>    <span class="hljs-keyword">int</span> sz;             <span class="hljs-comment">// 结点总数</span><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans;      <span class="hljs-comment">// 答案</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>        sz = <span class="hljs-number">1</span>;<br>        tot[<span class="hljs-number">0</span>] = head[<span class="hljs-number">0</span>] = next[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    &#125;  <span class="hljs-comment">// 初始时只有一个根结点</span><br><br>    <span class="hljs-comment">// 插入字符串s（包括最后的&#x27;\0&#x27;），沿途更新tot</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> u = <span class="hljs-number">0</span>, v, n = <span class="hljs-built_in">strlen</span>(s);<br>        tot[<span class="hljs-number">0</span>]++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-comment">// 找字符a[i]</span><br>            <span class="hljs-keyword">bool</span> found = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (v = head[u]; v != <span class="hljs-number">0</span>; v = next[v])<br>                <span class="hljs-keyword">if</span> (ch[v] == s[i]) &#123;  <span class="hljs-comment">// 找到了</span><br>                    found = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            <span class="hljs-keyword">if</span> (!found) &#123;<br>                v = sz++;  <span class="hljs-comment">// 新建结点</span><br>                tot[v] = <span class="hljs-number">0</span>;<br>                ch[v] = s[i];<br>                next[v] = head[u];<br>                head[u] = v;  <span class="hljs-comment">// 插入到链表的首部</span><br>                head[v] = <span class="hljs-number">0</span>;<br>            &#125;<br>            u = v;<br>            tot[u]++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 统计LCP=u的所有单词两两的比较次数之和</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> depth, <span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head[u] == <span class="hljs-number">0</span>)  <span class="hljs-comment">// 叶结点</span><br>            ans += tot[u] * (tot[u] - <span class="hljs-number">1</span>) * depth;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = head[u]; v != <span class="hljs-number">0</span>; v = next[v])<br>                sum += tot[v] * (tot[u] - tot[v]);  <span class="hljs-comment">// 子树v中选一个串，其他子树中再选一个</span><br>            ans += sum / <span class="hljs-number">2</span> * (<span class="hljs-number">2</span> * depth + <span class="hljs-number">1</span>);       <span class="hljs-comment">// 除以2是每种选法统计了两次</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v = head[u]; v != <span class="hljs-number">0</span>; v = next[v])<br>                <span class="hljs-built_in">dfs</span>(depth + <span class="hljs-number">1</span>, v);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 统计</span><br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;<br>        ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxl = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>;  <span class="hljs-comment">// 每个单词最大长度</span><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">char</span> word[maxl];<br>Trie trie;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> kase = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) == <span class="hljs-number">1</span> &amp;&amp; n) &#123;<br>        trie.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, word);<br>            trie.<span class="hljs-built_in">insert</span>(word);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: %lld\n&quot;</span>, kase++, trie.<span class="hljs-built_in">count</span>());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ALGORITHM TRAINING</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>algorithm</tag>
      
      <tag>string</tag>
      
      <tag>dp</tag>
      
      <tag>Trie</tag>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Trie</title>
    <link href="/2021/11/27/trie/"/>
    <url>/2021/11/27/trie/</url>
    
    <content type="html"><![CDATA[<h1 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h1><p>字典树/前缀树</p><h2 id="什么是Trie"><a href="#什么是Trie" class="headerlink" title="什么是Trie"></a>什么是Trie</h2><blockquote><p>从根节点到每个单词结点的路径上所有字母连接成的字符串就是该结点对应的字符串</p></blockquote><ul><li>多叉树，最大分支数由字典的字符集含有的字符数决定</li></ul><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.it610.com%2Fimage%2Finfo10%2F79c48fdd65894af5beaf368abfb8f106.jpg&refer=http%3A%2F%2Fimg.it610.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1640527949&t=d07f070c79ac3a5b4b2cee80f1a87692" alt="img" style="zoom:50%;" /><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li><p><strong>插入字符串 insert</strong> </p><ol><li><p>初始化 <code>root = 0</code> , 遍历字符串, 对于其每一个字符, 计算其映射值 <code>id</code></p></li><li><p>检查<code>Trie[root][id] == 0</code> 是否成立：</p><p>若成立, 则进行插入,  <code>Trie[root][id] = ++cnt</code></p><p>若不成立,说明该位置已经有该字符,直接找到下一个字符应插入的位置: <code>root = trie[root][id]</code>.</p></li><li><p>重复上述步骤,直到字符串完全插入Trie树.</p></li></ol></li><li><p><strong>匹配字符串 search</strong></p><ol><li><p>初始化<code>root = 0</code>,遍历字符串,对于其每一个字符,计算其映射值<code>id</code></p></li><li><p>检查<code>Trie[root][id] == 0</code>是否成立：</p><p>若成立, 则说明Trie树当前路径不存在该字符,返回匹配失败</p><p>若不成立,则说明当前路径存在该字符,找到下一个字符的位置: <code>root = trie[root][id]</code></p></li><li><p>重复上述步骤，若顺利匹配完整个字符串,则应该检查字符串结束的位置在Trie树中是否是结束标志，<code>flag[root] == true</code>成立,表明是结束标志,则返回匹配成功,否则返回匹配失败</p></li></ol></li></ul><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><ul><li><strong>附：字符数组操作</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">char</span> s1[maxn], s2[maxn];<br><span class="hljs-built_in">strcpy</span>(s1, s2);<span class="hljs-comment">//复制字符串 s2 到字符串 s1。</span><br><span class="hljs-built_in">strcat</span>(s1, s2);<span class="hljs-comment">//连接字符串 s2 到字符串 s1 的末尾。</span><br><span class="hljs-built_in">strlen</span>(s1);<span class="hljs-comment">//返回字符串 s1 的长度。</span><br><span class="hljs-built_in">strcmp</span>(s1, s2);<span class="hljs-comment">//如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回值小于 0；如果 s1&gt;s2 则返回值大于 0。</span><br><span class="hljs-built_in">strchr</span>(s1, ch);<span class="hljs-comment">//返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</span><br><span class="hljs-built_in">strstr</span>(s1, s2);<span class="hljs-comment">//返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</span><br></code></pre></td></tr></table></figure><ul><li><strong>模拟</strong></li></ul><blockquote><p>对结构体Trie进行插入和查询操作</p><p>val[i] &gt; 0 表示这是一个单词结点</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 41000</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sigmasize 26  <span class="hljs-comment">// 字符集的大小 ex: 全体小写字母：26</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Trie</span>&#123;</span><br>    <span class="hljs-keyword">int</span> ch[maxn][sigmasize];<br>    <span class="hljs-keyword">int</span> val[maxn];  <span class="hljs-comment">// 结点i对应的附加信息，如每个字符串的权值, 如val[i]&gt;0 当且仅当结点i是单词结点</span><br>    <span class="hljs-keyword">int</span> sz;            <span class="hljs-comment">// 结点总数</span><br><br>    <span class="hljs-built_in">Trie</span>() &#123; sz = <span class="hljs-number">1</span>; <span class="hljs-built_in">memset</span>(ch[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ch[<span class="hljs-number">0</span>]));&#125;   <span class="hljs-comment">//初始只有一个根节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">idx</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span> </span>&#123; <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;a&#x27;</span>; &#125;  <span class="hljs-comment">//字符c的编号</span><br><br>    <span class="hljs-comment">// 插入字符串s, 附加信息为v。v必须非0, 0 代表“本结点不是单词结点”</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *s, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> u = <span class="hljs-number">0</span>, n = <span class="hljs-built_in">strlen</span>(s);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">int</span> c = <span class="hljs-built_in">idx</span>(s[i]);<br>            <span class="hljs-keyword">if</span> (!ch[u][c]) &#123;  <span class="hljs-comment">//结点不存在</span><br>                <span class="hljs-built_in">memset</span>(ch[sz], <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ch[sz]));<br>                val[sz] = <span class="hljs-number">0</span>;      <span class="hljs-comment">//中间节点的附加信息为0</span><br>                ch[u][c] = sz++;  <span class="hljs-comment">//新建节点</span><br>            &#125;<br>            u = ch[u][c];  <span class="hljs-comment">//往下走</span><br>        &#125;<br>        val[u] = v;  <span class="hljs-comment">//字符串的最后一个字符的附加信息为v</span><br>    &#125;<br>    <span class="hljs-comment">// 查找字符串s</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> u = <span class="hljs-number">0</span>, n = <span class="hljs-built_in">strlen</span>(s);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">int</span> c = <span class="hljs-built_in">idx</span>(s[i]);<br>            <span class="hljs-keyword">if</span> (ch[u][c] == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            u = ch[u][c];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (val[u] == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;trie;<br></code></pre></td></tr></table></figure><ul><li><strong>版本2</strong></li></ul><blockquote><p>可以用 <code>find(str)</code> 判断字典树中是否有以 str 作前缀的单词</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//对于字符串比较多的要统计个数的，map被卡的情况下，直接用字典树</span><br><span class="hljs-comment">//很多题都是要用到节点下标来表示某个字符串</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2e6</span> + <span class="hljs-number">5</span>;  <span class="hljs-comment">//如果是64MB可以开到2e6+5，尽量开大</span><br><span class="hljs-keyword">int</span> tree[maxn][<span class="hljs-number">30</span>];        <span class="hljs-comment">//tree[i][j]表示节点i的第j个儿子的节点编号</span><br><span class="hljs-keyword">bool</span> flagg[maxn];          <span class="hljs-comment">//表示以该节点结尾是一个单词</span><br><span class="hljs-keyword">int</span> tot;                   <span class="hljs-comment">//总节点数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert_</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">int</span> root = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">int</span> id = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!tree[root][id])<br>            tree[root][id] = ++tot;<br>        root = tree[root][id];<br>    &#125;<br>    flagg[root] = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find_</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span></span>&#123;  <span class="hljs-comment">//查询操作，按具体要求改动</span><br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">int</span> root = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">int</span> id = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!tree[root][id])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        root = tree[root][id];<br>        <span class="hljs-keyword">if</span>(!flagg[root] &amp;&amp; i==len<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//判断是否两个单词完全匹配</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot; i++) &#123;<br>        flagg[i] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">30</span>; j++)<br>            tree[i][j] = <span class="hljs-number">0</span>;<br>    &#125;<br>    tot = <span class="hljs-number">0</span>;  <span class="hljs-comment">//RE有可能是这里的问题</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>优化trie树</strong></p><blockquote><p>当结点比较多，sigma_size比较大的时候，采用左儿子-右兄弟建立trie</p></blockquote></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Trie</span> &#123;</span><br>    <span class="hljs-keyword">int</span> head[maxn];  <span class="hljs-comment">// head[i]为第i个结点的左儿子编号</span><br>    <span class="hljs-keyword">int</span> next[maxn];  <span class="hljs-comment">// next[i]为第i个结点的右兄弟编号</span><br>    <span class="hljs-keyword">char</span> ch[maxn];   <span class="hljs-comment">// ch[i]为第i个结点上的字符</span><br>    <span class="hljs-keyword">int</span> sz;             <span class="hljs-comment">// 结点总数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>        sz = <span class="hljs-number">1</span>;<br>        tot[<span class="hljs-number">0</span>] = head[<span class="hljs-number">0</span>] = next[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> u = <span class="hljs-number">0</span>, v, n = <span class="hljs-built_in">strlen</span>(s);<br>        tot[<span class="hljs-number">0</span>]++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">bool</span> found = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (v = head[u]; v != <span class="hljs-number">0</span>; v = next[v])<br>                <span class="hljs-keyword">if</span> (ch[v] == s[i]) &#123;<br>                    found = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            <span class="hljs-keyword">if</span> (!found) &#123;<br>                v = sz++;<br>                tot[v] = <span class="hljs-number">0</span>;<br>                ch[v] = s[i];<br>                next[v] = head[u];<br>                head[u] = v;<br>                head[v] = <span class="hljs-number">0</span>;<br>            &#125;<br>            u = v;<br>            tot[u]++;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="题单"><a href="#题单" class="headerlink" title="题单"></a>题单</h2><p><a href="http://maskros.icu/2021/11/27/trie_problem/">solution</a></p><ul><li><p>0x01 统计难题 HDU 1251 <a href="https://acm.dingbacode.com/showproblem.php?pid=1251">link</a></p></li><li><p>0x02 背单词 LA 3942 <a href="https://vjudge.net/problem/UVALive-3942">link</a></p></li><li><p>0x03 strcmp()函数 UVa 11732 <a href="https://vjudge.net/problem/UVA-11732">link</a></p></li></ul><blockquote><p>假如再来一遍银川</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ALGORITHMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>note</tag>
      
      <tag>algorithm</tag>
      
      <tag>string</tag>
      
      <tag>Trie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kmp专题训练</title>
    <link href="/2021/11/26/kmp_problem/"/>
    <url>/2021/11/26/kmp_problem/</url>
    
    <content type="html"><![CDATA[<h1 id="kmp-ekmp-专题训练"><a href="#kmp-ekmp-专题训练" class="headerlink" title="kmp/ekmp 专题训练"></a>kmp/ekmp 专题训练</h1><blockquote><p>🐴糙人蠢凑合看</p></blockquote><h2 id="0x01-剪花布条-HDU-2087"><a href="#0x01-剪花布条-HDU-2087" class="headerlink" title="0x01 剪花布条 HDU-2087"></a>0x01 剪花布条 HDU-2087</h2><blockquote><p><a href="https://vjudge.net/problem/HDU-2087">link</a></p><p>纯纯kmp裸题，不可重叠计数 </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kmp_pre</span><span class="hljs-params">(string p, <span class="hljs-keyword">int</span> next[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    j = next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; p.<span class="hljs-built_in">length</span>())<br>    &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">-1</span> != j &amp;&amp; p[i] != p[j])<br>            j = next[j];<br>        next[++i] = ++j;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kmp_Count</span><span class="hljs-params">(string x, string y, <span class="hljs-keyword">int</span> next[])</span></span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">kmp_pre</span>(x, next);<br>    i = j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; y.<span class="hljs-built_in">length</span>())<br>    &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">-1</span> != j &amp;&amp; y[i] != x[j])<br>            j = next[j];<br>        i++;<br>        j++;<br>        <span class="hljs-keyword">if</span> (j &gt;= x.<span class="hljs-built_in">length</span>())<br>        &#123;<br>            ans++;<br>            j = <span class="hljs-number">0</span>;       <span class="hljs-comment">//不可重叠计数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string a,b;<br>    <span class="hljs-keyword">int</span> nxt[<span class="hljs-number">1005</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        cin&gt;&gt;a;<br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-string">&quot;#&quot;</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cin&gt;&gt;b;<br>            <span class="hljs-built_in">memset</span>(nxt,<span class="hljs-number">0</span>,b.<span class="hljs-built_in">length</span>()+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">int</span> ans=<span class="hljs-built_in">kmp_Count</span>(b,a,nxt);<br>            cout&lt;&lt;ans&lt;&lt;endl;            <br>        &#125;<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x02-Secret-HDU-6153"><a href="#0x02-Secret-HDU-6153" class="headerlink" title="0x02 Secret HDU-6153"></a>0x02 Secret HDU-6153</h2><blockquote><p><a href="https://vjudge.net/problem/HDU-6153">link</a></p><p>题意：</p><p>给两个串s1,s2，求s2所有的后缀子串的长度乘在主串s1中出现的次数之和</p><p>解法：</p><p>挨个枚举后缀是🐷b做法，我们可以先把字符串<strong>翻转</strong>，这样后缀变前缀，就来到了我们熟悉的kmp匹配环节</p><p>解法一：exkmp</p><p>翻转后发现这不就正好利用extend[]数组的定义直接求解，做一遍ekmp，遍历extend[]数组，对每个值做 <code>(1+entend[i])*entend[i]&gt;&gt;1</code> 处理，全部加和即为答案</p><p>解法二：kmp</p><p>利用对next[]数组的理解，暂时鸽了，因为想了很久没想明白</p></blockquote><p>解法一： ekmp </p><blockquote><p>猛wa之后给了我深刻的教训：数组开 longlong😅😅</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1000000007</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i,x,y) for(int i=x;i&lt;y;i++)</span><br>ll nxt[maxn], extend[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ekmp_pre</span><span class="hljs-params">(string x, ll next[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> m = x.<span class="hljs-built_in">length</span>();<br>    next[<span class="hljs-number">0</span>] = m;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (j + <span class="hljs-number">1</span> &lt; m &amp;&amp; x[j] == x[j + <span class="hljs-number">1</span>])<br>        j++;<br>    next[<span class="hljs-number">1</span>] = j;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> p = next[k] + k - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> L = next[i - k];<br>        <span class="hljs-keyword">if</span> (i + L &lt; p + <span class="hljs-number">1</span>)<br>            next[i] = L;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            j = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, p - i + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span> (i + j &lt; m &amp;&amp; x[i + j] == x[j])<br>                j++;<br>            next[i] = j;<br>            k = i;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ekmp</span><span class="hljs-params">(string x, string y, ll next[], ll extend[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">ekmp_pre</span>(x, next);<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    ll ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> m = x.<span class="hljs-built_in">length</span>(), n = y.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; j &lt; m &amp;&amp; x[j] == y[j])<br>        j++;<br>    extend[<span class="hljs-number">0</span>] = j;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> p = extend[k] + k - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> L = next[i - k];<br>        <span class="hljs-keyword">if</span> (i + L &lt; p + <span class="hljs-number">1</span>)<br>            extend[i] = L;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            j = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, p - i + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span> (i + j &lt; n &amp;&amp; j &lt; m &amp;&amp; y[i + j] == x[j])<br>                j++;<br>            extend[i] = j;<br>            k = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, n)<br>    &#123;<br>        ret = (ret % mod + (((<span class="hljs-number">1</span> + extend[i])* extend[i])&gt;&gt;<span class="hljs-number">1</span>) % mod) % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        string s, p;<br>        cin &gt;&gt; s &gt;&gt; p;<br>        <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">reverse</span>(p.<span class="hljs-built_in">begin</span>(), p.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">memset</span>(nxt, <span class="hljs-number">0</span>, p.<span class="hljs-built_in">length</span>() + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">memset</span>(extend, <span class="hljs-number">0</span>, s.<span class="hljs-built_in">length</span>() + <span class="hljs-number">1</span>);<br>        ll ans;<br>        ans=<span class="hljs-built_in">ekmp</span>(p, s, nxt, extend);<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解法二：kmp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 寄</span><br></code></pre></td></tr></table></figure><h2 id="0x03-Cow-Patterns-POJ-3167"><a href="#0x03-Cow-Patterns-POJ-3167" class="headerlink" title="0x03 Cow Patterns POJ-3167"></a>0x03 Cow Patterns POJ-3167</h2><blockquote><p><a href="https://vjudge.net/problem/POJ-3167">link</a> 牛题</p><p>题意：</p><p><strong>模式串可以浮动的模式匹配问题</strong></p><p>给出模式串的相对大小顺序，需要找出在主串中模式串的匹配次数和起始位置</p><p>样例：</p><p>S: 5 6 2 10 10 7 3 2 9  </p><p>P: 1 4 4 3 2 1</p><p>故 2 10 10 7 3 2 符合要求，输出为 1 3</p><p>解法： KMP+前缀和</p><p>统计比当前数小，和于当前数相等的，然后进行kmp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//POJ 3167</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">100005</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXM = <span class="hljs-number">25005</span>;<br><br><span class="hljs-keyword">int</span> a[MAXN];       <span class="hljs-comment">// 存放主串</span><br><span class="hljs-keyword">int</span> b[MAXM];       <span class="hljs-comment">// 存放模式串</span><br><span class="hljs-keyword">int</span> as[MAXN][<span class="hljs-number">30</span>];  <span class="hljs-comment">// as[i][j] = k表示0 - i位中有k个数字j</span><br><span class="hljs-keyword">int</span> bs[MAXM][<span class="hljs-number">30</span>];  <span class="hljs-comment">// bs[i][j] = k表示0 - i位中有k个数字j</span><br><span class="hljs-keyword">int</span> next[MAXM];    <span class="hljs-comment">// 存放模式串失配时的移动位数</span><br>vector&lt;<span class="hljs-keyword">int</span>&gt; ans;   <span class="hljs-comment">// 存放结果</span><br><span class="hljs-keyword">int</span> n, m, s;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span> </span>&#123;<br>    ans.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-built_in">memset</span>(as, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(as));<br>    <span class="hljs-built_in">memset</span>(bs, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(bs));<br>    as[<span class="hljs-number">1</span>][a[<span class="hljs-number">1</span>]] = <span class="hljs-number">1</span>;<br>    bs[<span class="hljs-number">1</span>][b[<span class="hljs-number">1</span>]] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-built_in">memcpy</span>(as[i], as[i - <span class="hljs-number">1</span>], <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(as[<span class="hljs-number">0</span>]));<br>        ++as[i][a[i]];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-built_in">memcpy</span>(bs[i], bs[i - <span class="hljs-number">1</span>], <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(bs[<span class="hljs-number">0</span>]));<br>        ++bs[i][b[i]];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetNext</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(next, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(next));<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br>    next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= m) &#123;<br>        <span class="hljs-keyword">int</span> si = <span class="hljs-number">0</span>, sj = <span class="hljs-number">0</span>, ei = <span class="hljs-number">0</span>, ej = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">1</span>; k &lt; b[i]; ++k)<br>            si += bs[i][k] - bs[i - j][k];<br>        ei = bs[i][k] - bs[i - j][k];<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">1</span>; k &lt; b[j]; ++k)<br>            sj += bs[j][k];<br>        ej = bs[j][k];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == j || (si == sj &amp;&amp; ei == ej))<br>            next[++i] = ++j;<br>        <span class="hljs-keyword">else</span><br>            j = next[j];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Kmp</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>, k = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= n) &#123;<br>        <span class="hljs-keyword">int</span> si = <span class="hljs-number">0</span>, sj = <span class="hljs-number">0</span>, ei = <span class="hljs-number">0</span>, ej = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">1</span>; k &lt; a[i]; ++k)<br>            si += as[i][k] - as[i - j][k];<br>        ei = as[i][k] - as[i - j][k];<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">1</span>; k &lt; b[j]; ++k)<br>            sj += bs[j][k];<br>        ej = bs[j][k];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == j || (si == sj &amp;&amp; ei == ej))<br>            ++i, ++j;<br>        <span class="hljs-keyword">else</span><br>            j = next[j];<br>        <span class="hljs-keyword">if</span> (j == m + <span class="hljs-number">1</span>) &#123;<br>            ans.<span class="hljs-built_in">push_back</span>(i - m);<br>            j = next[j];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;s) == <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]);<br>        <span class="hljs-built_in">Init</span>();<br>        <span class="hljs-built_in">GetNext</span>();<br>        <span class="hljs-built_in">Kmp</span>();<br>        <span class="hljs-keyword">size_t</span> len = ans.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, len);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; len; ++i)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ALGORITHM TRAINING</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>algorithm</tag>
      
      <tag>string</tag>
      
      <tag>kmp</tag>
      
      <tag>dp</tag>
      
      <tag>前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021CCPC广州站vp</title>
    <link href="/2021/11/25/2021ccpc_guangzhou/"/>
    <url>/2021/11/25/2021ccpc_guangzhou/</url>
    
    <content type="html"><![CDATA[<h1 id="2021CCPC广州站vp"><a href="#2021CCPC广州站vp" class="headerlink" title="2021CCPC广州站vp"></a>2021CCPC广州站vp</h1><blockquote><p>“如何解方程”</p></blockquote><h2 id="C-Necklace"><a href="#C-Necklace" class="headerlink" title="C_Necklace"></a>C_Necklace</h2><blockquote><p>二分+贪心</p><p>读题比较关键 没改明白wa3</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sec second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)    </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (ll i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x - 1; i &gt;= y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ll M,N;<br>ll pos[maxn];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(ll x)</span></span>&#123;<br>    ll last=<span class="hljs-number">0</span>,tmp,end;<br>    end=N-pos[M<span class="hljs-number">-1</span>]+pos[<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,M)&#123;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(end&lt;=x) &#123;last=end; end=<span class="hljs-number">0</span>; <span class="hljs-keyword">continue</span>;&#125;<br>            <span class="hljs-keyword">else</span>&#123; end-=x;  last=x; <span class="hljs-keyword">continue</span>;&#125;<br>        &#125;<span class="hljs-built_in">eif</span>(i==M<span class="hljs-number">-1</span>) tmp=end+pos[i]-pos[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">else</span> tmp=pos[i]-pos[i<span class="hljs-number">-1</span>];<br><br>        ll can=pos[i]-pos[i<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>;<br>        can=(can&gt;<span class="hljs-number">0</span>)?can:<span class="hljs-number">0</span>;<br>        ll sub=(x-last&gt;can)?can:(x-last);<br>        <span class="hljs-keyword">if</span>(tmp&gt;=sub) tmp-=sub;<br>        <span class="hljs-keyword">else</span> tmp=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(tmp&lt;=x) last=tmp;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// N=read(); M=read();</span><br>    cin&gt;&gt;N&gt;&gt;M;<br>    ll ans=<span class="hljs-number">1</span>,tmp,last=<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,M)&#123;<br>        cin&gt;&gt;pos[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(M==<span class="hljs-number">1</span>) &#123;cout&lt;&lt;N; <span class="hljs-keyword">return</span>;&#125;<br>    ll l=<span class="hljs-number">1</span>,r=N;<br>    <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>        ll mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid))&#123;<br>            ans=mid;<br>            r=mid<span class="hljs-number">-1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;   <br>    cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    IOS;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="H-Three-Intergers"><a href="#H-Three-Intergers" class="headerlink" title="H_Three Intergers"></a>H_Three Intergers</h2><blockquote><p>题意：给a,b,c，求满足x%y=a, y%z=b, z%x=c 的任意一组x,y,z</p><p>思路：数学题，方程化简，根据条件直接造，起初忘记了模的性质导致解不出方程，看了题解恍然大悟 <a href="https://blog.csdn.net/qq_45323960/article/details/121368980">题解</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        <span class="hljs-keyword">if</span> (a == b &amp;&amp; b == c) &#123;<br>            <span class="hljs-keyword">if</span> (!a) &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;YES\n&quot;</span>;<br>                cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;NO\n&quot;</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        ll x, y, z, k;<br>        <span class="hljs-keyword">if</span> (b &gt; a) &#123;<br>            k = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, (c - a) / b) + <span class="hljs-number">1</span>;<br>            x = k * b + a;<br>            y = b;<br>            z = (k * b + a) * <span class="hljs-number">2</span> + c;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &gt; c) &#123;<br>            k = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, (b - c) / a) + <span class="hljs-number">1</span>;<br>            x = a;<br>            y = (k * a + c) * <span class="hljs-number">2</span> + b;<br>            z = k * a + c;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt; b) &#123;<br>            k = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, (a - b) / c) + <span class="hljs-number">1</span>;<br>            x = (k * c + b) * <span class="hljs-number">2</span> + a;<br>            y = k * c + b;<br>            z = c;<br>        &#125; <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">assert</span>(<span class="hljs-literal">false</span>);<br>        cout &lt;&lt; <span class="hljs-string">&quot;YES\n&quot;</span>;<br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; z &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-built_in">assert</span>(x % y == a &amp;&amp; y % z == b &amp;&amp; z % x == c);<br>        <span class="hljs-built_in">assert</span>(x &lt;= <span class="hljs-number">1e18</span>);<br>        <span class="hljs-built_in">assert</span>(y &lt;= <span class="hljs-number">1e18</span>);<br>        <span class="hljs-built_in">assert</span>(z &lt;= <span class="hljs-number">1e18</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="I-Pudding-Store"><a href="#I-Pudding-Store" class="headerlink" title="I_Pudding Store"></a>I_Pudding Store</h2><blockquote><p>手算了一下太麻烦，全排列打表找规律即可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sec second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x - 1; i &gt;= y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mod 998244353</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// 1 2 6 12 24 48 96 192 384 768</span><br><span class="hljs-comment">// int a[50];</span><br><span class="hljs-comment">// void init(int n)&#123;</span><br><span class="hljs-comment">//     rep(i,1,n+1) a[i]=i;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// void dfs()&#123;</span><br><span class="hljs-comment">//     rep(i,1,11)&#123;</span><br><span class="hljs-comment">//         ll cnt=0;</span><br><span class="hljs-comment">//         init(i);</span><br><span class="hljs-comment">//         bool t=true;</span><br><span class="hljs-comment">//         while(t)&#123;</span><br><span class="hljs-comment">//             bool can=false;</span><br><span class="hljs-comment">//             rep(j,1,i+1)&#123;</span><br><span class="hljs-comment">//                 ll fuck=0;</span><br><span class="hljs-comment">//                 rep(k,1,j+1)&#123;</span><br><span class="hljs-comment">//                     fuck+=a[k];</span><br><span class="hljs-comment">//                 &#125;</span><br><span class="hljs-comment">//                 fuck*=2;</span><br><span class="hljs-comment">//                 if(fuck%j==0) can=true;</span><br><span class="hljs-comment">//                 else &#123;can=false; break;&#125;</span><br><span class="hljs-comment">//             &#125;</span><br><span class="hljs-comment">//             if(can) cnt++;</span><br><span class="hljs-comment">//             t=next_permutation(a+1,a+i+1);</span><br><span class="hljs-comment">//         &#125;</span><br><span class="hljs-comment">//         cout&lt;&lt;cnt&lt;&lt;&quot; &quot;;</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a, ll b)</span></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>;<br>    ll res=a;<br>    res%=mod;<br>    <span class="hljs-keyword">while</span>(b)&#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) ans=ans*res%mod; b&gt;&gt;=<span class="hljs-number">1</span>; res=res*res%mod;&#125;<br>    <span class="hljs-keyword">return</span> ans%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n; cin&gt;&gt;n;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) cout&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">eif</span>(n==<span class="hljs-number">2</span>) cout&lt;&lt;<span class="hljs-number">2</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">eif</span>(n==<span class="hljs-number">3</span>) cout&lt;&lt;<span class="hljs-number">6</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span>&#123;<br>        ll tmp=<span class="hljs-number">6</span>;<br>        ll add=<span class="hljs-built_in">qpow</span>(<span class="hljs-number">2</span>,n<span class="hljs-number">-3</span>);<br>        tmp=add%mod*tmp%mod;<br>        cout&lt;&lt;tmp&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    IOS;<br>    <span class="hljs-comment">// dfs();</span><br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：什么时候才能不粗心</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SOLUTIONS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solutions</tag>
      
      <tag>CCPC</tag>
      
      <tag>ACM</tag>
      
      <tag>打表</tag>
      
      <tag>二分</tag>
      
      <tag>数学</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021CCPC桂林站vp</title>
    <link href="/2021/11/24/2021ccpc_guilin/"/>
    <url>/2021/11/24/2021ccpc_guilin/</url>
    
    <content type="html"><![CDATA[<h1 id="2021CCPC桂林站vp"><a href="#2021CCPC桂林站vp" class="headerlink" title="2021CCPC桂林站vp"></a>2021CCPC桂林站vp</h1><blockquote><p>”祭奠擦肩而过的桂林两日游“</p></blockquote><h2 id="A-Hero-Named-Magnus"><a href="#A-Hero-Named-Magnus" class="headerlink" title="A_Hero Named Magnus"></a>A_Hero Named Magnus</h2><blockquote><p>水题。为什么不ban猛犸？输出2n-1</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x; cin&gt;&gt;x;<br>    ll ans;<br>    ans=x*<span class="hljs-number">2</span><span class="hljs-number">-1</span>;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D-Assumption-is-All-You-Need"><a href="#D-Assumption-is-All-You-Need" class="headerlink" title="D_Assumption is All You Need"></a>D_Assumption is All You Need</h2><blockquote><p>构造题</p><p>题意：给你两个序列A，B，对A可执行操作：若 i&lt;j 且 Ai&gt;Aj，可将Ai与Aj交换，问能否通过合法的操作将A变成B，并打印操作序列  </p><p>思路：从屁股往前扫一遍，如果Ai和Bi不一样，就从A[Bi_pos]往前扫，寻求最优解，瞎JB贪心，wa2待补</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br></code></pre></td></tr></table></figure><h2 id="E-Buy-and-Delete"><a href="#E-Buy-and-Delete" class="headerlink" title="E_Buy and Delete"></a>E_Buy and Delete</h2><blockquote><p>题意：给了你一些带权有向边，Alice可以用已有的c元钱购买一些边形成一张有向图；随后Bob进行删边，每次可以删除一个无环的子集，Alice想最大化删边次数，Bob想最小化，二者都采取最优操作，问Bob需要删除几次</p><p>思路：答案只可能是0,1,2，0的情况是Alice一条边都买不起，1的情况是Alice买的无环图，2的情况是Alice买的带环图，无论有几个环，Bob都只需要删两次就够了，这个比较容易理解。</p><p>解法：直接把所有边存到一个有向图里，做Dijkstra找从v-&gt;v 的最短路，判断买不买得起就可以了</p><p>ps: 开始犯病用 n2 的Dij结果T了，换了 nlogn 的堆优化Dij就不T了；然后还在想改造一下Dij让起点为 i 的dist数组可以存 <code>dist[i]</code>，结果想了想直接Dij完了之后<code>dist[j] + mincost[j][i]</code> 不就是环的长度吗，wssb </p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1000000001</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x - 1; i &gt;= y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 2005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n, m, c;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qnode</span>&#123;</span><br>    <span class="hljs-keyword">int</span> v,c;<br>    <span class="hljs-built_in">qnode</span>(<span class="hljs-keyword">int</span> _v=<span class="hljs-number">0</span>,<span class="hljs-keyword">int</span> _c=<span class="hljs-number">0</span>):<span class="hljs-built_in">v</span>(_v),<span class="hljs-built_in">c</span>(_c)&#123;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> qnode &amp;r)<span class="hljs-keyword">const</span>&#123;<br>        <span class="hljs-keyword">return</span> c&gt;r.c;<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> v,cost;<br>    <span class="hljs-built_in">Edge</span>(<span class="hljs-keyword">int</span> _v=<span class="hljs-number">0</span>,<span class="hljs-keyword">int</span> _cost=<span class="hljs-number">0</span>):<span class="hljs-built_in">v</span>(_v),<span class="hljs-built_in">cost</span>(_cost)&#123;&#125;<br>&#125;;<br>vector&lt;Edge&gt;E[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-keyword">int</span> dist[maxn];<br><span class="hljs-keyword">int</span> mincost[maxn][maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start)</span></span>&#123; <br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-literal">false</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)dist[i]=INF;<br>    priority_queue&lt;qnode&gt;que;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>()) que.<span class="hljs-built_in">pop</span>();<br>    dist[start]=<span class="hljs-number">0</span>;<br>    que.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">qnode</span>(start,<span class="hljs-number">0</span>));<br>    qnode tmp;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        tmp=que.<span class="hljs-built_in">top</span>(); que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">int</span> u=tmp.v;<br>        <span class="hljs-keyword">if</span>(vis[u])<span class="hljs-keyword">continue</span>;<br>        vis[u]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;E[u].<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">int</span> v=E[tmp.v][i].v;<br>            <span class="hljs-keyword">int</span> cost=E[u][i].cost;<br>            <span class="hljs-keyword">if</span>(!vis[v]&amp;&amp;dist[v]&gt;dist[u]+cost)&#123;<br>                dist[v]=dist[u]+cost; <br>                que.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">qnode</span>(v,dist[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w)</span></span>&#123;<br>    E[u].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">Edge</span>(v,w));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;c);<br>    <span class="hljs-keyword">int</span> mncost=INF;<br>    <span class="hljs-keyword">int</span> u, v, p;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">rep</span>(j,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)<br>            mincost[i][j]=INF;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,m)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;p);<br>        <span class="hljs-built_in">addedge</span>(u,v,p);<br>        mincost[u][v]=<span class="hljs-built_in">min</span>(mincost[u][v],p);<br>        mncost=<span class="hljs-built_in">min</span>(mncost,p);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(mncost&gt;c)&#123; cout&lt;&lt;<span class="hljs-number">0</span>; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br>    <span class="hljs-built_in">eif</span>(mncost==c)&#123; cout&lt;&lt;<span class="hljs-number">1</span>; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125; <br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">Dijkstra</span>(i);<br>        <span class="hljs-built_in">rep</span>(j,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(i!=j &amp;&amp; dist[j]+mincost[j][i]&lt;=c)&#123;cout&lt;&lt;<span class="hljs-number">2</span>; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="G-Occupy-the-Cities"><a href="#G-Occupy-the-Cities" class="headerlink" title="G_Occupy the Cities"></a>G_Occupy the Cities</h2><blockquote><p>二分答案/dp</p><p>题意：一个01串，每次操作可以将串中所有的1的左边一位或右边一位也变成1，问变成全1串需要几次操作</p><p>解法：二分答案，<code>check()</code> 中从串的左边到右边对每一位1嗯贪心，dp解法没看</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sec second</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">char</span> s[maxn];<br><span class="hljs-keyword">int</span> n;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; one;<br><span class="hljs-keyword">int</span> need[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    one.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, t + <span class="hljs-number">1</span>) &#123;<br>        need[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>            one.<span class="hljs-built_in">pb</span>(i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (one[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span> &gt; x)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (one[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span> == x)<br>        need[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> tmp;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, one.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-keyword">if</span> (one[i] - one[i - <span class="hljs-number">1</span>] == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        tmp = one[i] - one[i - <span class="hljs-number">1</span>] - <span class="hljs-number">1</span> + need[i];<br>        <span class="hljs-keyword">if</span> ((tmp + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> &gt; x)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((tmp + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> == x) &#123;<br>            <span class="hljs-keyword">if</span> (tmp / <span class="hljs-number">2</span> == x)<br>                need[i + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    tmp = n - one[one.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>] + need[one.<span class="hljs-built_in">size</span>()];<br>    <span class="hljs-keyword">if</span> (tmp &gt; x)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">init</span>(n);<br>    <span class="hljs-keyword">if</span> (one.<span class="hljs-built_in">size</span>() == n) &#123;<br>        cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = n;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//cout &lt;&lt; mid &lt;&lt; &quot; &quot;</span><br>        <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n + <span class="hljs-number">2</span>) need[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) &#123;<br>            ret = mid;<br>            r = mid - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; ret &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="I-PTSD"><a href="#I-PTSD" class="headerlink" title="I_PTSD"></a>I_PTSD</h2><blockquote><p>沙比题，不想复盘了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x - 1; i &gt;= y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">char</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    ll ret=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">int</span> lead=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> mxpos;<br>    <span class="hljs-built_in">red</span>(i,n,<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>            lead++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(lead&gt;<span class="hljs-number">0</span>)&#123;<br>                lead--;<br>                ret+=(i+<span class="hljs-number">1</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                lead++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ret&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：今天想出来D了吗</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SOLUTIONS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solutions</tag>
      
      <tag>CCPC</tag>
      
      <tag>ACM</tag>
      
      <tag>思维</tag>
      
      <tag>模拟</tag>
      
      <tag>二分</tag>
      
      <tag>图论</tag>
      
      <tag>Dijkstra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Educational Codeforces Round 117 (Div.2)</title>
    <link href="/2021/11/23/cf%20Edu%20117/"/>
    <url>/2021/11/23/cf%20Edu%20117/</url>
    
    <content type="html"><![CDATA[<h1 id="Educational-Codeforces-Round-117-Rated-for-Div-2"><a href="#Educational-Codeforces-Round-117-Rated-for-Div-2" class="headerlink" title="Educational Codeforces Round 117 (Rated for Div. 2)"></a>Educational Codeforces Round 117 (Rated for Div. 2)</h1><h2 id="A-Distance"><a href="#A-Distance" class="headerlink" title="A_Distance"></a>A_Distance</h2><blockquote><p>签到</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sec second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x - 1; i &gt;= y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x, y;<br>    cin &gt;&gt; x &gt;&gt; y;<br>    <span class="hljs-keyword">int</span> xx = <span class="hljs-number">-1</span>, yy = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> tot = x + y;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(tot) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>        cout &lt;&lt; xx &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; yy &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(x) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">abs</span>(y) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            cout &lt;&lt; x / <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y / <span class="hljs-number">2</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tot /= <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (x &gt; y)<br>                cout &lt;&lt; tot &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; tot &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="B-Special-Permutation"><a href="#B-Special-Permutation" class="headerlink" title="B_Special_Permutation"></a>B_Special_Permutation</h2><blockquote><p>贪心构造</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sec second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x - 1; i &gt;= y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> num[<span class="hljs-number">105</span>];<br><span class="hljs-keyword">bool</span> vis[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n,a,b; cin&gt;&gt;n&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>    <span class="hljs-built_in">memset</span>(num, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(num));<br>    vis[a]=<span class="hljs-number">1</span>;<br>    vis[b]=<span class="hljs-number">1</span>;<br>    num[n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]=b;<br>    num[<span class="hljs-number">1</span>]=a;<br>    <span class="hljs-keyword">int</span> tmp=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">bool</span> find;<br>    <span class="hljs-built_in">rep</span>(i,n/<span class="hljs-number">2</span>+<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>)&#123;<br>        find=<span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">rep</span>(j,tmp,b)&#123;<br>            <span class="hljs-keyword">if</span>(!vis[j])&#123;<br>                vis[j]=<span class="hljs-number">1</span>;<br>                num[i]=j;<br>                tmp=j+<span class="hljs-number">1</span>;<br>                find=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!find) &#123;cout&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>;&#125;<br>    &#125;<br>    tmp=n;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">2</span>,n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>)&#123;<br>        find=<span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">red</span>(j,tmp+<span class="hljs-number">1</span>,a)&#123;<br>            <span class="hljs-keyword">if</span>(!vis[j])&#123;<br>                vis[j]=<span class="hljs-number">1</span>;<br>                num[i]=j;<br>                tmp=j<span class="hljs-number">-1</span>;<br>                find=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!find) &#123;cout&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>;&#125;<br>    &#125;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)&#123;<br>        cout&lt;&lt;num[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="C-Chat-Ban"><a href="#C-Chat-Ban" class="headerlink" title="C_Chat_Ban"></a>C_Chat_Ban</h2><blockquote><p>题意：</p><p>输入k,x ; 你有2k-1条信息要发，信息的长度为1,2,3…k-1,k,k-1…1，在发出当前信息时，你已经发送的总长度必须小于x，问你最多能发多少条</p><p>思路：</p><p>二分答案即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sec second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x - 1; i &gt;= y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">ll <span class="hljs-title">cal</span><span class="hljs-params">(ll begin, ll end)</span></span>&#123;<br>    ll ret;<br>    <span class="hljs-keyword">if</span>((begin+end)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>        ret=(begin+end)/<span class="hljs-number">2</span>*(end-begin+<span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        ret=(end-begin+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>*(begin+end);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    ll k,x; cin&gt;&gt;k&gt;&gt;x;<br>    ll ans=<span class="hljs-number">0</span>;<br>    ll test=<span class="hljs-built_in">cal</span>(<span class="hljs-number">1</span>,k);<br>    <span class="hljs-keyword">if</span>(test==x)&#123;<br>        cout&lt;&lt;k&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<span class="hljs-built_in">eif</span>(test&lt;x)&#123;<br>        ans+=k;<br>        x-=test;<br>        test=<span class="hljs-built_in">cal</span>(<span class="hljs-number">1</span>,k<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(test&lt;=x)&#123; cout&lt;&lt;<span class="hljs-number">2</span>*k<span class="hljs-number">-1</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>;&#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            ll l=<span class="hljs-number">1</span>,r=k;<br>            ll mid;<br>            ll tmp=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>                mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>                test=<span class="hljs-built_in">cal</span>(mid,k<span class="hljs-number">-1</span>);<br>                <span class="hljs-keyword">if</span>(test==x)&#123;<br>                    tmp=k-mid;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-built_in">eif</span>(test&lt;x)&#123;<br>                    tmp=k-mid+<span class="hljs-number">1</span>;<br>                    r=mid<span class="hljs-number">-1</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    l=mid+<span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            ans+=tmp;<br>            cout&lt;&lt;ans&lt;&lt;endl;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        ll l=<span class="hljs-number">1</span>,r=k;<br>        ll mid;<br>        <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>            mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>            test=<span class="hljs-built_in">cal</span>(<span class="hljs-number">1</span>,mid);<br>            <span class="hljs-keyword">if</span>(test==x)&#123;<br>                ans=mid;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-built_in">eif</span>(test&lt;x)&#123;<br>                ans=mid+<span class="hljs-number">1</span>;<br>                l=mid+<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                r=mid<span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="D-X-Magic-Pair"><a href="#D-X-Magic-Pair" class="headerlink" title="D_X_Magic_Pair"></a>D_X_Magic_Pair</h2><blockquote><p>题意：</p><p>给你 a, b, x，每次操作可以将a或b替换为 |a-b|, 询问能否将a或b进行任意次操作后替换为 x</p><p>思路：</p><p>gcd变种，每次判断一下 <strong>a%b</strong> 是否等于 <strong>x%b</strong>，即 (a-x)%b==0 ，如果相等即为YES，否则即为NO</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sec second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x - 1; i &gt;= y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ll a, b, x;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a==x||b==x) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a&gt;x&amp;&amp;(a-x)%b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <br>    <span class="hljs-keyword">if</span>(b&gt;x&amp;&amp;(b-x)%a==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">gcd</span>(b,a%b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;x;<br>    <span class="hljs-keyword">if</span>(x&gt;a&amp;&amp;x&gt;b)&#123; cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>; &#125;<br>    <span class="hljs-keyword">if</span>(x==a||x==b)&#123; cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>;&#125;<br>    ll tmpa=(a&gt;b)?a:b;<br>    ll tmpb=(b&lt;a)?b:a;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">gcd</span>(tmpa,tmpb)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>仨签到很顺溜，最后一个题因为判断条件结果sb了，掉分</p>]]></content>
    
    
    <categories>
      
      <category>SOLUTIONS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solutions</tag>
      
      <tag>ACM</tag>
      
      <tag>思维</tag>
      
      <tag>二分</tag>
      
      <tag>codeforces</tag>
      
      <tag>gcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进行一个毛概题库的爬</title>
    <link href="/2021/11/10/maogai_crawler/"/>
    <url>/2021/11/10/maogai_crawler/</url>
    
    <content type="html"><![CDATA[<h1 id="进行一个毛概题库的爬"><a href="#进行一个毛概题库的爬" class="headerlink" title="进行一个毛概题库的爬"></a>进行一个毛概题库的爬</h1><blockquote><p>前言：🐷b毛概题库要截止了，几个时间段的题库各自有截止日期😅，眼见着ddl就要到了可👴又不想去刷，所以萌生了借助python爬虫来进行偷懒的想法</p></blockquote><h2 id="办事流程"><a href="#办事流程" class="headerlink" title="办事流程"></a>办事流程</h2><blockquote><p>由于之前👴说过：“python狗都不用”，“用python的都沙比” 的名言，所以一开始是拒绝的，但是迫于现状，所以简单突击了几天，学到了一些知识，实战用到的也就只有不到 1/5</p></blockquote><p>需求：</p><p>题库共计一百多道题目，每次测试15道题，5单选5多选5判断，提交做题结果之后方可获得所有题的正确答案，所以我们的思路就是从所有测试尝试的反馈页面中爬取题目题面和正确答案并持久化存储，over</p><p><strong>原先步骤(全自动)</strong></p><ol><li><p>模拟登录</p><p>由于这个b bb平台需要信息门户登录成功之后才能做那b题，所以需要模拟登陆之后才能请求到做题结果的页面，所以我们利用session会话对象在向登录页面发起请求后储存cookie，这样后面直接用session对象再对需求的页面进行get请求即可。</p></li><li><p>自动做题</p><p>自动开始新尝试并且提交</p></li><li><p>开爬</p><p>get到了页面之后，利用xpath进行数据解析，持久化存储即可</p></li></ol><blockquote><p>想法很好，后来出现了一些问题，所以以下是最终流程：</p></blockquote><hr><p><strong>现实步骤(几乎全自动)</strong></p><blockquote><p>2021/11/13 更新了 v1.1 版本：①优化了存储方式：按字典序排序即按题目的章节进行分类；②实现了 v1.0 没实现的自动做题功能</p></blockquote><ol><li><p>模拟登录(x) 手动登录(√)</p><p>按照原先的想法模拟登陆，返回的消息也是登陆成功，但是请求所需页面是还是被拦截了，需要重新登录，由于才疏学浅，一时不知道如何是好，干脆直接手动登录后，利用浏览器F12，找到登录的cookie，手动复制到源码中的 headers 内，直接用 requests 进行 post 和 get 的请求即可获得所需页面</p></li><li><p>自动做题(√)</p><ul><li>开始新尝试：发现开始新尝试的按钮中对应的 <code>&lt;a&gt;</code>标签的 url 中的参数有个有趣的地方 <code>new_attempt=1</code>，直接访问即可以开始一次新的尝试，直接get请求即可</li><li>提交新尝试：点击提交按钮后进行抓包，发现有一个post请求对应的 url : <code>do/take/saveAttempt?saveSequence=1/...</code> ，观察数据包中传输的数据发现有这样几个有趣的地方：<code>data_submitted:true</code>, <code>save_and_submit:true</code>；我们猜测这就是对服务器进行的提交结果请求。之后对比两次不同的提交所得的数据包发现，所需修改的参数为<code>current_attempt_id</code> 和 <code>current_attempt_id_backup</code>，二者是一样的，于是观察哪里有这个id，发现和做题页面中的<code>&lt;div&gt;</code>标签的类名有着惊人的一致🤠。直接对做题页面进行xpath解析，解析到div标签的类名传输进post请求的数据中，再发送post请求即可完成自动提交新尝试😪</li></ul></li><li><p>自动开爬 ！(√)</p><ol><li><p>get到所有尝试的页面，利用xpath解析到对应每次做题结果的 <code>&lt;a&gt;</code> 标签的href地址存到 list 中，拼接成完整的url</p></li><li><p>对每个url 利用xpath解析到对应题目和答案的标签，根据题目类型分别存储，利用字典存储，题目名称为key，题目答案为value，为了防止存储重复题目，每次存储前先查询key是否存在，不存在再存入字典中，写入文件的同时计数器+1，方便统计爬取题目的个数</p></li><li><p>冻手冻手</p></li></ol></li></ol><h2 id="🐴来"><a href="#🐴来" class="headerlink" title="🐴来"></a>🐴来</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 创建文件夹</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;./maogai/Round_2/&#x27;</span>):<br>        os.mkdir(<span class="hljs-string">&#x27;./maogai/Round_2/&#x27;</span>)<br><br>    session = requests.Session()<br>    detail_url = <span class="hljs-string">&#x27;https://wlkc.ouc.edu.cn&#x27;</span><br>    <span class="hljs-comment"># 使用现成的cookie直接绕过登录页面</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;JSESSIONID=AC1DEAF6D6037A4B310E53885942338D; LOGIN=3139303230303331303330; UM_distinctid=17bcb2f4e579ab-0e328a4e032f8-a7d193d-144000-17bcb2f4e58315; SCREEN_NAME=4f566b646b73396b79642f396274486b665a503656773d3d; session_id=4025A5EAD4245D545DCB1E8FD2D1EE4E; s_session_id=864B98DCC97327775D6853902DCD0138; web_client_cache_guid=871e5dc2-27ae-44b8-898f-a44d97e217f2&#x27;</span>,<br>    &#125;<br><br>    <span class="hljs-comment"># 自动请求开始测试和提交 times_att为次数 每次请求间隔3s</span><br>    times_att = <span class="hljs-number">10</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;attempt started...&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,times_att):<br>        <span class="hljs-comment"># 请求测试</span><br>        attempt_url = <span class="hljs-string">&#x27;https://wlkc.ouc.edu.cn/webapps/assessment/take/launch.jsp?course_assessment_id=_30131_1&amp;course_id=_13492_1&amp;new_attempt=1&amp;content_id=_633969_1&amp;step=&#x27;</span><br>        atmp = session.get(url=attempt_url, headers=headers)<br>        <br>        <span class="hljs-comment"># 拿到本次测试id</span><br>        do_url = <span class="hljs-string">&#x27;https://wlkc.ouc.edu.cn/webapps/assessment/take/launch.jsp?course_assessment_id=_30131_1&amp;course_id=_13492_1&amp;content_id=_633969_1&amp;step=null&#x27;</span><br>        do = session.get(url=do_url, headers=headers)<br>        tree_att = etree.HTML(do.text)<br>        atnum = tree_att.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;takeQuestionDiv &quot;]/@id&#x27;</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;attemptid = &#x27;</span> + <span class="hljs-built_in">str</span>(atnum))<br><br>        <span class="hljs-comment"># 提交本次测试</span><br>        submit_url = <span class="hljs-string">&#x27;https://wlkc.ouc.edu.cn/webapps/assessment/do/take/saveAttempt?saveSequence=17&amp;takePageId=1636771783088&amp;course_assessment_id=_30131_1&amp;course_id=_13492_1&amp;content_id=_633969_1&#x27;</span><br>        data = &#123;<br>            <span class="hljs-string">&#x27;blackboard.platform.security.NonceUtil.nonce.ajax&#x27;</span>: <span class="hljs-string">&#x27;c87385ed-48d7-4d9c-8c8c-a9f6cb45826d&#x27;</span>,<br>            <span class="hljs-string">&#x27;data-submitted&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span>,<br>            <span class="hljs-string">&#x27;course_assessment_id&#x27;</span>: <span class="hljs-string">&#x27;_30131_1&#x27;</span>,<br>            <span class="hljs-string">&#x27;course_id&#x27;</span>: <span class="hljs-string">&#x27;_13492_1&#x27;</span>,<br>            <span class="hljs-string">&#x27;content_id&#x27;</span>: <span class="hljs-string">&#x27;_633969_1&#x27;</span>,<br>            <span class="hljs-string">&#x27;step&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;original_user_id&#x27;</span>: <span class="hljs-string">&#x27;_47406_1&#x27;</span>,<br>            <span class="hljs-string">&#x27;save_and_submit&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span>,<br>            <span class="hljs-string">&#x27;timer_completion&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;fileUploadType&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;toggle_state&#x27;</span>: <span class="hljs-string">&#x27;qShow&#x27;</span>,<br>            <span class="hljs-string">&#x27;current_question&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>            <span class="hljs-string">&#x27;current_attempt_item_id&#x27;</span>: atnum,<br>            <span class="hljs-string">&#x27;current_attempt_item_id_backup&#x27;</span>: atnum,<br>            <span class="hljs-string">&#x27;method&#x27;</span>: <span class="hljs-string">&#x27;notajax&#x27;</span>,<br>            <span class="hljs-string">&#x27;saveonequestion&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        &#125;<br>        submit = session.post(url=submit_url, headers=headers, data=data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;post finished! times: &#x27;</span>+ <span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>))<br>        time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;attempt over!&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------------&#x27;</span>)<br><br>    <span class="hljs-comment"># 总尝试页面</span><br>    total_url = <span class="hljs-string">&#x27;https://wlkc.ouc.edu.cn/webapps/gradebook/do/student/viewAttempts?method=list&amp;course_id=_13492_1&amp;outcome_definition_id=_95191_1&amp;outcome_id=_2069239_1&#x27;</span><br>    page_text_tot = session.get(url=total_url, headers=headers)<br>    tree_tot = etree.HTML(page_text_tot.text)<br>    attempt_list = tree_tot.xpath(<span class="hljs-string">&#x27;//div[@class=&quot; columnStep clearfix&quot;]//a/@href&#x27;</span>)<br><br>    <span class="hljs-comment"># 为了去重使用字典保存键值对</span><br>    danxuan = &#123;&#125;<br>    duoxuan = &#123;&#125;<br>    panduan = &#123;&#125;<br>    cnt1 = <span class="hljs-number">0</span><br>    cnt2 = <span class="hljs-number">0</span><br>    cnt3 = <span class="hljs-number">0</span><br><br>    fp1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./maogai/Round_2/单选.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    fp2 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./maogai/Round_2/多选.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    fp3 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./maogai/Round_2/判断.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>    times = <span class="hljs-number">0</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;download started...&#x27;</span>)<br>    <span class="hljs-keyword">for</span> attempt <span class="hljs-keyword">in</span> attempt_list:<br>        times = times + <span class="hljs-number">1</span><br>        new_url = detail_url + attempt<br>        <span class="hljs-comment"># print(new_url)</span><br>        page_text = session.get(url=new_url, headers=headers)<br>        tree = etree.HTML(page_text.text)<br>        pro_list = tree.xpath(<span class="hljs-string">&#x27;//ul[@id=&quot;content_listContainer&quot;]/li&#x27;</span>)<br><br>        cnt = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 每次尝试的内容进行爬取</span><br>        <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> pro_list:<br>            cnt = cnt + <span class="hljs-number">1</span><br>            pro_name = li.xpath(<span class="hljs-string">&#x27;normalize-space(.//div[@class=&quot;vtbegenerated inlineVtbegenerated&quot;])&#x27;</span>)<br>            pro_answer_1 = li.xpath(<span class="hljs-string">&#x27;.//div[@class=&quot;vtbegenerated inlineVtbegenerated&quot;]//label/text()&#x27;</span>)<br>            pro_answer_1 = <span class="hljs-built_in">str</span>(pro_answer_1)<br>            pro_answer_2 = li.xpath(<span class="hljs-string">&#x27;normalize-space(.//span[@class=&quot;answerTextSpan&quot;])&#x27;</span>)<br><br>            <span class="hljs-keyword">if</span> cnt &lt;= <span class="hljs-number">5</span>:<br>                <span class="hljs-keyword">if</span> pro_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> danxuan:<br>                    cnt1 = cnt1 + <span class="hljs-number">1</span><br>                    danxuan[pro_name] = pro_answer_1<br>                    <span class="hljs-comment"># fp1.write(str(cnt1) + &#x27;. &#x27; + pro_name+&#x27;\n&#x27;+pro_answer_1+&#x27;\n&#x27;)</span><br>            <span class="hljs-keyword">elif</span> cnt &lt;= <span class="hljs-number">10</span>:<br>                <span class="hljs-keyword">if</span> pro_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> duoxuan:<br>                    cnt2 = cnt2 + <span class="hljs-number">1</span><br>                    duoxuan[pro_name] = pro_answer_1<br>                    <span class="hljs-comment"># fp2.write(str(cnt2) + &#x27;. &#x27; + pro_name + &#x27;\n&#x27; +pro_answer_1+&#x27;\n&#x27;)</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> pro_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> panduan:<br>                    cnt3 = cnt3 +<span class="hljs-number">1</span><br>                    panduan[pro_name] = pro_answer_2<br>                    <span class="hljs-comment"># fp3.write(str(cnt3) + &#x27;. &#x27; + pro_name + &#x27;\n&#x27;+pro_answer_2+&#x27;\n&#x27;)</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;times: &#x27;</span> + <span class="hljs-built_in">str</span>(times) + <span class="hljs-string">&#x27; 单选: &#x27;</span> + <span class="hljs-built_in">str</span>(cnt1) + <span class="hljs-string">&#x27;,多选：&#x27;</span> + <span class="hljs-built_in">str</span>(cnt2) + <span class="hljs-string">&#x27;,判断: &#x27;</span> + <span class="hljs-built_in">str</span>(cnt3) )<br><br>    <span class="hljs-comment"># 将字典进行按key排序实现不同章节分类进行存储</span><br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> pro <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(danxuan):<br>        num = num + <span class="hljs-number">1</span><br>        fp1.write(<span class="hljs-built_in">str</span>(num)+<span class="hljs-string">&#x27;. &#x27;</span>+ pro + <span class="hljs-string">&#x27;\n&#x27;</span> + danxuan[pro] + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> pro <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(duoxuan):<br>        num = num + <span class="hljs-number">1</span><br>        fp2.write(<span class="hljs-built_in">str</span>(num)+<span class="hljs-string">&#x27;. &#x27;</span> + pro + <span class="hljs-string">&#x27;\n&#x27;</span> + duoxuan[pro] + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> pro <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(panduan):<br>        num = num + <span class="hljs-number">1</span><br>        fp3.write(<span class="hljs-built_in">str</span>(num)+<span class="hljs-string">&#x27;. &#x27;</span> + pro + <span class="hljs-string">&#x27;\n&#x27;</span> + panduan[pro] + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>    fp1.close()<br>    fp2.close()<br>    fp3.close()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;total: &#x27;</span> + <span class="hljs-built_in">str</span>(cnt1+cnt2+cnt3) + <span class="hljs-string">&#x27; problems have been downloaded.&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>一个小实战，效果还行😅，以后会想办法修改自动登录的问题，可以提点意见</p><p>github项目地址 <a href="https://github.com/Maskros-new/THEOL-questions-crawler">link</a>  爬取的题库在文件夹里</p><p>over大火</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>PROJECT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Crawler</tag>
      
      <tag>python</tag>
      
      <tag>requests</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫杂记</title>
    <link href="/2021/11/10/Crawler/"/>
    <url>/2021/11/10/Crawler/</url>
    
    <content type="html"><![CDATA[<h1 id="python爬虫杂记"><a href="#python爬虫杂记" class="headerlink" title="python爬虫杂记"></a>python爬虫杂记</h1><p>Crawler in python</p><blockquote><p>又名 《为了偷懒爬毛概题库的突击学习》</p></blockquote><h2 id="一些知识"><a href="#一些知识" class="headerlink" title="一些知识"></a>一些知识</h2><ul><li><p>爬虫在使用场景中的分类：</p><ul><li><p>通用爬虫：抓取系统重要促成部分，抓取的是一整张页面数据</p></li><li><p>聚焦爬虫：是建立在通用爬虫的基础上，抓取的是页面中特定的局部内容</p></li><li><p>增量式爬虫：检测网站中数据更新的情况，只会抓取网站中最新更新出来的数据</p></li></ul></li></ul><ul><li><p>robots.txt协议：君子协议，规定网站中哪些数据能爬哪些不能，约定俗成</p></li><li><p>http &amp; https 协议：</p><blockquote><p>http协议：服务器和客户端进行数据交互的一种形式</p><p>https协议：安全的超文本传输协议 证书秘钥加密</p></blockquote></li><li><p>常用请求头信息：</p><ul><li><p>User-Agent：请求载体的身份标识</p></li><li><p>Connection：请求完毕后，是断开连接还是保持连接</p></li></ul></li></ul><ul><li>常用响应头信息：<ul><li>Content-Type：服务器响应回客户端的数据类型</li></ul></li></ul><h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><blockquote><p>requests: python原生的基于网络请求的模块，模拟浏览器发请求</p><p>.text 字符串   .content 二进制   .json() 对象</p></blockquote><p>编码流程：</p><ul><li>指定url</li><li>发起请求</li><li>获取响应数据</li><li>持久化存储</li></ul><h3 id="0x00-requests-一血"><a href="#0x00-requests-一血" class="headerlink" title="0x00 requests 一血"></a>0x00 requests 一血</h3><blockquote><p><code>response.text</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 1.指定url</span><br>url=<span class="hljs-string">&#x27;xxxx/xxx/xxx.xxx&#x27;</span><br><span class="hljs-comment"># 2.发起请求 get方法会返回一个响应对象</span><br>response = requests.get(url=url)<br><span class="hljs-comment"># 3.获取响应数据 .text返回的是字符串形式的响应数据</span><br>page_text = response.text<br><span class="hljs-built_in">print</span>(page_text)<br><span class="hljs-comment"># 4.持久化存储</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./xxx.html&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(page_text)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over!&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="0x01-网页采集器"><a href="#0x01-网页采集器" class="headerlink" title="0x01 网页采集器"></a>0x01 网页采集器</h3><ul><li>UA检测 </li><li>UA伪装</li></ul><blockquote><p><code>requests.get(url, params, headers)</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># UA：User-Agent 请求载体的身份标识</span><br><span class="hljs-comment"># UA检测：门户网站的服务器会检测对应请求的载体身份标识，如果检测到的标识为基于某一款浏览器的，</span><br><span class="hljs-comment"># 则说明是正常请求，反之服务端就可能拒绝这次请求</span><br><br><span class="hljs-comment"># UA伪装：让爬虫对应的请求载体身份标识伪装成某一款浏览器</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># UA伪装：将对应的User-Agent封装到一个字典中</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span><br>    &#125;<br>    url = <span class="hljs-string">&#x27;https://www.sogou.com/web&#x27;</span><br>    <span class="hljs-comment"># 处理url携带的参数：封装到字典中</span><br>    kw = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;enter a word:&#x27;</span>)<br>    param = &#123;<br>        <span class="hljs-string">&#x27;query&#x27;</span>: kw<br>    &#125;<br>    <span class="hljs-comment"># 对指定url发起的请求对应url是携带参数的，并且请求过程中处理了参数</span><br>    response = requests.get(url=url, params=param, headers=headers)<br><br>    page_text = response.text<br>    fileName = <span class="hljs-string">&#x27;./requests_test/test2/&#x27;</span>+kw+<span class="hljs-string">&#x27;.html&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(fileName, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        fp.write(page_text)<br>    <span class="hljs-built_in">print</span>(fileName, <span class="hljs-string">&#x27; is saved&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="0x02-百度翻译"><a href="#0x02-百度翻译" class="headerlink" title="0x02 百度翻译"></a>0x02 百度翻译</h3><ul><li>post请求 (携带了参数)  </li><li>ajax</li><li>响应数据是一组json数据</li></ul><blockquote><p><code>requests.post(url, data, json, headers...)</code></p><p><code>response.json</code>()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 1.指定url</span><br>    post_url = <span class="hljs-string">&#x27;https://fanyi.baidu.com/sug&#x27;</span><br>    <span class="hljs-comment"># 2.进行UA伪装</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span><br>    &#125;<br>    <span class="hljs-comment"># 3.post请求参数处理(同get请求一致)</span><br>    word = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;enter a word&#x27;</span>)<br>    data = &#123;<br>        <span class="hljs-string">&#x27;kw&#x27;</span>: word<br>    &#125;<br>    <span class="hljs-comment"># 4.请求发送</span><br>    response = requests.post(url=post_url, data=data, headers=headers)<br>    <span class="hljs-comment"># 5.获取响应数据:json()方法返回的是obj(如果确认响应数据是json类型才能使用)</span><br>    dic_obj=response.json()<br>    <span class="hljs-built_in">print</span>(dic_obj)<br>    <span class="hljs-comment"># 6.持久化存储</span><br>    fileName = <span class="hljs-string">&#x27;./requests_test/test3/&#x27;</span>+word+<span class="hljs-string">&#x27;.json&#x27;</span><br>    fp = <span class="hljs-built_in">open</span>(fileName,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-comment"># 由于中文不能用ascii编码，所以令ensure_ascii=False</span><br>    json.dump(dic_obj,fp=fp,ensure_ascii=<span class="hljs-literal">False</span>) <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over!&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="0x03-豆瓣电影"><a href="#0x03-豆瓣电影" class="headerlink" title="0x03 豆瓣电影"></a>0x03 豆瓣电影</h3><blockquote><p>request.get</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url = <span class="hljs-string">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span><br>    param = &#123;<br>        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;24&#x27;</span>,    <br>        <span class="hljs-string">&#x27;interval_id&#x27;</span>: <span class="hljs-string">&#x27;100:90&#x27;</span>,<br>        <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-string">&#x27;40&#x27;</span>,  <span class="hljs-comment"># 从库中的第几部电影去取</span><br>        <span class="hljs-string">&#x27;limit&#x27;</span>: <span class="hljs-string">&#x27;20&#x27;</span>,  <span class="hljs-comment"># 一次从库中取出的个数</span><br>    &#125;<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span><br>    &#125;<br>    response = requests.get(url=url, params=param, headers=headers) <br>    list_data = response.json()<br>    <span class="hljs-comment"># print(list_data)</span><br>    fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./requests_test/test4/douban.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    json.dump(list_data, fp=fp, ensure_ascii=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over!&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="0x04-综合案例-数据提取"><a href="#0x04-综合案例-数据提取" class="headerlink" title="0x04 综合案例-数据提取"></a>0x04 综合案例-数据提取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span><br>    &#125;<br>    id_list = []  <span class="hljs-comment"># 存储企业id</span><br>    all_data_list = []  <span class="hljs-comment"># 存储所有的企业详情数据</span><br><br>    <span class="hljs-comment"># 批量获取不同企业的id值</span><br>    url = <span class="hljs-string">&#x27;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span><br>    <span class="hljs-comment"># 参数的封装</span><br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>):<br>        page=<span class="hljs-built_in">str</span>(page)<br>        data = &#123;<br>            <span class="hljs-string">&#x27;on&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span>,<br>            <span class="hljs-string">&#x27;page&#x27;</span>: page,<br>            <span class="hljs-string">&#x27;pagesize&#x27;</span>: <span class="hljs-string">&#x27;15&#x27;</span>,<br>            <span class="hljs-string">&#x27;productName&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;conditionType&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>            <span class="hljs-string">&#x27;applyname&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;applysn&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        &#125;<br>        json_ids = requests.post(url=url, headers=headers, data=data).json()<br>        <span class="hljs-keyword">for</span> dic <span class="hljs-keyword">in</span> json_ids[<span class="hljs-string">&#x27;list&#x27;</span>]:<br>            id_list.append(dic[<span class="hljs-string">&#x27;ID&#x27;</span>])<br><br>    <span class="hljs-comment"># 获取企业详细数据</span><br>    post_url = <span class="hljs-string">&#x27;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> id_list:<br>        data = &#123;<br>            <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-built_in">id</span><br>        &#125;<br>        detail_json = requests.post(<br>            url=post_url, headers=headers, data=data).json()<br>        <span class="hljs-built_in">print</span>(detail1_json, <span class="hljs-string">&#x27;--------ending--------&#x27;</span>)<br>        all_data_list.append(detail_json)<br>    <span class="hljs-comment"># 持久化存储all_data_list</span><br>    fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./requests_test/test5/allData.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    json.dump(all_data_list, fp=fp, ensure_ascii=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over!&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><blockquote><p>聚焦爬虫：爬取页面中指定的页面内容</p></blockquote><p>编码流程：</p><ul><li>指定url</li><li>发起请求</li><li>获取响应数据</li><li><strong>数据解析</strong></li><li>持久化存储</li></ul><p>数据解析分类：正则，bs4，<strong>xpath</strong></p><p>数据解析原理概述：</p><blockquote><p>解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储</p></blockquote><ol><li>进行指定标签的定位</li><li>标签或者标签对应的属性中存储的数据值进行提取 (解析)</li></ol><h3 id="0x00-图片"><a href="#0x00-图片" class="headerlink" title="0x00 图片"></a>0x00 图片</h3><blockquote><p>.content 返回二进制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 如何爬取图片数据</span><br>    url = <span class="hljs-string">&#x27;https://i2.hdslb.com/bfs/archive/237001f0163eb48c1745a906c5b480f449183d66.jpg@672w_378h_1c_100q.webp&#x27;</span><br>    <span class="hljs-comment"># content 返回的是二进制形式图片数据</span><br>    img_data = requests.get(url=url).content<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./data_parse_test/test1/dsm.jpg&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        fp.write(img_data)    <br><br></code></pre></td></tr></table></figure><h3 id="0x01-正则解析"><a href="#0x01-正则解析" class="headerlink" title="0x01 正则解析"></a>0x01 正则解析</h3><blockquote><p>需要导入re模块</p></blockquote><p>常用正则表达式</p><p><img src="https://i.bmp.ovh/imgs/2021/11/022868b8a1cd24f4.png" alt="img"></p><p>ex:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/dsadas/sdada&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//sdadasd/dsadas/dasdas&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;sdada&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>ex=&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>.*?<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;(.*?)&quot;</span> <span class="hljs-attr">alt</span> <span class="hljs-attr">.</span>*?&lt;/<span class="hljs-attr">div</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure><p><strong>练习：图片分页爬取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 需求：爬取所有图片</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">#创建文件夹，保存所有图片</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;./data_parse_test/test1&#x27;</span>):<br>        os.mkdir(<span class="hljs-string">&#x27;./data_parse_test/test1/&#x27;</span>)<br>    <span class="hljs-comment">#设置一个通用url模板</span><br>    url = <span class="hljs-string">&#x27;https://www.qiushibaike.com/pic/page/%d/?s=5184961&#x27;</span><br>    <span class="hljs-keyword">for</span> pageNum <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">36</span>):<br>        <span class="hljs-comment">#对应页码的url</span><br>        new_url = <span class="hljs-built_in">format</span>(url%pageNum)<br>        <span class="hljs-comment"># 使用通用爬虫对url对应的一整张页面进行爬取</span><br>        page_text = requests.get(url=url, headers=headers).text<br><br>        <span class="hljs-comment"># 使用聚焦爬虫将页面中所有漫画进行解析/提取</span><br>        ex = <span class="hljs-string">&#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&lt;/div&gt; &#x27;</span><br>        img_src_list = re.findall(ex, page_text, re.S)<br>        <span class="hljs-comment"># print(img_src_list)</span><br>        <span class="hljs-keyword">for</span> src <span class="hljs-keyword">in</span> img_src_list:<br>            <span class="hljs-comment">#拼接出一个完整的图片url</span><br>            src=<span class="hljs-string">&#x27;https:&#x27;</span>+src<br>            <span class="hljs-comment">#请求到了图片的二进制数据</span><br>            img_data=requests.get(url=src,headers=headers).content<br>            <span class="hljs-comment">#生成图片名称</span><br>            img_name=src.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>            <span class="hljs-comment">#图片存储的路径</span><br>            imgPath=<span class="hljs-string">&#x27;./data_parse_test/test1/&#x27;</span>+img_name<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(imgPath,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>                fp.write(img_data)<br>                <span class="hljs-built_in">print</span>(img_name,<span class="hljs-string">&#x27;下载成功！&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="0x02-bs4解析"><a href="#0x02-bs4解析" class="headerlink" title="0x02 bs4解析"></a>0x02 bs4解析</h3><blockquote><p>所需模块：bs4 lxml</p></blockquote><p>数据解析的原理：</p><ol><li>标签定位</li><li>提取标签、标签属性中存储的数据值</li></ol><p>bs4数据解析的原理：</p><ol><li>实例化一个BeautifulSoup对象，并且将页面源码数据加载到该对象中</li><li>通过调用BeautifulSoup对象中相关的属性或者方法进行标签定位和数据提取</li></ol><p>如何实例化Beautiful对象：</p><blockquote><p><code>from bs4 import BeautifulSoup</code></p></blockquote><ul><li><p>对象的实例化：将本地/互联网上获取的页面源码加载到该对象中</p><p><code>soup=BeautifulSoap(page_text.content,&#39;lxml&#39;)</code></p></li></ul><p>提供的用于数据解析的方法和属性：</p><ul><li><p><code>soup.tagName</code> 对应html标签 返回的是html中第一次出现的tagName标签</p></li><li><p><code>soup.find()</code> :</p><ul><li><code>soup.find(&#39;tagName&#39;)</code> 同 <code>soup.tagName</code></li><li>属性定位：<code>soup.find(&#39;tagName&#39;,class_=&#39;xxx&#39;)</code> (class要带下划线)</li><li><code>soup.find_all(&#39;tagName&#39;)</code> 返回所有的标签(列表)</li></ul></li><li><p><code>soup.select()</code></p><ul><li><p><code>soup.select(&#39;某种选择器(id,class,标签...)&#39;)</code>，返回的是一个<strong>列表</strong></p><blockquote><p><code>#id</code>, <code>tag</code>, <code>.class</code></p></blockquote></li><li><p>层级选择器：</p><ul><li><code>soup.select(&#39;.class1 &gt; ul &gt; li &gt; a&#39;)[2]</code>  表示 class1 下的 ul 标签下的 li 标签中的第二个 a 标签。 <code>&gt;</code> 表示一个层级关系</li><li><code>soup.select(&#39;.class1 &gt; ul a&#39;)[2]</code> 表示同上，空格表示的是多个层级关系</li></ul></li></ul></li><li><p>获取标签之间的文本数据</p><ul><li><code>soup.a.text/string/get_text()</code><ul><li><code>.text/.get_text()</code> 可以获得某一个标签中所有的文本内容</li><li><code>.string</code> 只可以获取改标签下面直系的文本内容</li></ul></li></ul></li><li><p>获取标签中属性值</p><ul><li><code>soup.a[&#39;href&#39;]</code></li></ul></li></ul><p><strong>练习：小说章节名和内容爬取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> lxml<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment"># 需求：爬取小说的所有章节标题和内容</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;./data_parse_test/test2&#x27;</span>):<br>        os.mkdir(<span class="hljs-string">&#x27;./data_parse_test/test2/&#x27;</span>)<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span><br>    &#125;<br>    <span class="hljs-comment"># 对首页的页面进行爬取</span><br>    url = <span class="hljs-string">&#x27;http://www.banzhu22.org/5_5853/&#x27;</span><br>    page_text = requests.get(url=url, headers=headers)<br><br>    <span class="hljs-comment"># 在首页中解析出章节的标题和详情页的url</span><br>    <span class="hljs-comment"># 1. 实例化BeautifulSoup对象，将网页源码加载到对象中</span><br>    soup = BeautifulSoup(page_text.content, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    dd_list = soup.select(<span class="hljs-string">&#x27;.box_con &gt; #list dd&#x27;</span>)[<span class="hljs-number">9</span>:]<br><br>    fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./data_parse_test/test2/49gifts.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">for</span> dd <span class="hljs-keyword">in</span> dd_list:<br>        title = dd.a.string<br>        detail_url = <span class="hljs-string">&#x27;http://www.banzhu22.org&#x27;</span> + dd.a[<span class="hljs-string">&#x27;href&#x27;</span>]<br>        <span class="hljs-comment"># 对详情页发起请求，解析出章节内容</span><br>        detail_page_text = requests.get(url=detail_url, headers=headers)<br>        <span class="hljs-comment"># 解析出详情页中相关章节的内容</span><br>        detail_soup = BeautifulSoup(detail_page_text.content, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>        div_tag = detail_soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;content&#x27;</span>)<br>        <span class="hljs-comment"># 解析到章内容</span><br>        content = div_tag.text<br>        fp.write(title+<span class="hljs-string">&#x27;\n&#x27;</span>+content+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(title+<span class="hljs-string">&#x27;downloaded successfully!&#x27;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over!&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="0x03-xpath解析"><a href="#0x03-xpath解析" class="headerlink" title="0x03 xpath解析"></a>0x03 xpath解析</h3><blockquote><p>是最常用且最便捷高效的爬取方式，通用性最强</p><p>所需模块：lxml</p></blockquote><p>xpath解析原理：</p><ol><li>实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中</li><li>调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获</li></ol><p>如何实例化etree对象：</p><blockquote><p><code>from lxml import etree</code></p></blockquote><ul><li><p>本地源码：<code>etree.parse(filePath)</code></p></li><li><p>互联网源码：<code>etree.HTML(&#39;page_text&#39;)</code></p></li><li><p><code>xpath(&#39;xpath表达式&#39;)</code></p></li></ul><p>xpath表达式：</p><blockquote><p>各表达式可以用 <code>|</code> 连接</p></blockquote><ul><li><p><code>/</code>：表示的是一个层级，从根节点开始定位</p></li><li><p>开头<code>./</code>：定位了层级后，当前层级下的层级</p></li><li><p><code>//</code>：表示的是多个层级，可以从任意位置开始定位</p></li><li><p>属性定位：<code>//div[@class=&quot;xxx&quot;]</code> 即 <code>tag[@attrName=&quot;attrValue&quot;]</code></p></li><li><p>索引定位：<code>//div[@class=&quot;xxx&quot;]/p[3]</code> 索引是从1开始的</p></li><li><p>取文本：</p><ul><li><code>/text()</code> 标签下直系的文本内容</li><li><code>//text()</code> 标签下所有的文本内容</li></ul></li><li><p>取属性：<code>/@attrName</code></p></li><li><p>通用处理中文乱码的解决方案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name = name.encode(<span class="hljs-string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="hljs-string">&#x27;gbk&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><p><strong>练习略</strong></p><h2 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h2><p>反爬机制：验证码</p><p>识别验证码的操作：</p><ul><li>第三方自动识别：<a href="http://www.yundama.com/demo.html">云打码</a> </li></ul><p>to be added….</p><h2 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h2><p>需求：对校园网进行登陆 (无验证码)</p><ul><li>点击登陆按钮后会发起一个POST请求，POST请求中会携带登录信息(username,pwd)</li><li><code>print(response.status_code)</code> 打印响应状态码，如果打印200则证明模拟登陆成功</li></ul><p>需求：爬取当前用户的相关信息</p><p>http/https协议特性：无状态</p><p>没有请求到对应页面数据的原因：发起的第二次基于页面的请求时，服务器端不知道此次请求是基于登录状态下的请求</p><p>cookie：用来让服务端记录客户端的相关状态</p><ul><li>cookie值的来源是哪里：模拟登陆post请求后，有服务器端创建</li><li>session会话对象：<ul><li>可以进行请求的发送</li><li>如果请求过程中产生了cookie，则cookie会被自动存储/携带在该session对象中</li></ul></li></ul><p>步骤：</p><ol><li>创建一个session对象： <code>session = requests.Session()</code></li><li>使用session对象进行模拟登录post请求的发送 (cookie就会被存储在session中)</li><li>session对象再对登录后页面对应的get请求进行发送 (携带了cookie)</li></ol><h2 id="selenium工具"><a href="#selenium工具" class="headerlink" title="selenium工具"></a>selenium工具</h2><blockquote><p>解决requests无法执行javaScript代码的问题</p></blockquote><ul><li><p>用于web应用程序自动化测试的工具，直接运行在浏览器当中，支持chrome、firefox等主流浏览器。可以通过代码控制与页面上元素进行交互（点击、输入等），也可以获取指定元素的内容</p></li><li><p>缺点： 效率低，速度慢</p></li></ul><blockquote><p>to be added … </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Crawler</tag>
      
      <tag>note</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021CCPC女生专场vp</title>
    <link href="/2021/11/08/2021ccpc_girl/"/>
    <url>/2021/11/08/2021ccpc_girl/</url>
    
    <content type="html"><![CDATA[<h1 id="2021CCPC女生专场"><a href="#2021CCPC女生专场" class="headerlink" title="2021CCPC女生专场"></a>2021CCPC女生专场</h1><blockquote><p>“假如我是女生”</p></blockquote><h2 id="A-公交线路"><a href="#A-公交线路" class="headerlink" title="A_公交线路"></a>A_公交线路</h2><blockquote><p>水题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n,x,y; cin&gt;&gt;n&gt;&gt;x&gt;&gt;y;<br>    <span class="hljs-keyword">int</span> k[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>) cin&gt;&gt;k[i];<br>    <span class="hljs-keyword">int</span> m; cin&gt;&gt;m;<br>    <span class="hljs-keyword">int</span> p[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>) cin&gt;&gt;p[i];<br>    <span class="hljs-keyword">int</span> lpos=x<span class="hljs-number">-1</span>,rpos=x+<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k[lpos]!=p[i])&#123;<br>            <span class="hljs-keyword">if</span>(y&lt;x) &#123;cout&lt;&lt;<span class="hljs-string">&quot;Wrong&quot;</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>;&#125;<br>            <span class="hljs-keyword">else</span> &#123;cout&lt;&lt;<span class="hljs-string">&quot;Right&quot;</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(k[rpos]!=p[i])&#123;<br>            <span class="hljs-keyword">if</span>(x&lt;y) &#123;cout&lt;&lt;<span class="hljs-string">&quot;Wrong&quot;</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>;&#125;<br>            <span class="hljs-keyword">else</span> &#123;cout&lt;&lt;<span class="hljs-string">&quot;Right&quot;</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>;&#125;<br>        &#125;<br>        lpos--; rpos++;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Unsure&quot;</span>&lt;&lt;endl;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D-修建道路"><a href="#D-修建道路" class="headerlink" title="D_修建道路"></a>D_修建道路</h2><blockquote><p>沙比题，两两取最大值即可，脂环王写了一发线段树优化递归我不是很认可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, n) &#123;<br>        cin &gt;&gt; a[i];<br>        <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>) ans+=<span class="hljs-built_in">max</span>(a[i],a[i<span class="hljs-number">-1</span>]);<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="G-3G网络"><a href="#G-3G网络" class="headerlink" title="G_3G网络"></a>G_3G网络</h2><blockquote><p>输出1/n即可 我搞错了double 结果wa在精度上了 最后手写了个除法</p><p>结果发现 printf(“%.16lf”,ans) 即可，少写个小数点😅</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n; cin&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> x,y;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n)&#123;<br>        cin&gt;&gt;x&gt;&gt;y;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans[<span class="hljs-number">15</span>];  <br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,<span class="hljs-number">12</span>)&#123;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) &#123;ans[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>; tmp=<span class="hljs-number">0</span>;&#125;<br>            <span class="hljs-keyword">else</span> &#123;ans[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>; tmp*=<span class="hljs-number">10</span>;&#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            ans[i]=tmp/n;<br>            tmp=tmp%n;<br>            tmp*=<span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-string">&quot;.&quot;</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,<span class="hljs-number">12</span>)&#123;<br>        cout&lt;&lt;ans[i];<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// ans=1.0/n</span><br><span class="hljs-comment">// printf(&quot;%.16lf&quot;,ans);</span><br></code></pre></td></tr></table></figure><h2 id="I-驾驶卡丁车"><a href="#I-驾驶卡丁车" class="headerlink" title="I_驾驶卡丁车"></a>I_驾驶卡丁车</h2><blockquote><p>楞模拟就行，八个方向 <code>dis[8][2]</code> 直接做掉啊做掉</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">char</span> mp[<span class="hljs-number">55</span>][<span class="hljs-number">55</span>];<br><span class="hljs-keyword">int</span> dis[<span class="hljs-number">8</span>][<span class="hljs-number">2</span>] = &#123;<br>    &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;&#125;;<br><span class="hljs-keyword">int</span> n, m, x, y, v, face;<br><span class="hljs-keyword">bool</span> crsh=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">0</span> || x &gt; n || y &lt;= <span class="hljs-number">0</span> || y &gt; m)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (mp[x][y] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">0</span>, v) &#123;<br>        <span class="hljs-keyword">if</span> (dis[face][<span class="hljs-number">0</span>] != <span class="hljs-number">0</span> &amp;&amp; dis[face][<span class="hljs-number">1</span>] != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">check</span>(x + dis[face][<span class="hljs-number">0</span>], y) &amp;&amp; !<span class="hljs-built_in">check</span>(x, y + dis[face][<span class="hljs-number">1</span>])) &#123;<br>                crsh = <span class="hljs-literal">true</span>;<br>                v = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(x + dis[face][<span class="hljs-number">0</span>], y + dis[face][<span class="hljs-number">1</span>])) &#123;<br>            x += dis[face][<span class="hljs-number">0</span>];<br>            y += dis[face][<span class="hljs-number">1</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            crsh = <span class="hljs-literal">true</span>;<br>            v = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    v=<span class="hljs-number">0</span>, face=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>) &#123;<br>            cin &gt;&gt; mp[i][j];<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>                x = i, y = j;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> opcnt;<br>    cin &gt;&gt; opcnt;<br>    <span class="hljs-keyword">char</span> op;<br>    crsh = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, opcnt) &#123;<br>        cin &gt;&gt; op;<br>        crsh = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;L&#x27;</span>) &#123;<br>            face++;<br>            <span class="hljs-keyword">if</span> (face &gt; <span class="hljs-number">7</span>) &#123;<br>                face = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-built_in">go</span>();<br>        &#125;<br>        <span class="hljs-built_in">eif</span>(op == <span class="hljs-string">&#x27;R&#x27;</span>) &#123;<br>            face--;<br>            <span class="hljs-keyword">if</span> (face &lt; <span class="hljs-number">0</span>) &#123;<br>                face = <span class="hljs-number">7</span>;<br>            &#125;<br>            <span class="hljs-built_in">go</span>();<br>        &#125;<br>        <span class="hljs-built_in">eif</span>(op == <span class="hljs-string">&#x27;U&#x27;</span>) &#123;<br>            v++;<br>            <span class="hljs-built_in">go</span>();<br>        &#125;<br>        <span class="hljs-built_in">eif</span>(op == <span class="hljs-string">&#x27;D&#x27;</span>) &#123;<br>            v = <span class="hljs-built_in">max</span>(v - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">go</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (crsh)<br>            cout &lt;&lt; <span class="hljs-string">&quot;Crash! &quot;</span>;<br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="K-音乐游戏"><a href="#K-音乐游戏" class="headerlink" title="K_音乐游戏"></a>K_音乐游戏</h2><blockquote><p>沙比题</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n; cin&gt;&gt;n;<br>    string s;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">getline</span>(cin,s);<br>        <span class="hljs-built_in">rep</span>(j,<span class="hljs-number">0</span>,s.<span class="hljs-built_in">length</span>())&#123;<br>            <span class="hljs-keyword">if</span> (s[j] == <span class="hljs-string">&#x27;-&#x27;</span>)<br>                cnt++;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;cnt;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：再次化身签到皇帝，还在想B题的字符串，请把“今天想出来B了吗”打在评论区😘</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SOLUTIONS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solutions</tag>
      
      <tag>CCPC</tag>
      
      <tag>ACM</tag>
      
      <tag>思维</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 752 (Div.2)</title>
    <link href="/2021/10/31/cf%20752/"/>
    <url>/2021/10/31/cf%20752/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Round-752-Div-2"><a href="#Codeforces-Round-752-Div-2" class="headerlink" title="Codeforces Round #752 (Div.2)"></a>Codeforces Round #752 (Div.2)</h1><h2 id="A-Era"><a href="#A-Era" class="headerlink" title="A_Era"></a>A_Era</h2><blockquote><p>水题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>) &#123;<br>        cin &gt;&gt; t;<br>        <span class="hljs-keyword">if</span> (t &gt; pos) &#123;<br>            ans += t - pos;<br>            pos += t - pos;<br>        &#125;<br>        pos++;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B-XOR-Specia-LIS-t"><a href="#B-XOR-Specia-LIS-t" class="headerlink" title="B_XOR_Specia_LIS_t"></a>B_XOR_Specia_LIS_t</h2><blockquote><p>题意：</p><p>沙比题，如果序列所分成的若干子序列中，最长的任意递增序列(不需要连续)的长度相异或，可以为0则输出 yes 否则输出 no</p><p>思路：</p><p>没说咋分，就一个一个分，所以就是 1^1^1^… ，根据序列长度的奇偶性判断一下即可，偶数一定yes，奇数就判断是不是单增序列，不是的话一定yes，反之no</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n; cin&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> tmp;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n)&#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">bool</span> is=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]&lt;=a[i<span class="hljs-number">-1</span>])&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>                is=<span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!is) cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C-Di-visible-Confusion"><a href="#C-Di-visible-Confusion" class="headerlink" title="C_Di_visible_Confusion"></a>C_Di_visible_Confusion</h2><blockquote><p>题意：</p><p>一个序列，可以对a[i]进行删除操作的前提是 <code>a[i]%(i+1)!=0</code>，问这个序列能不能被删干净</p><p>思路：</p><p>暴力即可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n; cin&gt;&gt;n;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">bool</span> flag=<span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)&#123;<br>        flag=<span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">rep</span>(j,<span class="hljs-number">2</span>,i+<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]%j!=<span class="hljs-number">0</span>)&#123;<br>                flag=<span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!flag)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="D-Vupsen-Pupsen-and-0"><a href="#D-Vupsen-Pupsen-and-0" class="headerlink" title="D_Vupsen_Pupsen_and_0"></a>D_Vupsen_Pupsen_and_0</h2><blockquote><p>题意：</p><p>输入x,y 两个偶数，找出 n，使得 <code>n%x=y%n</code></p><p>思路：</p><p>分类讨论即可：</p><ul><li><code>x&gt;y</code> 时，<code>n=x+y</code></li><li><code>x&lt;y</code> 时，<code>n=y-(y%x)/2</code></li><li>考虑特例</li></ul><p>思考不出来的时候画数轴可以给你灵感</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x, y;<br>    cin &gt;&gt; x &gt;&gt; y;<br>    <span class="hljs-keyword">if</span> (x == y) &#123;<br>        cout &lt;&lt; x &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; y) &#123;<br>        cout &lt;&lt; x + y &lt;&lt; endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (y % x == <span class="hljs-number">0</span>) &#123;<br>            cout &lt;&lt; x &lt;&lt; endl;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; y - (y % x) / <span class="hljs-number">2</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SOLUTIONS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solutions</tag>
      
      <tag>ACM</tag>
      
      <tag>思维</tag>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Educational Codeforces Round 116 (Div.2)</title>
    <link href="/2021/10/30/cf%20Edu%20116/"/>
    <url>/2021/10/30/cf%20Edu%20116/</url>
    
    <content type="html"><![CDATA[<h1 id="Educational-Codeforces-Round-116-Rated-for-Div-2"><a href="#Educational-Codeforces-Round-116-Rated-for-Div-2" class="headerlink" title="Educational Codeforces Round 116 (Rated for Div. 2)"></a>Educational Codeforces Round 116 (Rated for Div. 2)</h1><h2 id="A-AB-Balance"><a href="#A-AB-Balance" class="headerlink" title="A_AB_Balance"></a>A_AB_Balance</h2><blockquote><p>题意：</p><p>由ab构成的串，做最少操作使ab和ba出现的次数相同</p><p>思路：</p><p>如果出现次数不同，最多差1，修改首位即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-keyword">int</span> l = s.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">int</span> ab = <span class="hljs-number">0</span>, ba = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, l) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;a&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;b&#x27;</span>)<br>                ab++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;b&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;a&#x27;</span>)<br>                ba++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ab == ba)<br>        cout &lt;&lt; s &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (ab &gt; ba) &#123;<br>            <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;a&#x27;</span>)<br>                s[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;b&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;b&#x27;</span>)<br>                s[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br>        &#125;<br>        cout &lt;&lt; s &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="B-Update-Files"><a href="#B-Update-Files" class="headerlink" title="B_Update_Files"></a>B_Update_Files</h2><blockquote><p>水题</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">ll <span class="hljs-title">quickpow</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    ll res = a;<br>    <span class="hljs-keyword">while</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * res;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        res = res * res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    ll n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">int</span> need = <span class="hljs-number">0</span>;<br>        ll tmp = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">65</span>) &#123;<br>            tmp = <span class="hljs-built_in">quickpow</span>(<span class="hljs-number">2</span>, i);<br>            <span class="hljs-keyword">if</span> (tmp &gt;= k || tmp &gt;= n) &#123;<br>                need = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (tmp &gt;= n)<br>            cout &lt;&lt; need &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> &#123;<br>            ll times = need;<br>            <span class="hljs-keyword">if</span> ((n - tmp) % k &gt; <span class="hljs-number">0</span>) &#123;<br>                times += (n - tmp) / k + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                times += (n - tmp) / k;<br>            &#125;<br>            cout &lt;&lt; times &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="C-Banknotes"><a href="#C-Banknotes" class="headerlink" title="C_Banknotes"></a>C_Banknotes</h2><blockquote><p>题意：</p><p>给定n,k, n代表纸币种类，k代表最多可用纸币数量，接下来给出a[0…n-1]， 顺序由小到大，表示每张纸币的面值为 10^a[i]，求不能表示出的金额的最小值</p><p>思路：</p><p>贪心，按10进制从低位到高位取，能取够低位就是 <strong>a[i+1]-1</strong> 的形式，即为 <strong>x999…</strong> , 如果a[i]取不到a[i+1] 或者 没有更大面值的钞票，答案即为 <strong>a[i] * 剩余张数 + a[i]-1</strong> , 能取到就接着找a[i+1]。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ll a[<span class="hljs-number">20</span>];<br><span class="hljs-function">ll <span class="hljs-title">quickpow</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    ll res = a;<br>    <span class="hljs-keyword">while</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * res;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        res = res * res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    ll n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, n) &#123;<br>        cin &gt;&gt; a[i];<br>        a[i] = <span class="hljs-built_in">quickpow</span>(<span class="hljs-number">10</span>, a[i]);<br>    &#125;<br>    a[n] = <span class="hljs-number">0</span>;<br>    ll ans = <span class="hljs-number">0</span>;<br>    ll tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, n) &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>                cout &lt;&lt; k + <span class="hljs-number">1</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (a[i] * k + <span class="hljs-number">1</span> &lt; a[i + <span class="hljs-number">1</span>]) &#123;<br>                cout &lt;&lt; a[i] * k + <span class="hljs-number">1</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tmp += a[i + <span class="hljs-number">1</span>] / a[i] - <span class="hljs-number">2</span>;<br>                ans = a[i + <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> ((k - tmp) * a[i] &lt; a[i + <span class="hljs-number">1</span>]) &#123;<br>                ans = (k - tmp) * a[i] + a[i] - <span class="hljs-number">1</span>;<br>                cout &lt;&lt; ans &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-built_in">eif</span>(a[i + <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>) &#123;<br>                ans = (k - tmp) * a[i] + a[i] - <span class="hljs-number">1</span>;<br>                cout &lt;&lt; ans &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                tmp += a[i + <span class="hljs-number">1</span>] / a[i] - <span class="hljs-number">1</span>;<br>                ans = a[i] - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我真是个沙比，打的时候因为有个判断条件写错了一直wa2，比赛完十分钟就过了，纯掉分飞舞 😅</p>]]></content>
    
    
    <categories>
      
      <category>SOLUTIONS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solutions</tag>
      
      <tag>ACM</tag>
      
      <tag>思维</tag>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 750 (Div.2)</title>
    <link href="/2021/10/28/cf%20750/"/>
    <url>/2021/10/28/cf%20750/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Round-750-Div-2"><a href="#Codeforces-Round-750-Div-2" class="headerlink" title="Codeforces Round #750 (Div.2)"></a>Codeforces Round #750 (Div.2)</h1><h2 id="A-Luntik-and-Concerts"><a href="#A-Luntik-and-Concerts" class="headerlink" title="A_Luntik_and_Concerts"></a>A_Luntik_and_Concerts</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    ll a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    <span class="hljs-keyword">int</span> mn = <span class="hljs-built_in">min</span>(a, b);<br>    <span class="hljs-keyword">if</span> ((mn + c) &amp; <span class="hljs-number">1</span>) &#123;<br>        mn--;<br>        a -= mn;<br>        b -= mn;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        a -= mn;<br>        b -= mn;<br>    &#125;<br>    b &amp;= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-number">2</span>)<br>            a -= <span class="hljs-number">2</span>;<br>        cout &lt;&lt; (a &amp; <span class="hljs-number">1</span>) &lt;&lt; endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; (a &amp; <span class="hljs-number">1</span>) &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="B-Luntik-and-Subsequences"><a href="#B-Luntik-and-Subsequences" class="headerlink" title="B_Luntik_and_Subsequences"></a>B_Luntik_and_Subsequences</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">ll <span class="hljs-title">quickpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123; <br>    ll ans = <span class="hljs-number">1</span>;<br>    ll res = a;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * res;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        res = res * res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n; cin&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">65</span>];<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n) cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">sort</span>(a,a+n);<br>    ll cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">1</span>) cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span>&#123;<br>        ll cnt0=<span class="hljs-number">0</span>,cnt1=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-number">0</span>) cnt0++;<br>            <span class="hljs-built_in">eif</span>(a[i]==<span class="hljs-number">1</span>) cnt1++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        cnt=cnt1*<span class="hljs-built_in">quickpow</span>(<span class="hljs-number">2</span>,cnt0);<br>        cout&lt;&lt;cnt&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IOS;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C-Grandma-Capa-Knits-a-Scarf"><a href="#C-Grandma-Capa-Knits-a-Scarf" class="headerlink" title="C_Grandma_Capa_Knits_a_Scarf"></a>C_Grandma_Capa_Knits_a_Scarf</h2><blockquote><p>题意：</p><p>待补</p><p>思路：</p><p>待补</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> sum1[<span class="hljs-number">100005</span>], sum2[<span class="hljs-number">100005</span>];<br><span class="hljs-keyword">int</span> p[<span class="hljs-number">1000005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> T;<br>cin &gt;&gt; T;<br><span class="hljs-comment">//T = 1;</span><br><span class="hljs-keyword">while</span>(T--) &#123;<br><span class="hljs-keyword">int</span> n;<br>cin &gt;&gt; n;<br>string s;<br>cin &gt;&gt; s;<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>string s1 = <span class="hljs-string">&quot;&quot;</span>;<br>sum1[<span class="hljs-number">0</span>] = sum2[n + <span class="hljs-number">1</span>] = sum2[n] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> now = <span class="hljs-string">&#x27;a&#x27;</span> + i;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; s.<span class="hljs-built_in">size</span>(); j++) &#123;<br><span class="hljs-keyword">if</span>(s[j] == now) &#123;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>) sum1[j] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> sum1[j] = sum1[j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>) sum1[j] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> sum1[j] = sum1[j - <span class="hljs-number">1</span>];<br>s1 += s[j];<br>p[s1.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>] = j;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>sum2[j] = sum2[j + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span>(s[j] == now) sum2[j]++;<br>&#125;<br>string s2 = s1;<br><span class="hljs-built_in">reverse</span>(s2.<span class="hljs-built_in">begin</span>(), s2.<span class="hljs-built_in">end</span>());<br><span class="hljs-comment">//cout &lt;&lt; &quot;fuck&quot; &lt;&lt; endl;</span><br><span class="hljs-keyword">if</span>(s1 == s2) &#123;<br><span class="hljs-comment">//cout &lt;&lt; (char)(&#x27;a&#x27; + i) &lt;&lt; endl;</span><br><span class="hljs-keyword">int</span> del = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; s1.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span> + (s1.<span class="hljs-built_in">size</span>() &amp; <span class="hljs-number">1</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>); k++) &#123;<br><span class="hljs-comment">//if(i == 0) cout &lt;&lt; k &lt;&lt; &quot; &quot; &lt;&lt; endl;</span><br><span class="hljs-keyword">int</span> pos1 = p[k], pos2 = p[s1.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> - k];<br><span class="hljs-comment">//if(i + &#x27;a&#x27; == &#x27;r&#x27;) cout &lt;&lt; k &lt;&lt; &quot; &quot; &lt;&lt; del &lt;&lt; endl;</span><br><span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>) del += <span class="hljs-built_in">abs</span>(sum1[pos1] - sum2[pos2]);<br><span class="hljs-keyword">else</span> del += <span class="hljs-built_in">abs</span>((sum1[pos1] - sum1[p[k - <span class="hljs-number">1</span>]]) - (sum2[pos2] - sum2[p[s1.<span class="hljs-built_in">size</span>() - k]]));<br>&#125;<br>ans = <span class="hljs-built_in">min</span>(ans, del);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(ans == <span class="hljs-number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span> cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 8</span><br><span class="hljs-comment">// rprarlap</span><br></code></pre></td></tr></table></figure><h2 id="D-Vupsen-Pupsen-and-0"><a href="#D-Vupsen-Pupsen-and-0" class="headerlink" title="D_Vupsen_Pupsen_and_0"></a>D_Vupsen_Pupsen_and_0</h2><blockquote><p>题意：</p><p>已知非零数组a[i]，求非零数组b[i]，使得a[i]*b[i] 的和为0</p><p>思路：</p><p>个数为偶数两两相消，个数为奇数的话，选取尾部三个数，判断两个相加不为零的数出来，当作一个数与剩下的一个数两两相消即可。</p><p>坑点：三个数时合并的两个数相加不能为0</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 100005</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a[maxn];<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, n) &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">bool</span> t1 = <span class="hljs-literal">false</span>, t2 = <span class="hljs-literal">false</span>, t3 = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (a[n - <span class="hljs-number">1</span>] + a[n - <span class="hljs-number">2</span>] != <span class="hljs-number">0</span>) &#123;<br>            a[n - <span class="hljs-number">2</span>] = a[n - <span class="hljs-number">1</span>] + a[n - <span class="hljs-number">2</span>];<br>            t1 = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (a[n - <span class="hljs-number">2</span>] + a[n - <span class="hljs-number">3</span>] != <span class="hljs-number">0</span>) &#123;<br>                a[n - <span class="hljs-number">3</span>] = a[n - <span class="hljs-number">2</span>] + a[n - <span class="hljs-number">3</span>];<br>                a[n - <span class="hljs-number">2</span>] = a[n - <span class="hljs-number">1</span>];<br>                t2 = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                a[n - <span class="hljs-number">3</span>] = a[n - <span class="hljs-number">3</span>] + a[n - <span class="hljs-number">1</span>];<br>                t3 = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i += <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">if</span> (t1) &#123;<br>                    cout &lt;&lt; a[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; -a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; -a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                <span class="hljs-built_in">eif</span>(t2) &#123;<br>                    cout &lt;&lt; a[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; -a[i];<br>                &#125;<br>                <span class="hljs-built_in">eif</span>(t3) &#123;<br>                    cout &lt;&lt; a[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; -a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a[i + <span class="hljs-number">1</span>];<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cout &lt;&lt; a[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; -a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>) &#123;<br>            cout &lt;&lt; a[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; -a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SOLUTIONS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>solutions</tag>
      
      <tag>ACM</tag>
      
      <tag>思维</tag>
      
      <tag>codeforces</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kmp &amp; exkmp</title>
    <link href="/2021/10/24/kmp%20&amp;%20exkmp/"/>
    <url>/2021/10/24/kmp%20&amp;%20exkmp/</url>
    
    <content type="html"><![CDATA[<h1 id="kmp-amp-exkmp"><a href="#kmp-amp-exkmp" class="headerlink" title="kmp &amp; exkmp"></a>kmp &amp; exkmp</h1><p>Knuth-Morris-Pratt &amp; entend kmp </p><p>字符串匹配</p><h2 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a>kmp</h2><blockquote><p><strong>Keywords</strong>：next[] </p><p>由BF改进，O(m+n)，传世经典属于是😅</p><p>以下均假设主串为 <code>S</code>，模式串为 <code>P</code> </p></blockquote><ul><li><p><strong>What is <code>next[]</code> ?</strong></p><p>针对模式串，<code>next[j]</code> 表示模式串下标 <code>j</code> <strong>之前</strong> 最长<strong>相同前后缀</strong>的长度，这不重要。</p><p>你只需要记住：<code>next[j]</code>表示当 <code>P[j]!=S[i]</code> 时，<code>j</code> 指针的<strong>下一步移动位置</strong>。</p><p>偷个好图：</p><p><img src="https://pic4.zhimg.com/v2-817073ca77f6c75d234392f207a3c81b_b.webp" alt="img"></p></li><li><p><strong>How to quickly build <code>next[]</code> ?</strong></p><blockquote><p>话不多说，直接上🐎</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kmp_pre</span><span class="hljs-params">(string p, <span class="hljs-keyword">int</span> next[])</span></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br>j=next[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&lt;p.<span class="hljs-built_in">length</span>())&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">-1</span>!=j &amp;&amp; p[i]!=p[j]) j=next[j];<br>next[++i]=++j;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>① 初始化<code>next[0]=-1</code></p><p>② 如果 <code>P[next[m]]==P[m]</code> ，那么 <code>next[m+1]=next[m]+1</code></p><p>③ 如果 <code>P[next[m]]!=P[m]</code>，令 <code>t=m, t=next[t]</code>，比较 <code>P[next[t]]</code>和 <code>P[m]</code>：相同的话 <code>next[m]=next[t]+1</code> , 不同的令<code>t=next[t]</code> 继续比较，直到 <code>t==-1</code> 时，<code>next[m]=0 </code></p><hr></li><li><p><strong>kmp计数模板</strong></p><p>模式串在主串中出现了几次 (可重叠、不可重叠)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kmp_pre</span><span class="hljs-params">(string p, <span class="hljs-keyword">int</span> next[])</span></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br>j=next[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&lt;p.<span class="hljs-built_in">length</span>())&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">-1</span>!=j &amp;&amp; p[i]!=p[j]) j=next[j];<br>next[++i]=++j;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kmp_Count</span><span class="hljs-params">(string x, string y, <span class="hljs-keyword">int</span> next[])</span></span>&#123; <span class="hljs-comment">//x是模式串，y是主串</span><br><span class="hljs-keyword">int</span> i,j;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">kmp_pre</span>(x,next);<br>i=j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&lt;y.<span class="hljs-built_in">length</span>())&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">-1</span>!=j &amp;&amp; y[i]!=x[j]) j=next[j];<br>i++;j++;<br><span class="hljs-keyword">if</span>(j&gt;=x.<span class="hljs-built_in">length</span>())&#123;<br>ans++;<br>            <span class="hljs-comment">//以下二选一</span><br>j=next[j]; <span class="hljs-comment">//可重叠计数</span><br>            j=<span class="hljs-number">0</span>;<span class="hljs-comment">//不可重叠计数</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="exkmp"><a href="#exkmp" class="headerlink" title="exkmp"></a>exkmp</h2><blockquote><p><strong>Keywords</strong>: extend[] next[]</p><p>O(m+n)</p><p><strong>e-kmp 可以找到主串中所有模式串的匹配</strong></p></blockquote><ul><li><p><strong>What are they?</strong></p><p><strong>next[i]</strong>: 对模式串，表示 <code>P[i...m-1]</code> 与 <code>P[0...m-1]</code> 的最长公共前缀</p><p><strong>extend[i]</strong> : 对主串和模式串，表示 <code>S[i...n-1]</code>与 <code>P[0...m-1]</code> 的最长公共前缀</p></li><li><p><strong>How to build them?</strong></p><blockquote><p>🐎来</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ekmp_pre</span><span class="hljs-params">(string x, <span class="hljs-keyword">int</span> next[])</span></span>&#123;<br><span class="hljs-keyword">int</span> m=x.<span class="hljs-built_in">length</span>();<br>next[<span class="hljs-number">0</span>]=m;<br><span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(j+<span class="hljs-number">1</span>&lt;m &amp;&amp; x[j]==x[j+<span class="hljs-number">1</span>]) j++;<br>next[<span class="hljs-number">1</span>]=j;<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>; i&lt;m; i++)&#123;<br><span class="hljs-keyword">int</span> p=next[k]+k<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">int</span> L=next[i-k];<br><span class="hljs-keyword">if</span>(i+L&lt;p+<span class="hljs-number">1</span>) next[i]=L;<br><span class="hljs-keyword">else</span>&#123;<br>j=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,p-i+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(i+j&lt;m &amp;&amp; xi+j]==x[j]) j++;<br>next[i]=j;<br>k=i;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ekmp</span><span class="hljs-params">(string x, string y, <span class="hljs-keyword">int</span> next[], <span class="hljs-keyword">int</span> extend[])</span></span>&#123;<br><span class="hljs-built_in">ekmp_pre</span>(x,next);<br><span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> m=x.<span class="hljs-built_in">length</span>(), n=y.<span class="hljs-built_in">length</span>();<br><span class="hljs-keyword">while</span>(j&lt;n &amp;&amp; j&lt;m &amp;&amp; x[j]==y[j]) j++;<br>extend[<span class="hljs-number">0</span>]=j;<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br><span class="hljs-keyword">int</span> p=extend[k]+k<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">int</span> L=next[i-k];<br><span class="hljs-keyword">if</span>(i+L&lt;p+<span class="hljs-number">1</span>) extend[i]=L;<br><span class="hljs-keyword">else</span>&#123;<br>j=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,p-i+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(i+j&lt;n &amp;&amp; j&lt;m &amp;&amp; y[i+j]==x[j]) j++;<br>extend[i]=j;<br>k=i;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>假设我们已经知道 <code>next[]</code> , 如何求 <code>extend[]</code> 呢？</p><blockquote><p>此处变量设置会和🐎有所出入，主要是理解过程😅</p></blockquote><p>① 假设当前 <code>S</code> 串遍历到位置<code>i </code>, 即<code>extend[0...i-1]</code>的值均以求出；首先设置两个变量，<code>a</code> 和 <code>p</code>，<code>p</code> 代表以<code>a</code>为起始位置的字符匹配成功的最右边界，’p = 最后一个匹配成功位置+1’ ，即 <code>S[a...p) == P[0...p-a) </code>，假设下面基于<code>S[i]</code> 对应 <code>P[i-a]</code> 的几种情况开始讨论：</p><p>② 如图所示，如果 <code>i+next[i-a] &lt; p</code> ，根据 <code>next[]</code>  数组的定义，易知 <code>extend[i] = next[i-a]</code></p><p><img src="https://i.bmp.ovh/imgs/2021/10/b4e3168596aa7ae5.png" alt="img"></p><p>③ 如果 <code>i+next[i-a] == p</code> ，此时<code>S[p]!=P[p-a]</code> 且<code>P[p-i]!=P[p-a]</code>，但是<code>S[p]==P[p-i]</code>的可能仍然存在，所以直接从 <code>S[p]</code> 与 <code>P[p-i]</code> 开始向后匹配即可</p><p><img src="https://i.bmp.ovh/imgs/2021/10/c93d09cbc00e9b72.png" alt="img"></p><p>④ 如果 <code>i+next[i-a] &gt; p</code> ，此时说明 <code>S[i...p)</code> 与 <code>P[i-a...p-a]</code>相同，注意到 <code>S[p]!=P[p-a]</code> 并且 <code>P[p-i]==P[p-a]</code>，即 <code>S[p]!=T[p-i]</code> ，所以没必要继续往下判断了，故赋值<code>extend[i]=p-i</code></p><p><img src="https://i.bmp.ovh/imgs/2021/10/2f76cdb08c9080ee.png" alt="img"></p><p>⑤ 由上面的过程，求解<code>next[i]</code>的过程即为 <code>P</code> 自己和自己匹配的过程，over</p></li></ul><blockquote><p>需要细品</p></blockquote><hr><h2 id="题单"><a href="#题单" class="headerlink" title="题单"></a>题单</h2><p><a href="http://maskros.icu/2021/11/26/kmp_problem/">Solution</a></p><ul><li><p>0x01 剪花布条 HDU-2087 <a href="https://vjudge.net/problem/HDU-2087">link</a></p></li><li><p>0x02 Secret HDU-6153 <a href="https://vjudge.net/problem/HDU-6153">link</a></p></li><li><p>0x03 Cow Patterns POJ-3167 <a href="https://vjudge.net/problem/POJ-3167">link</a></p></li><li><p>… 待更</p></li></ul><blockquote><p>kmp 和 exkmp 整的头晕….</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ALGORITHMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>note</tag>
      
      <tag>algorithm</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC学习杂记</title>
    <link href="/2021/09/16/springMVC/"/>
    <url>/2021/09/16/springMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC学习杂记"><a href="#SpringMVC学习杂记" class="headerlink" title="SpringMVC学习杂记"></a>SpringMVC学习杂记</h1><blockquote><p>注：杂记即为看到啥记啥 毫无章法 乱jb记</p></blockquote><blockquote><p>常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等</p></blockquote><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>Spring 是最受欢迎的企业级 Java 应用程序开发的轻量级框架</p><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践</p><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul><li><p>表现层  web层  MVC是表现层的一个设计模型 </p></li><li><p>业务层  service层</p></li><li><p>持久层  dao层</p></li></ul><h3 id="优良特性"><a href="#优良特性" class="headerlink" title="优良特性"></a>优良特性</h3><ul><li>非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API</li><li>控制反转：IOC——Inversion of Control，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。</li><li>依赖注入：DI——Dependency Injection，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。</li><li>面向切面编程：Aspect Oriented Programming——AOP</li><li>容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期</li><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）</li></ul><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/album/c9159efce03899c144f5fd357785a4eba6956568.png" alt="img"></p><h2 id="MVC职责分析"><a href="#MVC职责分析" class="headerlink" title="MVC职责分析"></a>MVC职责分析</h2><ul><li><p>Controller：控制器</p><ul><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ul></li><li><p>Model：模型</p><ul><li>业务逻辑</li><li>保存数据的状态</li></ul></li><li><p>View：视图</p><ul><li>显示页面</li></ul></li></ul><hr><ul><li><p>MVC框架需要做哪些事情：</p><ol><li><p>将url映射到java类或java类的方法 .</p></li><li><p>封装用户提交的数据 .</p></li><li><p>处理请求–调用相关的业务处理–封装响应数据 .</p></li><li><p>将响应的数据进行渲染 . jsp / html 等表示层数据 .</p></li></ol></li></ul><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>jsp：本质就是一个servlet</p><ol><li><p>添加pom依赖</p></li><li><p>新建空Maven项目</p></li><li><p>Add Framework Support 选择Web Application添加 变成web项目 </p></li><li><p>导入servlet和jsp的依赖</p></li><li><p>编写一个Servlet类，用来处理用户的请求</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span><br></code></pre></td></tr></table></figure><ol start="6"><li>在WEB-INF目录下新建一个jsp的文件夹，新建test.jsp</li><li>在web.xml中注册Servlet</li><li>配置Tomcat 并启动测试</li></ol><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><blockquote><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量 级Web框架</p></blockquote><p> Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁</p><h3 id="中心控制器"><a href="#中心控制器" class="headerlink" title="中心控制器"></a>中心控制器</h3><p>Spring MVC框架以请求为驱动 , 围绕一个中心Servlet分派请求及提供其他功能，DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)。</p><p>SpringMVC的原理如下图所示：</p><p>​    当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/album/d3318d96dfdee2ee58b6bee91fde63570542aeb8.png" alt="img"></p><h3 id="SpringMVC执行原理"><a href="#SpringMVC执行原理" class="headerlink" title="SpringMVC执行原理"></a>SpringMVC执行原理</h3><blockquote><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现</p></blockquote><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/album/825f31d6c644d7b4d5c7a270d3c5244f93282738.png" alt="img"></p><ol><li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p><blockquote><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p><p>如上url拆分成三部分：</p><p><a href="http://localhost:8080/">http://localhost:8080</a> 服务器域名</p><p>SpringMVC部署在服务器上的web站点</p><p>hello表示控制器</p><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p></blockquote></li><li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p></li><li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p></li><li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p></li><li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p></li><li><p>Handler让具体的Controller执行。</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p></li><li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p></li><li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p></li><li><p>最终视图呈现给用户。</p></li></ol><h3 id="配置版"><a href="#配置版" class="headerlink" title="配置版"></a>配置版</h3><ol><li><p>配置web.xml  ， 注册DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--1.注册DispatcherServlet--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--启动级别-1--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span><br>   <span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml  : [servletname]-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 处理映射器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 处理器适配器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.maskros.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">//注意：这里我们先导入Controller接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">//ModelAndView 模型和视图</span><br>       ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br><br>       <span class="hljs-comment">//封装对象，放在ModelAndView中。Model</span><br>       mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;HelloSpringMVC!&quot;</span>);<br>       <span class="hljs-comment">//封装要跳转的视图，放在ModelAndView中</span><br>       mv.setViewName(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//: /WEB-INF/jsp/hello.jsp</span><br>       <span class="hljs-keyword">return</span> mv;<br>  &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将自己的类交给SpringIOC容器，注册bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Handler--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.controller.HelloController&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;Kuangshen&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>配置tomcat启动测试</p></li></ol><blockquote><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li>查看控制台输出，看一下是不是缺少了什么jar包。</li><li>如果jar包存在，显示无法输出，<strong>就在IDEA的项目发布中，添加lib依赖</strong>！</li></ol></blockquote><hr><h3 id="※注解版"><a href="#※注解版" class="headerlink" title="※注解版"></a>※注解版</h3><ol><li><p>由于Maven可能存在资源过滤的问题，我们将配置完善</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入</p></li><li><p>配置 web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>/ 和 /* 的区别：</strong>&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错</p></blockquote></li><li><p>添加 SpringMVC 配置文件</p><p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">   支持mvc注解驱动</span><br><span class="hljs-comment">       在spring中一般采用@RequestMapping注解来完成映射关系</span><br><span class="hljs-comment">       要想使@RequestMapping注解生效</span><br><span class="hljs-comment">       必须向上下文中注册DefaultAnnotationHandlerMapping</span><br><span class="hljs-comment">       和一个AnnotationMethodHandlerAdapter实例</span><br><span class="hljs-comment">       这两个实例分别在类级别和方法级别处理。</span><br><span class="hljs-comment">       而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>       <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 Contronller</p><blockquote><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 编写控制类</span><br><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/HelloController&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>   <span class="hljs-comment">//真实访问地址 : 项目名/HelloController/hello</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(Model model)</span></span>&#123;<br>       <span class="hljs-comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span><br>       model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello,SpringMVC&quot;</span>);<br>       <span class="hljs-comment">//web-inf/jsp/hello.jsp</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建视图层</p><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;SpringMVC&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>配置 Tomcat 运行</p></li></ol><hr><p>使用springMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p><h3 id="控制器和RestFul"><a href="#控制器和RestFul" class="headerlink" title="控制器和RestFul"></a>控制器和RestFul</h3><blockquote><p>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</p><p>控制器负责解析用户的请求并将其转换为一个模型。</p><p>在Spring MVC中一个控制器类可以包含多个方法</p><p>在Spring MVC中，对于Controller的配置方式有很多种，一般<strong>使用注解@Controller</strong></p></blockquote><h4 id="实现Controller接口"><a href="#实现Controller接口" class="headerlink" title="实现Controller接口"></a>实现Controller接口</h4><ul><li><p>mvc的配置文件只留下 视图解析器</p></li><li><p>ControllerTest1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义控制器</span><br><span class="hljs-comment">//注意点：不要导错包，实现Controller接口，重写方法；</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">//返回一个模型视图对象</span><br>       ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>       mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Test1Controller&quot;</span>);<br>       mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>       <span class="hljs-keyword">return</span> mv;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;/t1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.maskros.controller.ControllerTest1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写前端test.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;Kuangshen&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li></ul><hr><ul><li>实现接口Controller定义控制器是较老的办法</li><li>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li></ul><h4 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h4><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>增加一个ControllerTest2类，使用注解实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Controller注解的类会自动添加到Spring上下文中</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest2</span></span>&#123;<br><br>   <span class="hljs-comment">//映射访问路径</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/t2&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model)</span></span>&#123;<br>       <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>       model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;ControllerTest2&quot;</span>);<br>       <span class="hljs-comment">//返回视图位置</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</p></blockquote><h4 id="RequestMapping-使用"><a href="#RequestMapping-使用" class="headerlink" title="@RequestMapping 使用"></a>@RequestMapping 使用</h4><ul><li>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 只注解在方法上面</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br>   <span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//访问路径：http://localhost:8080 / 项目名 / h1</span><br><br><span class="hljs-comment">// 同时注解类与方法@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br>   <span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//访问路径：http://localhost:8080 / 项目名/ admin /h1 </span><br></code></pre></td></tr></table></figure><h4 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h4><blockquote><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。localhost:8080/a/b/c/d/……</p></blockquote><p>在Spring MVC中可以使用  @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>&#123;<br><br>   <span class="hljs-comment">//映射访问路径</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p2, Model model)</span></span>&#123;<br>       <br>       <span class="hljs-keyword">int</span> result = p1+p2;<br>       <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>       model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果：&quot;</span>+result);<br>       <span class="hljs-comment">//返回视图位置</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>       <br>  &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p>使用路径变量的好处？</p><ol><li><ul><li>使路径变得更加简洁；</li><li>获得参数更加方便，框架会自动进行类型转换。</li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</li></ul></li></ol><p><strong>使用method属性指定请求类型</strong></p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径,必须是POST请求</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index2</span><span class="hljs-params">(Model model)</span></span>&#123;<br>   model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello!&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 我们使用浏览器地址栏进行访问默认是Get请求，会报错405</span><br><span class="hljs-comment">// 如果将POST修改为GET则正常了</span><br><br><span class="hljs-comment">//映射访问路径,必须是Get请求</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index2</span><span class="hljs-params">(Model model)</span></span>&#123;<br>   model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello!&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。\</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的</strong></p><p>方法级别的注解变体有如下几个：组合注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span><br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-meta">@PutMapping</span><br><span class="hljs-meta">@DeleteMapping</span><br><span class="hljs-meta">@PatchMapping</span><br></code></pre></td></tr></table></figure><p><strong>@GetMapping</strong> 是一个组合注解，平时使用的会比较多, 它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式</p><h3 id="数据处理和跳转"><a href="#数据处理和跳转" class="headerlink" title="数据处理和跳转"></a>数据处理和跳转</h3><p>转发 重定向</p><p>接受请求参数以及数据回显</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestParam(&quot;xxx&quot;)</span>  <span class="hljs-comment">//必须要求传这个参数</span><br></code></pre></td></tr></table></figure><h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><blockquote><p>JavaScript Object Notation, JS 对象标记 是一种轻量级的数据交换格式，目前使用特别广泛，采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据</p></blockquote><ul><li>@Controller：定义一个控制器类，</li><li>@RestController： 注解相当于 @Controller ＋ @ResponseBody 合在一起的作用。</li><li>@ResponseBody：标记Controller类中的方法。把return的结果变成<strong>JSON对象</strong>返回。</li></ul><p>语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;QinJiang&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-string">&quot;男&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>Json 和 JavaScript 对象互转：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">JSON</span>.parse()  <span class="hljs-comment">//从JSON字符串转换为JavaScript 对象</span><br><span class="hljs-built_in">JSON</span>.stringify() <span class="hljs-comment">//从JavaScript 对象转换为JSON字符串</span><br></code></pre></td></tr></table></figure><h3 id="Controller返回Json数据"><a href="#Controller返回Json数据" class="headerlink" title="Controller返回Json数据"></a>Controller返回Json数据</h3><h4 id="Jackson使用"><a href="#Jackson使用" class="headerlink" title="Jackson使用"></a>Jackson使用</h4><p>导入它的jar包 配置SpringMVC</p><p>编写Controller时需要运用到两个新东西：@ResponseBody，ObjectMapper对象</p><p>乱码处理</p><h4 id="FastJson使用"><a href="#FastJson使用" class="headerlink" title="FastJson使用"></a>FastJson使用</h4><blockquote><p> 阿里开发 方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换</p></blockquote><h4 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Json乱码问题配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><blockquote><p>Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）</p><p>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术</p></blockquote><ul><li>可以通过 iframe 标签来伪造一个Ajax</li><li><strong>利用AJAX可以做：</strong><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>….</li></ul></li></ul><h3 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h3><blockquote><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据</p><p>jQuery是一个库，提供大量的JavaScript函数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs text">jQuery.ajax(...)<br>      部分参数：<br>            url：请求地址<br>            type：请求方式，GET、POST（1.9.0之后用method）<br>        headers：请求头<br>            data：要发送的数据<br>    contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;)<br>          async：是否异步<br>        timeout：设置请求超时时间（毫秒）<br>      beforeSend：发送请求前执行的函数(全局)<br>        complete：完成之后执行的回调函数(全局)<br>        success：成功之后执行的回调函数(全局)<br>          error：失败之后执行的回调函数(全局)<br>        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型<br>        dataType：将服务器端返回的数据转换成指定类型<br>          &quot;xml&quot;: 将服务器端返回的内容转换成xml格式<br>          &quot;text&quot;: 将服务器端返回的内容转换成普通文本格式<br>          &quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。<br>        &quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式<br>          &quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象<br>        &quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback=?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数<br></code></pre></td></tr></table></figure><h3 id="Ajax异步加载数据"><a href="#Ajax异步加载数据" class="headerlink" title="Ajax异步加载数据"></a>Ajax异步加载数据</h3><p>实现了数据回显</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">   $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">       $(<span class="hljs-string">&quot;#btn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">           $.post(<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">               <span class="hljs-built_in">console</span>.log(data)</span><br><span class="javascript">               <span class="hljs-keyword">var</span> html=<span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">               <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;data.length ; i++) &#123;</span><br><span class="javascript">                   html+= <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span> +</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span></span><br><span class="javascript">              &#125; <span class="hljs-comment">//html拼接</span></span><br><span class="javascript">               $(<span class="hljs-string">&quot;#content&quot;</span>).html(html);</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h2><blockquote><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。可用于验证用户是否登录 (认证用户)</p></blockquote><p>过滤器和拦截器的区别：</p><p>过滤器：</p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><p>拦截器 (是AOP思想的具体应用)</p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li></ul><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口</p><p>在springmvc的配置文件中配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--/** 包括路径及其子路径--&gt;</span><br>            <span class="hljs-comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span><br>            <span class="hljs-comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/somewhere/**&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--拦截somewhere下的 somewhere用@RequestMapping()配置 --&gt;</span><br>            <span class="hljs-comment">&lt;!--bean配置的就是拦截器--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.maskros.interceptor.MyInterceptor&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>每写一个拦截器要到xml中配置这个拦截器</p><p>exp：未登录时点击主页按钮会被拦截器重定向到登录页面</p><h2 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h2><p>SpringMVC + Vue + SpringBoot + SpringCloud + Linux</p><p>Spring：IOC 和 AOP</p><p>SpringMVC：SpringMVC的执行流程，SSM框架整合</p><p>SSM =  javaweb做项目</p><p>MVC：模型 (dao, service) , 视图 (jsp) , 控制器 (servlet)</p><p>servlet: 转发 重定向</p><p>前端 数据传输 实体类</p><p>实体类：用户名 密码  生日 ….. n个</p><p>前端：用户名 密码</p><p>pojo: User</p><p>vo: UserVo</p><p>MVVM:  M - V - VM (ViewModel: 双向绑定)</p><p>form表单 method: get/post</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;/hello&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;method&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>Spring: 大杂烩，我们可以将SpringMVC中所有要用到的Bean，注册到Spring中</p><p>访问网站：-&gt; Servlet(中转调度) &lt;=&gt; Service -&gt; Dao -&gt; Sql</p><p>前后端分离时代：</p><p>后端部署后端，提供接口，提供数据：json</p><p>前端独立部署，负责渲染后端的数据</p><p>js:</p><ul><li>函数：闭包() ()</li><li>Dom<ul><li>id, name, tag</li><li>create, remove</li></ul></li><li>Bom<ul><li>window</li><li>document</li></ul></li></ul><p>ES6: import require</p><p>js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">data:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:$(<span class="hljs-string">&quot;#username&quot;</span>).val()&#125;,<br><span class="hljs-comment">// data传键值对 &#123;x:y&#125;  .val()==value 左边的name对应controller的name 右边的username对应下面输入框的id,加#才能取到！    </span><br></code></pre></td></tr></table></figure><p>IDEA alt+insert 快捷键 实现接口等等 </p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>springMVC</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL使用手册</title>
    <link href="/2021/08/13/STL%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2021/08/13/STL%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="STL使用手册"><a href="#STL使用手册" class="headerlink" title="STL使用手册"></a>STL使用手册</h1><p>Standard Template Library</p><blockquote><p>又名《👴怕忘了先把他写下来》</p></blockquote><h2 id="我-是-谁"><a href="#我-是-谁" class="headerlink" title="我 是 谁 ?"></a>我 是 谁 ?</h2><p>斯丹德儿的 坦普雷特 莱博瑞 即标准模板库</p><ul><li><p>重要特点：数据结构和算法的分离</p></li><li><p>重要特性：不是面向对象的</p></li><li><p>逻辑层次：体现了泛型化程序设计的思想</p></li><li><p>实现层次：以一种类型参数化的方式实现，基于模板(template)</p></li></ul><p>六大组件：</p><ul><li>容器（Container），是一种数据结构，如list，vector，deques ，以模板类的方法提供 ;</li><li>迭代器（Iterator），提供了访问容器中对象的方法。迭代器就如同一个指针。C++的指针也是一种迭代器。迭代器也可以是那些定义了operator*()以及其他类似于指针的操作符地方法的类对象；</li><li>算法（Algorithm），是用来操作容器中的数据的模板函数。如sort()，find()，函数本身与他们操作的数据的结构和类型无关 ;</li><li>仿函数（Functor）</li><li>适配器（Adaptor）</li><li>分配器（allocator）</li></ul><h2 id="👴-常用的"><a href="#👴-常用的" class="headerlink" title="👴 常用的"></a>👴 常用的</h2><blockquote><p>以下不按顺序，想到啥就写啥，有个🥚的顺序</p></blockquote><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造函数</span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(str,index)</span></span>; <span class="hljs-comment">//将字符串str内“始于位置index”的部分当作字符串的初值</span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(str,index,n)</span></span>; <span class="hljs-comment">//将字符串str内“始于index且长度顶多n”的部分作为字符串的初值</span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(n,c)</span></span>; <span class="hljs-comment">//生成一个字符串，包含n个c字符(char)</span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(str.begin(),str.end())</span></span>; <span class="hljs-comment">//以区间begin():end() (不包含end())内的字符作为字符串s的初值</span><br><br><span class="hljs-comment">//操作函数</span><br>s.<span class="hljs-built_in">erase</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">//删除</span><br>s.<span class="hljs-built_in">replace</span>(pos,len,str); <span class="hljs-comment">//替换，从pos开始长为len被替换为str</span><br>s.<span class="hljs-built_in">find</span>(str,pos=<span class="hljs-number">0</span>); <span class="hljs-comment">//从pos向右查找，返回str第一次出现的位置</span><br>s.<span class="hljs-built_in">rfind</span>(str,pos=npos); <span class="hljs-comment">//从pos反向查找，返回找到位置</span><br>s.<span class="hljs-built_in">find_first_of</span>(str); <span class="hljs-comment">//查找第一个属于str中字符的位置</span><br>s.<span class="hljs-built_in">find_first_not_of</span>(str); <span class="hljs-comment">//查找第一个不属于str中字符位置</span><br>s.<span class="hljs-built_in">find_last_of</span>(str);<br>s.<span class="hljs-built_in">find_last_not_of</span>(str);<br>s1.<span class="hljs-built_in">compare</span>(s2); <span class="hljs-comment">//比较，相等0大于1小于-1</span><br>s1.<span class="hljs-built_in">compare</span>(pos,len,s2)<span class="hljs-comment">//从s1的pos开始长为len与s2比较</span><br></code></pre></td></tr></table></figure><h4 id="stringstream"><a href="#stringstream" class="headerlink" title="stringstream"></a>stringstream</h4><p>自动且直接的类型转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">stringstream sstream;<br><span class="hljs-comment">//数据类型转换</span><br>string str;<br><span class="hljs-keyword">int</span> a=<span class="hljs-number">123</span>;<br>sstream &lt;&lt; a;<br>sstream &gt;&gt; str;<br>cout&lt;&lt;str;<br>cout&lt;&lt;sstream.<span class="hljs-built_in">str</span>(); <br><span class="hljs-comment">//多个字符串拼接</span><br>sstream &lt;&lt; <span class="hljs-string">&quot;xxxx&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;aaaaa&quot;</span>;<br><span class="hljs-comment">//清空stringstream</span><br>sstream.<span class="hljs-built_in">clear</span>();<br>sstream.<span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h4><p>便携结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//访问通过first second</span><br><span class="hljs-comment">//可以通过一般运算符比较，先比较first再second</span><br><span class="hljs-function">pair&lt;string,<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">p</span> <span class="hljs-params">(str,<span class="hljs-number">123</span>)</span></span>;<br>pair&lt;string,<span class="hljs-keyword">int</span>&gt; p = <span class="hljs-built_in">make_pair</span>(str,<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><h4 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h4><p>向量容器，动态存储</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-keyword">int</span>&gt; v;<br>v.<span class="hljs-built_in">front</span>(); v.<span class="hljs-built_in">back</span>();<br>v.<span class="hljs-built_in">begin</span>(); v.<span class="hljs-built_in">end</span>();<br>v.<span class="hljs-built_in">push_back</span>();<br>v.<span class="hljs-built_in">size</span>();<br>v.<span class="hljs-built_in">empty</span>();<br>v.<span class="hljs-built_in">clear</span>();<br>v.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">//删除表尾元素</span><br>v.<span class="hljs-built_in">insert</span>(it,x); <span class="hljs-comment">//向迭代器it 指向的元素前插入新元素x</span><br>v.<span class="hljs-built_in">insert</span>(it,n,x); <span class="hljs-comment">//插入n个x</span><br>v.<span class="hljs-built_in">insert</span>(it, first, last); <span class="hljs-comment">//将由迭代器first和last 所指定的序列[first, last)插入到迭代器it指向的元素前面</span><br>v.<span class="hljs-built_in">erase</span>(it); <span class="hljs-comment">//删</span><br>v.<span class="hljs-built_in">erase</span>(first,last);<br>v.<span class="hljs-built_in">reverse</span>(n); <span class="hljs-comment">//预分配缓冲空间，使存储空间至少可容纳n个元素</span><br>v.<span class="hljs-built_in">resize</span>(n); <span class="hljs-comment">//改变序列长度，超出元素删除，若源空间小于n，则默认值填满空间</span><br>v.<span class="hljs-built_in">resize</span>(n,val); <span class="hljs-comment">//超出的用val填满</span><br></code></pre></td></tr></table></figure><h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h4><p>栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">stack&lt;<span class="hljs-keyword">int</span>&gt; s;<br>s.<span class="hljs-built_in">push</span>(x);<br>s.<span class="hljs-built_in">pop</span>();<br>s.<span class="hljs-built_in">top</span>();<br>s.<span class="hljs-built_in">empty</span>();<br>s.<span class="hljs-built_in">size</span>();<br></code></pre></td></tr></table></figure><h4 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h4><p>队列，优先队列，双端队列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// queue</span><br>queue&lt;<span class="hljs-keyword">int</span>&gt; q;<br>q.<span class="hljs-built_in">push</span>(x);<br>q.<span class="hljs-built_in">pop</span>();<br>q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">back</span>();<br>q.<span class="hljs-built_in">empty</span>();<br>q.<span class="hljs-built_in">size</span>();<br><br><span class="hljs-comment">// priority_queue</span><br>priority&lt;<span class="hljs-keyword">int</span>&gt; q; <span class="hljs-comment">//默认大者优先</span><br>priority&lt;<span class="hljs-keyword">int</span>, vector&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; q; <span class="hljs-comment">//小的先出队 三个模板参数：元素类型，容器类型，比较算子</span><br><span class="hljs-comment">// 优先级设置：定义结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-keyword">int</span> grade;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (Student s1, Student s2)&#123;<br>        <span class="hljs-keyword">return</span> s1.grade&lt;s2.grade;<br>        <span class="hljs-comment">//此处小于号还是小于的作用，故队列中以成绩高的学生优先，若反之变号即可</span><br>    &#125;<br>&#125;;<br>priority_queue&lt;Student&gt; q;<br><span class="hljs-comment">//也可以把重载的函数写在结构体外面</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmp</span>&#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(Student s1, Student s2)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> s1.grade&lt;s2.grade;<br>    &#125;<br>&#125;;<span class="hljs-comment">//tips:优先队列中的cmp和sort中的cmp效果相反</span><br>priority_queue&lt;Student,vector&lt;Student&gt;,cmp&gt; q;<br><span class="hljs-comment">//如果结构体内数据庞大，像出现字符串或者数组，建议使用引用来提高效率。此时比较类的参数需要加上 const 和 &amp;</span><br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> Student &amp;s1, <span class="hljs-keyword">const</span> Student &amp;s2)&#123;<br><span class="hljs-keyword">return</span> s1.grade&lt;s2.grade;<br>&#125;<br><br><span class="hljs-comment">//deque</span><br>deque&lt;<span class="hljs-keyword">int</span>&gt; d;<br>d.<span class="hljs-built_in">push_back</span>(x); <span class="hljs-comment">//尾部插入</span><br>d.<span class="hljs-built_in">push_front</span>(x); <span class="hljs-comment">//首部插入元素</span><br>d.<span class="hljs-built_in">insert</span>(d.<span class="hljs-built_in">begin</span>()+len,x); <span class="hljs-comment">//中间插入元素</span><br><span class="hljs-comment">//可以通过 d[0] d[1] 访问</span><br>d.<span class="hljs-built_in">pop_front</span>(); <span class="hljs-comment">//删除头部</span><br>d.<span class="hljs-built_in">pop_back</span>();<br>d.<span class="hljs-built_in">erase</span>(d.<span class="hljs-built_in">begin</span>()+len); <span class="hljs-comment">//删除指定位置元素，可以写多个</span><br></code></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>键值对，元素按关键字有序，内部红黑树</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// map空间占用率高</span><br>map&lt;string,<span class="hljs-keyword">int</span>&gt; m;<br>m[key]=value;<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(key,value));<br>m.<span class="hljs-built_in">erase</span>(key);<br>m.<span class="hljs-built_in">erase</span>(it);<br>m.<span class="hljs-built_in">clear</span>();<br>m.<span class="hljs-built_in">size</span>();<br>map&lt;string,<span class="hljs-keyword">int</span>&gt;::iterator it;<br><span class="hljs-keyword">for</span>(it=mp.<span class="hljs-built_in">begin</span>();it!=mp.<span class="hljs-built_in">end</span>();++it)&#123;<br>    cout&lt;&lt;it-&gt;first&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-comment">// unordered_map 效率较高 内部哈希表</span><br><span class="hljs-comment">// 对于查找问题，unordered_map会更加高效一些，因此遇到查找问题，常会考虑一下用unordered_map</span><br></code></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>无重复，按键值自动排序</p><p>数据结构为红黑树。以节点形式保存（动态)，用迭代器访问</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">set&lt;<span class="hljs-keyword">int</span>&gt; s;<br>s.<span class="hljs-built_in">begin</span>(); s.<span class="hljs-built_in">end</span>();<br>s.<span class="hljs-built_in">clear</span>();<br>s.<span class="hljs-built_in">empty</span>();<br>s.<span class="hljs-built_in">erase</span>(x);<br>s.<span class="hljs-built_in">find</span>(x);<br>s.<span class="hljs-built_in">insert</span>(x);<br>s.<span class="hljs-built_in">size</span>();<br>s.<span class="hljs-built_in">lower_bound</span>(value); <span class="hljs-comment">//返回第一个大于等于value的定位器</span><br>s.<span class="hljs-built_in">upper_bound</span>(value); <span class="hljs-comment">//返回最后一个大于等于value的定位器</span><br>set&lt;<span class="hljs-keyword">int</span>&gt;::iterator it;<br><span class="hljs-keyword">for</span>(it=s.<span class="hljs-built_in">begin</span>();it!=s.<span class="hljs-built_in">end</span>();it++)<br>cout&lt;&lt;*it&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>链表</p><ul><li>如果你需要高效的随即存取，而不在乎插入和删除的效率，使用vector </li><li>如果你需要大量的插入和删除，而不关心随即存取，则应使用list </li><li>如果你需要随即存取，而且关心两端数据的插入和删除，则应使用deque</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">list&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>list&lt;<span class="hljs-keyword">int</span>&gt; a&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>a.<span class="hljs-built_in">push_back</span>(x);<br>a.<span class="hljs-built_in">push_front</span>(x);<br>a.<span class="hljs-built_in">empty</span>();<br>a.<span class="hljs-built_in">resize</span>(n);<br>a.<span class="hljs-built_in">clear</span>();<br>a.<span class="hljs-built_in">front</span>(); a.<span class="hljs-built_in">back</span>();<br>a.<span class="hljs-built_in">reverse</span>();<br>a.<span class="hljs-built_in">merge</span>(b); <span class="hljs-comment">//b变空，a尾插入b</span><br>a.<span class="hljs-built_in">insert</span>(pos,x);<br>a.<span class="hljs-built_in">insert</span>(pos,b.<span class="hljs-built_in">begin</span>(),b.<span class="hljs-built_in">end</span>());<br>a.<span class="hljs-built_in">erase</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>a.<span class="hljs-built_in">remove</span>(x);<br></code></pre></td></tr></table></figure><h4 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h4><p>存放二进制0/1的容器，可以声明非常大的二进制位而不限于64，用来优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">bitset&lt;N&gt; b; <span class="hljs-comment">//表示长为N的二进制串</span><br><span class="hljs-comment">// 通过b[pos]访问</span><br>b.<span class="hljs-built_in">any</span>(); <span class="hljs-comment">//存在为1的二进制位</span><br>b.<span class="hljs-built_in">none</span>(); <span class="hljs-comment">//不存在为1的二进制位</span><br>b.<span class="hljs-built_in">count</span>(); <span class="hljs-comment">//置1的二进制位的个数</span><br>b.<span class="hljs-built_in">size</span>();<br>b.<span class="hljs-built_in">test</span>(pos); <span class="hljs-comment">//在pos位处是否为1</span><br>b.<span class="hljs-built_in">set</span>(); <span class="hljs-comment">//所有位置1</span><br>b.<span class="hljs-built_in">set</span>(pos);<br>b.<span class="hljs-built_in">reset</span>(); <span class="hljs-comment">//所有位置0</span><br>b.<span class="hljs-built_in">reset</span>(pos);<br>b.<span class="hljs-built_in">flip</span>(); <span class="hljs-comment">//逐位取反</span><br>b.<span class="hljs-built_in">flip</span>(pos);<br></code></pre></td></tr></table></figure><h3 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h3><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">lower_bound</span>(a,a+n,x); <span class="hljs-comment">//二分查找第一个大于等于x的位置</span><br><span class="hljs-built_in">upper_bound</span>(a,a+n,x); <span class="hljs-comment">//二分查找第一个大于x的位置</span><br><span class="hljs-built_in">find</span>();<br><span class="hljs-built_in">rfind</span>();<br></code></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">sort</span>(a,a+n,cmp); <span class="hljs-comment">//默认ASC</span><br></code></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">swap</span>(a,b); <span class="hljs-comment">//交换</span><br><span class="hljs-built_in">replace</span>(pos,len,str); <span class="hljs-comment">//替换</span><br><span class="hljs-built_in">unique</span>(a,a+n); <span class="hljs-comment">//去除相邻的重复元素,会把重复的藏到末尾，使用前需要先排序</span><br></code></pre></td></tr></table></figure><h4 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">next_permutation</span>(a,a+n); <span class="hljs-comment">//下一个全排列</span><br><span class="hljs-built_in">prev_permutation</span>(a,a+n); <span class="hljs-comment">//上一个全排列</span><br><span class="hljs-comment">//函数返回bool值，一般配合while()</span><br></code></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">isalpha</span>(<span class="hljs-keyword">char</span> x); <span class="hljs-comment">//小写字母返回2，大写字母1，非字母0</span><br><span class="hljs-built_in">tolower</span>(<span class="hljs-keyword">char</span> x); <span class="hljs-built_in">toupper</span>(<span class="hljs-keyword">char</span> x); <span class="hljs-comment">//返回小写，大写字母的ASCII值，非字母则相等</span><br><span class="hljs-comment">//海伦公式</span><br>p=(a+b+c)/<span class="hljs-number">2</span>;<br>s=<span class="hljs-built_in">sqrt</span>(p*(p-a)*(p-b)*(p-c));<br><span class="hljs-built_in">abs</span>(<span class="hljs-keyword">int</span> x); <span class="hljs-comment">//只用于整数</span><br><span class="hljs-built_in">fabs</span>(<span class="hljs-keyword">double</span> x); <span class="hljs-comment">//精度更高</span><br></code></pre></td></tr></table></figure><hr><p>暂时就这些了，寄！</p>]]></content>
    
    
    <categories>
      
      <category>ALGORITHMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>note</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我确实不会线段树</title>
    <link href="/2021/08/06/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <url>/2021/08/06/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p>Segment Tree</p><blockquote><p>一个问题，只要能化成对一些连续点的修改和统计问题，基本就可以用线段树来艹了</p></blockquote><hr><p>原理：将[1,n]分解成若干特定的子区间(数量不超过4*n),然后，将每个区间[L,R]都分解为少量特定的子区间，通过对这些少量子区间的修改或者统计，来实现快速对[L,R]的修改或者统计。每一个非叶结点所表示的结点[a,b]，其左儿子表示的区间为[a,(a+b)/2]，右儿子表示的区间为[(a+b)/2,b]。</p><p>作用：对编号连续的一些点的区间信息进行修改或者统计操作，用线段树统计的东西，必须符合<strong>区间加法</strong>。与树状数组不同的是，线段树不止适用于区间求和的查询，也可以进行区间最大值，区间最小值，或者区间异或值的查询。</p><p>主要操作：区间查询、点更新、区间更新</p><p>例如：</p><ul><li>给定s和t，求其区间上的最小值</li><li>给定i和x，把ai的值改成x</li></ul><p>更新和区间查询的复杂度都是 <strong>O(log(N))</strong></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>build, update(内含push_down), query</p></blockquote><h3 id="建树-build"><a href="#建树-build" class="headerlink" title="建树 (build)"></a>建树 (build)</h3><p>线段树是一棵平衡二叉树，每个节点都对应一条线段(区间)，反之不成立，每个节点 $p$ 的左右子节点的编号分别为 $2p$ 和 $2p+1$ ，假如节点 $p$ 储存区间 $[a,b]$ 的和，设 $mid=[\frac{l+r}{2}]$，那么两个子节点分别储存 $[l,mid]$ 和 $[mid+1,r]$ 的和。可以发现，左节点对应的区间长度，与右节点相同或者比之恰好多 $1$。</p><p>故建树可考虑递归进行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll l = <span class="hljs-number">1</span>, ll r = n, ll p = <span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-comment">// 到达叶子节点</span><br>        tree[p]=A[l]; <span class="hljs-comment">// 用数组中的数据赋值</span><br>    <span class="hljs-keyword">else</span>&#123;<br>        ll mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">build</span>(l, mid, p * <span class="hljs-number">2</span>); <span class="hljs-comment">// 先建立左右子节点</span><br>        <span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r, p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>        tree[p] = tree[p * <span class="hljs-number">2</span>] + tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]; <span class="hljs-comment">// 该节点的值等于左右子节点之和</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 这里👴偷了个 gif 来演示一下过程 (虽然大部分都是偷的🤡)</p><img src="https://pic4.zhimg.com/v2-c2d11b12c87b6a7076e3df0bb3585423_b.webp" alt="img" style="zoom:60%;" /><h3 id="区间修改-update"><a href="#区间修改-update" class="headerlink" title="区间修改(update)"></a>区间修改(update)</h3><p>首先定义”<strong>懒标记</strong>“(即“延迟标记”) <code>mark[]</code>：</p><p>对于区间修改，朴素的想法是用<strong>递归</strong>的方式一层层修改（类似于线段树的建立），但这样的时间复杂度比较高。使用懒标记后，对于那些正好是线段树节点的区间，我们不继续递归下去，而是打上一个<strong>标记</strong>，将来要用到它的<strong>子区间</strong>的时候，再向下<strong>传递</strong></p><p>直接上🐴 (非最简):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(ll l, ll r, ll d, ll p = <span class="hljs-number">1</span>, ll cl = <span class="hljs-number">1</span>, ll cr = n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &gt; r || cr &lt; l) <span class="hljs-comment">// 区间无交集</span><br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 剪枝</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cl &gt;= l &amp;&amp; cr &lt;= r) <span class="hljs-comment">// 当前节点对应的区间包含在目标区间中</span><br>    &#123;<br>        tree[p] += (cr - cl + <span class="hljs-number">1</span>) * d; <span class="hljs-comment">// 更新当前区间的值</span><br>        <span class="hljs-keyword">if</span> (cr &gt; cl) <span class="hljs-comment">// 如果不是叶子节点</span><br>            mark[p] += d; <span class="hljs-comment">// 给当前区间打上标记</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// 与目标区间有交集，但不包含于其中</span><br>    &#123;<br>        ll mid = (cl + cr) / <span class="hljs-number">2</span>;<br>        mark[p * <span class="hljs-number">2</span>] += mark[p]; <span class="hljs-comment">// 标记向下传递</span><br>        mark[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p];<br>        tree[p * <span class="hljs-number">2</span>] += mark[p] * (mid - cl + <span class="hljs-number">1</span>); <span class="hljs-comment">// 往下更新一层</span><br>        tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p] * (cr - mid);<br>        mark[p] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 清除标记</span><br>        <span class="hljs-built_in">update</span>(l, r, d, p * <span class="hljs-number">2</span>, cl, mid); <span class="hljs-comment">// 递归地往下寻找</span><br>        <span class="hljs-built_in">update</span>(l, r, d, p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>        tree[p] = tree[p * <span class="hljs-number">2</span>] + tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]; <span class="hljs-comment">// 根据子节点更新当前节点的值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>更新时，我们是从最大的区间开始，递归向下处理。注意到，<strong>任何区间都是线段树上某些节点的并集</strong>。于是我们记目标区间为 $[l,r] $，当前区间为 $[cl,cr]$ ， 当前节点为 $p$ ，我们会遇到三种情况：</p><ol><li><p>当前区间与目标区间没有交集：</p><p>直接结束递归</p></li><li><p>当前区间被包括在目标区间里：</p><p>可以更新区间，不能忘记乘上区间长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">tree[p] += (cr - cl + <span class="hljs-number">1</span>) * d;<br></code></pre></td></tr></table></figure><p>然后打上懒标记（叶子节点可以不打标记，因为不会再向下传递了）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">mark[p] += d;<span class="hljs-comment">//表示“该区间上每一个点都要加上d”。因为原来可能存在标记，所以是+=而不是=</span><br></code></pre></td></tr></table></figure></li><li><p>当前区间与目标区间相交，但不包含于其中:</p><p>这时把当前区间一分为二，分别进行处理。如果存在懒标记，要先把懒标记传递给子节点（注意也是+=，因为原来可能存在懒标记)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">ll mid = (cl + cr) / <span class="hljs-number">2</span>;<br>mark[p * <span class="hljs-number">2</span>] += mark[p];<br>mark[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p];<br></code></pre></td></tr></table></figure><p>两个子节点的值也就需要相应的更新（后面乘的是区间长度) :[p * 2] += mark[p] * (mid - cl + 1);</p><p>tree[p * 2 + 1] += mark[p] * (cr - mid);</p><p>不要忘记清除该节点的懒标记：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">mark[p]=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>因为贵标记和👴一样是个懒蛋，只往下传递一层，所以这个过程并不是递归的，以后要用再才继续传递。其实我们常常把这个传递过程封装成一个函数<strong>扑屎裆</strong> :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(ll p, ll len)</span></span>&#123;<br>    mark[p * <span class="hljs-number">2</span>] += mark[p];<br>    mark[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p];<br>    tree[p * <span class="hljs-number">2</span>] += mark[p] * (len - len / <span class="hljs-number">2</span>);<br>    tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p] * (len / <span class="hljs-number">2</span>); <span class="hljs-comment">// 右边的区间可能要短一点</span><br>    mark[p] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//这样儿 update() 里面调用的时候直接 push_down(p, cr - cl + 1); 就彳亍</span><br></code></pre></td></tr></table></figure><p>传递完标记后，再递归地去处理左右两个子节点就彳亍乐</p></li></ol><p>下面儿👴又偷了个视频展示一下区间 $[1,4]$ 加上 $1$ 的过程：</p><p><video width=70% src="https://vdn1.vzuu.com/SD/534181e0-23ad-11eb-905e-ca0d7949bec0.mp4?disable_local_cache=1&auth_key=1628242679-0-0-804945d6146979c7aa1236d8806960d8&f=mp4&bu=pico&expiration=1628242679&v=hw"></video></p><p>至于单点修改，只需要令左右端点相等即可~</p><h3 id="区间查询-query"><a href="#区间查询-query" class="headerlink" title="区间查询(query)"></a>区间查询(query)</h3><p>还就那个直接上🐴</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll l, ll r, ll p = <span class="hljs-number">1</span>, ll cl = <span class="hljs-number">1</span>, ll cr = n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &gt; r || cr &lt; l)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cl &gt;= l &amp;&amp; cr &lt;= r)<br>        <span class="hljs-keyword">return</span> tree[p];<br>    <span class="hljs-keyword">else</span>&#123;<br>        ll mid = (cl + cr) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push_down</span>(p, cr - cl + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(l, r, p * <span class="hljs-number">2</span>, cl, mid) + <span class="hljs-built_in">query</span>(l, r, p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr); <br>        <span class="hljs-comment">// 上一行拆成三行写就和区间修改格式一致了</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一样的递归，一样自顶至底地寻找，一样的合并信息，即插即用😍</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><blockquote><p>source : <strong>洛谷P3372 【模板】线段树 1</strong></p><p><strong>题目描述</strong><br>如题，已知一个数列，你需要进行下面两种操作：<br>1.将某区间每一个数加上x<br>2.求出某区间每一个数的和<br><strong>输入格式</strong><br>第一行包含两个整数N、M，分别表示该数列数字的个数和操作的总个数。<br>第二行包含N个用空格分隔的整数，其中第i个数字表示数列第i项的初始值。<br>接下来M行每行包含3或4个整数，表示一个操作，具体如下：<br>操作1： 格式：1 x y k 含义：将区间[x,y]内每个数加上k<br>操作2： 格式：2 x y 含义：输出区间[x,y]内每个数的和<br><strong>输出格式</strong><br>输出包含若干行整数，即为所有操作2的结果。</p></blockquote><hr><p>tips: 本模板分为龙鸣版和贵族版</p><h3 id="龙鸣version"><a href="#龙鸣version" class="headerlink" title="龙鸣version"></a>龙鸣version</h3><blockquote><p>(此龙鸣非彼龙鸣，意为把上面的龙鸣🐴整合起来):</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 100005</span><br>ll n, m, A[MAXN], tree[MAXN * <span class="hljs-number">4</span>], mark[MAXN * <span class="hljs-number">4</span>]; <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(ll p, ll len)</span></span>&#123;<br>    mark[p * <span class="hljs-number">2</span>] += mark[p];<br>    mark[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p];<br>    tree[p * <span class="hljs-number">2</span>] += mark[p] * (len - len / <span class="hljs-number">2</span>);<br>    tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p] * (len / <span class="hljs-number">2</span>);<br>    mark[p] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll l = <span class="hljs-number">1</span>, ll r = n, ll p = <span class="hljs-number">1</span>)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r)<br>        tree[p] = A[l];<br>    <span class="hljs-keyword">else</span>&#123;<br>        ll mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">build</span>(l, mid, p * <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r, p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>        tree[p] = tree[p * <span class="hljs-number">2</span>] + tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(ll l, ll r, ll d, ll p = <span class="hljs-number">1</span>, ll cl = <span class="hljs-number">1</span>, ll cr = n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &gt; r || cr &lt; l)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cl &gt;= l &amp;&amp; cr &lt;= r)&#123;<br>        tree[p] += (cr - cl + <span class="hljs-number">1</span>) * d;<br>        <span class="hljs-keyword">if</span> (cr &gt; cl)<br>            mark[p] += d;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        ll mid = (cl + cr) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push_down</span>(p, cr - cl + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">update</span>(l, r, d, p * <span class="hljs-number">2</span>, cl, mid);<br>        <span class="hljs-built_in">update</span>(l, r, d, p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>        tree[p] = tree[p * <span class="hljs-number">2</span>] + tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll l, ll r, ll p = <span class="hljs-number">1</span>, ll cl = <span class="hljs-number">1</span>, ll cr = n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &gt; r || cr &lt; l)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cl &gt;= l &amp;&amp; cr &lt;= r)<br>        <span class="hljs-keyword">return</span> tree[p];<br>    <span class="hljs-keyword">else</span>&#123;<br>        ll mid = (cl + cr) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push_down</span>(p, cr - cl + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(l, r, p * <span class="hljs-number">2</span>, cl, mid) + <span class="hljs-built_in">query</span>(l, r, p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        A[i] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">build</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)&#123;<br>        ll opr = <span class="hljs-built_in">read</span>(), l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (opr == <span class="hljs-number">1</span>)&#123;<br>            ll d = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">update</span>(l, r, d);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(l, r));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="贵族version"><a href="#贵族version" class="headerlink" title="贵族version"></a>贵族version</h3><blockquote><p><del>豪华升级plus</del>，本来想加个乘除的发现板子不兼容，👴是懒狗</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br>ll tree[MAXN &lt;&lt; <span class="hljs-number">2</span>], mark[MAXN &lt;&lt; <span class="hljs-number">2</span>], n, m, A[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> len)</span></span>&#123;<br>    tree[p &lt;&lt; <span class="hljs-number">1</span>] += mark[p] * (len - len / <span class="hljs-number">2</span>);<br>    mark[p &lt;&lt; <span class="hljs-number">1</span>] += mark[p];<br>    tree[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] += mark[p] * (len / <span class="hljs-number">2</span>);<br>    mark[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] += mark[p];<br>    mark[p] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> cl = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> cr = n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl == cr) &#123; tree[p] = A[cl]; <span class="hljs-keyword">return</span>; &#125;<br>    <span class="hljs-keyword">int</span> mid = (cl + cr) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    tree[p] = tree[p &lt;&lt; <span class="hljs-number">1</span>] + tree[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> cl = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> cr = n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &gt;= l &amp;&amp; cr &lt;= r) <span class="hljs-keyword">return</span> tree[p];<br>    <span class="hljs-built_in">push_down</span>(p, cr - cl + <span class="hljs-number">1</span>);<br>    ll mid = (cl + cr) &gt;&gt; <span class="hljs-number">1</span>, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (mid &gt;= l) ans += <span class="hljs-built_in">query</span>(l, r, p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-keyword">if</span> (mid &lt; r) ans += <span class="hljs-built_in">query</span>(l, r, p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;   <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> d, <span class="hljs-keyword">int</span> p = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> cl = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> cr = n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &gt;= l &amp;&amp; cr &lt;= r) &#123; tree[p] += d * (cr - cl + <span class="hljs-number">1</span>), mark[p] += d; <span class="hljs-keyword">return</span>; &#125;<br>    <span class="hljs-built_in">push_down</span>(p, cr - cl + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> mid = (cl + cr) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (mid &gt;= l) <span class="hljs-built_in">update</span>(l, r, d, p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-keyword">if</span> (mid &lt; r) <span class="hljs-built_in">update</span>(l, r, d, p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    tree[p] = tree[p &lt;&lt; <span class="hljs-number">1</span>] + tree[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常见模型"><a href="#常见模型" class="headerlink" title="常见模型"></a>常见模型</h2><p>步骤：</p><ol><li>将问题转化成点信息和目标信息</li><li>将目标信息根据需要扩充成区间信息<ul><li>增加信息符合区间加法</li><li>增加标记支持区间操作</li></ul></li><li>代码中的主要模块：区间加法，标记下推，点信息-&gt;区间信息，各种操作(修改、查询…)</li></ol><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><blockquote><p>URAL1989 Subpalindromes  <a href="https://blog.csdn.net/zearot/article/details/38921403">题解</a></p><p>给定一个字符串(长度&lt;=100000)，有两个操作。  1：改变某个字符。 2：判断某个子串是否构成回文串</p></blockquote><p>分析：</p><p>直接判断会超时，此处用 <strong>线段树维护字符串哈希</strong></p><p>对于一个字符串$a[0],a[1],…,a[n-1] $它对应的哈希函数为$a[0]+a[1]*K + a[2]*K^2 +…+a[n-1]*K^{n-1}$</p><p>再维护一个从右往左的哈希值：</p><p>$a[0]*K^{n-1} + a[1]*K^{n-2} +…+a[n-1]$</p><p><strong>若是回文串，则左右的哈希值会相等。而左右哈希值相等，则很大可能这是回文串。</strong></p><p>若出现误判，可以再用一个K2，进行二次哈希判断，可以减小误判概率。实现上，哈希值最好对某个质数取余数，这样分布更均匀。</p><p>解题模型：</p><ul><li>目标信息：某个区间的左，右哈希值</li><li>点信息：一个字符</li></ul><p>目标信息已经符合区间加法，所以<strong>区间信息=目标信息</strong></p><p>故线段树结构：</p><ul><li><p><strong>区间信息</strong>：区间哈希值</p></li><li><p><strong>点信息</strong>：一个字符</p></li></ul><p>核心：就是找到<strong>区间信息</strong>， 写好<strong>区间加法</strong></p><h3 id="最长连续零"><a href="#最长连续零" class="headerlink" title="最长连续零"></a>最长连续零</h3><blockquote><p>Codeforces 527C Glass Carving <a href="https://blog.csdn.net/zearot/article/details/44759437">题解</a></p><p>给定一个矩形，不停地纵向/横向切割，问每次切割后，最大的矩形面积是多少</p></blockquote><p>分析：</p><p>最大矩形面积=最长的长*最宽的宽</p><p>长宽范围均为1e5，故用01序列表示每个点是否被切割</p><p>最长的长就是长的最长连续0的数量+1，宽同理，于是可用用线段树维护最长连续零</p><p>解题模型：</p><ul><li>目标信息：区间最长连续零的个数</li><li>点信息：0或1</li></ul><p>由于目标信息不符合区间加法，所以要扩充目标信息</p><p>故线段树结构：</p><ul><li><strong>区间信息</strong>：从左，右开始的最长连续零，本区间是否全零，本区间最长连续零</li><li><strong>点信息</strong>：0或1</li></ul><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><blockquote><p>Codeforces 558E A Simple Task <a href="https://blog.csdn.net/zearot/article/details/48048559">题解</a></p><p>给定一个长度不超过1e5的字符串（小写英文字母），和不超过5000个操作，每个操作 L R K 表示给区间[L,R]的字符串排序，K=1为升序，K=0为降序。 最后输出最终的字符串</p></blockquote><p>解题模型：</p><ul><li>目标信息：区间的计数排序结果</li><li>点信息：一个字符</li></ul><p>目标信息是符合区间加法的，但是为了支持区间操作，还是需要扩充信息</p><p>故线段树结构：</p><ul><li><strong>目标信息</strong>：区间的计数排序结果，排序标记，排序种类（升降）</li><li><strong>点信息</strong>：一个字符</li></ul><blockquote><p>To be continued…</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ALGORITHMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>note</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博弈论</title>
    <link href="/2021/07/31/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    <url>/2021/07/31/%E5%8D%9A%E5%BC%88%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h1><p>Game Theory</p><hr><h2 id="Nim游戏"><a href="#Nim游戏" class="headerlink" title="Nim游戏"></a>Nim游戏</h2><p>属于 ICG (Impartial Combinatorial Games) 的一种，满足条件如下：</p><ul><li>两名选手交替移动，在有限的合法移动集合中任选一种进行移动</li><li>对于任何一种局面，合法的移动集合只取决于局面本身</li><li>到谁无法移动谁就输了</li></ul><p>以下给出 P/N 的定义：</p><ul><li>P-Position：先手必败点 (Previous)</li><li>N-Position：先手必胜点 (Next)</li><li>可知所有终结点都是P点，一步就<strong>能</strong>到P点的一定是N点，通过一步<strong>只能</strong>到N点的一定是P点</li></ul><p>下面来说说Nim游戏：“有若干堆石子，每堆石子的数量有限，合法的移动是“选择一堆石子并拿走若干颗（不能不拿）”，如果轮到某个人时所有的石子堆都已经被拿空了，则判负（因为没有任何合法的移动）“，简单来想，我们可以想到一个递归的算法：对于当前的局面，递归计算它的所有子局面的性质，如果存在某个子局面是P，那么向这个子局面的移动就是必胜策略。这其中有大量的重叠子问题，所以可以用DP或者记忆化搜索的方法以提高效率。</p><p>但是👴们已经有了一个nb的结论：</p><p><strong>对于一个Nim游戏的局面(a1,a2,…,an)，它是P-position当且仅当a1^a2^…^an=0，其中^表示异或(xor)运算</strong></p><p>根据这个定理，我们可以在O(n)的时间内判断一个Nim的局面的性质，且如果它是N-position，也可以在O(n)的时间内找到所有的必胜策略。Nim问题就这样基本上完美的解决了。</p><hr><h2 id="Sprague-Grundy函数"><a href="#Sprague-Grundy函数" class="headerlink" title="Sprague-Grundy函数"></a>Sprague-Grundy函数</h2><p>ICG的抽象模型：给定一个有向无环图和一个起始顶点上的一枚棋子，两名选手交替的将这枚棋子沿有向边进行移动，无法移动者判负</p><p>首先定义mex(minimal excludnt) 运算：</p><p>施加于集合，表示<strong>最小</strong>的<strong>不属于</strong>这个集合的<strong>非负整数</strong>，exp: mex{0,1,2,4}=3、mex{2,3,5}=0、mex{}=0。</p><p>下面给出SG函数的定义：</p><p>对于一个给定的<strong>有向无环图</strong>，定义关于图的每个顶点的Sprague-Garundy函数如下：sg(x)=mex{ sg(y) | y是x的<strong>后继</strong> }。</p><p>结论：当SG[x] = 0时，x为必败状态；当SG[x] &gt; 0时，x为必胜状态</p><p>所以从1~n的SG函数值应该如何计算呢？</p><ol><li>使用 数组 f[ ] 将可改变当前状态 的方式记录下来</li><li>然后我们使用 另一个数组 S[ ] 将当前状态x 的后继状态标记</li><li>模拟mex运算，也就是我们在标记值中 搜索 <strong>未被标记值</strong> 的最小值，将其赋值给SG(x)</li><li>不断重复 2-3 的步骤，即完成计算 1-n 的SG函数值</li></ol><p><strong>SG定理</strong>：<strong>SG(G)=SG(G1)^SG(G2)^…^SG(Gn)<strong>，原游戏的SG函数值是它的所有子游戏的SG函数值的</strong>异或</strong></p><hr><h2 id="解题模型"><a href="#解题模型" class="headerlink" title="解题模型"></a>解题模型</h2><ol><li><p>把原游戏分解成多个独立的子游戏，则原游戏的SG函数值就变为<strong>SG(G)=SG(G1)^SG(G2)^…^Sg(Gn)</strong></p></li><li><p>分别考虑每一个子游戏，计算其SG值</p><p><strong>SG值的计算方法</strong>（important）：</p><p>​    a. <strong>可选步数为1~m的连续整数，直接取模即可，SG(x) = x % (m+1)</strong> <strong>（Bash game）</strong></p><p>​    b. <strong>可选步数为任意步，SG(x) = x（Nim game）</strong></p><p>​    c. <strong>可选步数为一系列不连续的数，用模板计算</strong></p></li></ol><h2 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h2><blockquote><p>首选打表预处理，打表没法使的时候就怼dfs</p></blockquote><h3 id="☆打表"><a href="#☆打表" class="headerlink" title="☆打表"></a>☆打表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//打表</span><br><span class="hljs-keyword">int</span> f[N],SG[MAXN],S[MAXN]; <span class="hljs-comment">// f[] 可改变当前状态的方式(可取走石子个数)   S[] 当前状态的后继状态集合</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getSG</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br><span class="hljs-built_in">memset</span>(SG,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(SG));<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123; <br><span class="hljs-built_in">memset</span>(S,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(S));<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; f[j]&lt;=i &amp;&amp; j&lt;=N;j++)<br>S[SG[i-f[j]]]=<span class="hljs-number">1</span>; <span class="hljs-comment">//S[]数组来保存当前状态的后继状态集合</span><br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=n;j++)&#123; <br>        <span class="hljs-keyword">if</span>(!S[j])&#123;<span class="hljs-comment">//模拟mex运算</span><br>SG[i]=j;<br><span class="hljs-keyword">break</span>;<br>            &#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="深搜"><a href="#深搜" class="headerlink" title="深搜"></a>深搜</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//注意 f数组要按从小到大排序 SG函数要初始化为-1 对于每个集合只需初始化1遍</span><br><span class="hljs-comment">//n是集合f的大小 f[i]是定义的特殊取法规则的数组</span><br><span class="hljs-keyword">int</span> f[<span class="hljs-number">110</span>],SG[<span class="hljs-number">10010</span>],n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">SG_dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">if</span>(SG[x]!=<span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> SG[x];<br>    <span class="hljs-keyword">bool</span> vis[<span class="hljs-number">110</span>];<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(x&gt;=f[i])&#123;<br>            <span class="hljs-built_in">SG_dfs</span>(x-f[i]);<br>            vis[SG[x-f[i]]]=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> e;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;;i++)<br>        <span class="hljs-keyword">if</span>(!vis[i])&#123;<br>            e=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    <span class="hljs-keyword">return</span> SG[x]=e;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="常见博弈"><a href="#常见博弈" class="headerlink" title="常见博弈"></a>常见博弈</h2><h3 id="Bash-Game"><a href="#Bash-Game" class="headerlink" title="Bash Game"></a>Bash Game</h3><p>只有一堆n个物品，两个人轮流取物，每次至少取一个，最多取m个。最后取光者得胜（谁拿了最后一个谁赢）</p><p>结论：最优选择为保持给对手留下 <strong>m+1</strong> 的倍数</p><ul><li><p>if(n%(m+1) != 0)  则先手必赢 </p></li><li><p>if(n%(m+1) == 0)  则后手必赢</p></li></ul><h3 id="Wythoff-Game"><a href="#Wythoff-Game" class="headerlink" title="Wythoff Game"></a>Wythoff Game</h3><blockquote><p>各位👴属实🐮，黄金分割数（1+√5）/2 = 1.618 都给整上了</p></blockquote><p>有两堆各若干个物品，两个人轮流从某一堆取物或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜</p><p>这里用（ak，bk）（ak ≤ bk ,k=0，1，2，…,n)表示两堆物品的数量并称其为<strong>局势</strong></p><p>由ak，bk组成的矩形近似为黄金矩形</p><p>结论：</p><ul><li><p>(int)((bk-ak)*(1+sqrt(5.0))/2) != ak ,  先手必赢</p></li><li><p>(int)((bk-ak)*(1+sqrt(5.0))/2) == ak , 后手必赢</p></li></ul><h3 id="Nim-Game"><a href="#Nim-Game" class="headerlink" title="Nim Game"></a>Nim Game</h3><p>若干堆石子，每堆石子的数量有限，两个人可以选择一堆石子并拿走若干颗</p><p>结论：xor 略</p><h3 id="Fibonacci-Nim"><a href="#Fibonacci-Nim" class="headerlink" title="Fibonacci Nim"></a>Fibonacci Nim</h3><p>有一堆个数为n的石子，游戏双方轮流取石子，满足: (1)先手不能在第一次把所有的石子取完 (2)每次可以取的石子数介于1到对手刚取的石子数的2倍之间(包含)  (3) 取走最后一个石子的人为赢家</p><p>结论：<strong>当n为Fibonacci数的时候，必败</strong></p><p>f[i]：1,2,3,5,8,13,21,34,55,89……</p>]]></content>
    
    
    <categories>
      
      <category>ALGORITHMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>note</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql学习笔记</title>
    <link href="/2021/07/29/sql/"/>
    <url>/2021/07/29/sql/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>结构化查询语言-Structured Query Language</p><p><em><strong>@author：Maskros</strong></em></p><hr><h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><p>类型</p><ul><li>字符型<ul><li>VARCHAR型和CHAR型</li></ul></li><li>文本型<ul><li>TEXT</li></ul></li><li>数值型<ul><li>整数INT 、小数NUMERIC、钱数MONEY)</li></ul></li><li>逻辑型<ul><li>BIT</li></ul></li><li>日期型<ul><li>DATETIME </li></ul></li></ul><hr><h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><p>操作</p><p>增删改查 CURD</p><p>tips : 不区分大小写，列名表名前``可以省略</p><h3 id="SELECT-FROM"><a href="#SELECT-FROM" class="headerlink" title="SELECT(FROM)"></a>SELECT(FROM)</h3><ul><li>SELECT COLUMN 查询单个列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name`<br><span class="hljs-keyword">FROM</span> `table_name`;<br></code></pre></td></tr></table></figure><ul><li>SELECT COLUMN, COLUMN 查询多个列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name_1`, `column_name_2`  <br><span class="hljs-keyword">FROM</span> `table_name`;<br></code></pre></td></tr></table></figure><ul><li>使用 SELECT * 查询所有列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `table_name`;<br></code></pre></td></tr></table></figure><ul><li>使用 SELECT DISTINCT 查询不同行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> `column_name`<br><span class="hljs-keyword">FROM</span> `table_name`<br></code></pre></td></tr></table></figure><p>​    希望查询的值都是唯一不重复的</p><ul><li>SELECT WHERE 对行进行筛选过滤</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name1`,`column_name2`…<br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` operator `<span class="hljs-keyword">value</span>`;<br></code></pre></td></tr></table></figure><h3 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT(INTO)"></a>INSERT(INTO)</h3><ul><li>INSERT INTO 在不指定列的情况下插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `table_name`<br><span class="hljs-keyword">VALUES</span> (value1, value2, value3,...);<br># <span class="hljs-string">&#x27;value&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>INSERT INTO 在指定的列中插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `table_name`<br>(`column1`, `column2`, `column3`,...)<br><span class="hljs-keyword">VALUES</span> (value1, value2, value3,...);<br></code></pre></td></tr></table></figure><h3 id="UPDATE-SET"><a href="#UPDATE-SET" class="headerlink" title="UPDATE(SET)"></a>UPDATE(SET)</h3><ul><li>UPDATE 更新数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE `table_name`<br><span class="hljs-keyword">SET</span> `column1`<span class="hljs-operator">=</span>value1,`column2`<span class="hljs-operator">=</span>value2,...<br><span class="hljs-keyword">WHERE</span> `some_column`<span class="hljs-operator">=</span>some_value;<br># <span class="hljs-keyword">WHERE</span> 可以省略<br></code></pre></td></tr></table></figure><h3 id="DELETE-FROM"><a href="#DELETE-FROM" class="headerlink" title="DELETE(FROM)"></a>DELETE(FROM)</h3><ul><li>DELETE 删除数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `some_column` <span class="hljs-operator">=</span> `some_value`;<br></code></pre></td></tr></table></figure><ul><li>TRUNCATE TABLE 清空表</li></ul><hr><h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p>条件</p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">WHERE</span> A OPERATOR B<br></code></pre></td></tr></table></figure><ul><li>tips:  <code>&lt;&gt;</code> , <code>!=</code> 均为不等于，但用法不同</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>AND 连接多条件</p></li><li><p>OR 连接多条件</p></li><li><p>NOT 过滤不满足条件的数据</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name` <br><span class="hljs-keyword">FROM</span> `table_name` <br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> `<span class="hljs-keyword">condition</span>`;<br># (condition1 operator condition2)<br></code></pre></td></tr></table></figure><h3 id="特殊条件"><a href="#特殊条件" class="headerlink" title="特殊条件"></a>特殊条件</h3><ul><li>IN 查询多条件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Where</span> `column_name1` <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">condition</span>)<br># <span class="hljs-keyword">condition</span> 中也可以写<br><span class="hljs-keyword">IN</span> (<span class="hljs-keyword">select</span> `column_name1` xxxxxxxx)<br></code></pre></td></tr></table></figure><ul><li>NOT IN 排除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` (<span class="hljs-keyword">NOT</span>) <span class="hljs-keyword">IN</span> `<span class="hljs-keyword">value</span>`;<br># （value1, value2）<br></code></pre></td></tr></table></figure><ul><li>BETWEEN AND 查询两值间的数据范围</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` <span class="hljs-keyword">BETWEEN</span> `<span class="hljs-keyword">value</span>` <span class="hljs-keyword">AND</span> `<span class="hljs-keyword">value</span>`;<br></code></pre></td></tr></table></figure><ul><li>IS NULL 查询空数据</li><li>使用 LIKE 模糊查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` <span class="hljs-keyword">LIKE</span> `<span class="hljs-keyword">value</span>`;<br># <span class="hljs-keyword">LIKE</span> `D<span class="hljs-operator">%</span>`<br># <span class="hljs-string">&#x27;D%&#x27;</span> 表示以D开头的所有单词，<span class="hljs-operator">%</span> 表示为通配符，可以替代<span class="hljs-number">0</span><span class="hljs-operator">~</span>n个字符<br></code></pre></td></tr></table></figure><h3 id="ORDER-BY-amp-LIMIT"><a href="#ORDER-BY-amp-LIMIT" class="headerlink" title="ORDER BY &amp; LIMIT"></a>ORDER BY &amp; LIMIT</h3><ul><li><p>ORDER BY 对数据进行排序（一列/多列(多列按SELECT顺序)）</p><p>ASC (ascend)升序(默认)  |  DESC(descend) 降序</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> `column_name`, `column_name`<br><span class="hljs-keyword">FROM</span> `table_name`<br># <span class="hljs-keyword">WHERE</span> XXXX<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `column_name`, `column_name` <span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>; <br></code></pre></td></tr></table></figure><ul><li><p>使用 LIMIT 限制输出行数</p><p>offset ：是返回集的初始标注，起始点是0</p><p>count ：制定返回的数量</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name`, `column_name`<br><span class="hljs-keyword">FROM</span> `table_name`<br># <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> XXXX<br>LIMIT `<span class="hljs-keyword">offset</span>` , `count`;<br># <span class="hljs-keyword">offset</span>和count通常只用一个count：LIMIT (<span class="hljs-number">0</span>,)<span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>函数</p><h3 id="算数函数"><a href="#算数函数" class="headerlink" title="算数函数"></a>算数函数</h3><ul><li>AVG() 函数求数值列的平均值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(`column_name`) # <span class="hljs-keyword">AS</span> `column2_name`<br><span class="hljs-keyword">FROM</span> `table_name`;<br></code></pre></td></tr></table></figure><ul><li><p>MAX() 函数返回指定列中的最大值</p></li><li><p>MIN() 函数返回指定列中的最小值</p></li><li><p>SUM() 函数统计数值列的总数</p></li><li><p>ROUND() 函数将数值四舍五入</p><ul><li>ROUND() 返回值数据类型会被变换为一个BIGINT 。</li><li>当 decimals 为正数时，column_name 四舍五入为 decimals 所指定的小数位数。省略decimals自动保留四舍五入后的整数。当 decimals 为负数时，column_name 则按 decimals 所指定的在小数点的左边四舍五入。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ROUND(`column_name`, `decimals`) <br><span class="hljs-keyword">FROM</span> `table_name`;<br>#decimals 规定要返回的小数位数<br></code></pre></td></tr></table></figure></li><li><p>NULL() 函数判断空值</p><ul><li><p>ISNULL()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ISNULL(`column_name`)<br><span class="hljs-keyword">FROM</span> `table_name`;<br># 返回 <span class="hljs-number">0</span> 或 <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>IFNULL()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> IFNULL(`column_name`, `<span class="hljs-keyword">value</span>`)<br><span class="hljs-keyword">FROM</span> `table_name`;<br># 是 <span class="hljs-keyword">NULL</span> 则返回 <span class="hljs-keyword">value</span> 值，不是则返回对应内容<br></code></pre></td></tr></table></figure></li></ul></li><li><p>COUNT() 函数计数</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-built_in">COUNT</span>(column_name) 对列具有的行数进行计数 除去值为 <span class="hljs-keyword">NULL</span> 的行<br># 主要用于查看各列数据的数量情况，便于统计数据的缺失值<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(`column_name`) <br><span class="hljs-keyword">FROM</span> `table_name`;<br># <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 对表中行的数目进行计数,包括 <span class="hljs-keyword">NULL</span> 所在行和重复项所在行<br># 主要用于查看表中的记录数<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <br><span class="hljs-keyword">FROM</span> `table_name`;<br># <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> column_name) 函数返回指定列的不同值的数目<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> `column_name`) <br><span class="hljs-keyword">FROM</span> `table_name`;<br></code></pre></td></tr></table></figure><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><ul><li><p>NOW()，CURDATE()、CURTIME() 获取当前时间</p><ul><li><code>NOW()</code> 返回当前日期和时间  YYYY-MM-DD hh:mm:ss</li><li><code>CURDATE()</code> 返回当前日期  YYYY-MM-DD</li><li><code>CURTIME()</code> 返回当前时间  hh:mm:ss</li><li>要精确的秒以后的时间的话，可以在 () 中加数字，加多少，就表示精确到秒后多少位</li></ul></li><li><p>DATE()、TIME() 函数提取日期和时间</p></li><li><p>EXTRACT() 函数提取指定的时间信息</p><ul><li><p>FROM</p></li><li><p>返回日期/时间的单独部分</p></li><li><p>unit :  <code>YEAR</code> (年)、<code>MONTH</code> (月)、<code>DAY</code> (日)、<code>HOUR</code> (小时)、<code>MINUTE</code> (分钟)、 <code>SECOND</code> (秒)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">EXTRACT</span>(unit <span class="hljs-keyword">FROM</span> <span class="hljs-type">date</span>) # unit 为单独部分名<br><span class="hljs-keyword">FROM</span> `<span class="hljs-keyword">table</span>`<br># <span class="hljs-type">date</span> <span class="hljs-operator">-</span> 合法<span class="hljs-keyword">column</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>DATE_FORMAT() 格式化输出日期</p><ul><li>%Y 年份 %m 月份 %d 日期 %w 星期 %H 小时  %i 分钟 %s 秒</li><li>小写y 表示年份后两位，小写h表示12小时计的小时</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATE_FORMAT(<span class="hljs-type">date</span>,<span class="hljs-string">&#x27;format&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>DATE_ADD() 增加时间</p><ul><li>INTERVAL</li><li>向日期添加指定的时间间隔</li><li> <code>expr</code> 是希望添加的时间间隔的数值</li><li>type :  MICROSECOND , SECOND , MINUTE , HOUR , DAY , WEEK , MONTH , QUARTER , YEAR</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATE_ADD(<span class="hljs-type">date</span>, <span class="hljs-type">INTERVAL</span> expr type)<br><span class="hljs-keyword">FROM</span> table_name<br></code></pre></td></tr></table></figure></li><li><p>DATE_SUB() 减少时间</p></li><li><p>DATEDIFF() 和 TIMESTAMPDIFF() 计算日期差</p><ul><li>时间1-时间2</li><li>DATEDIFF() 默认只能计算天数差</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> DATEDIFF(时间<span class="hljs-number">1</span>,时间<span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> date_diff <span class="hljs-keyword">FROM</span> courses;<br></code></pre></td></tr></table></figure><ul><li>TIMESTAMPDIFF() 计算相差年月周日时<ul><li>类型YEAR,MONTH,WEEK,DAY,HOUR</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> TIMESTAMPDIFF (类型,时间<span class="hljs-number">1</span>,时间<span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> year_diff；<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>约束</p><h3 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h3><p>非空约束</p><ul><li>强制列不接受 NULL 值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SQL"># 建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Persons` (<br>    `ID` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `LastName` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>);<br># 已建表<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br>MODIFY `Age` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br># 撤销<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br>MODIFY `Age` <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h3 id="UNIQUE"><a href="#UNIQUE" class="headerlink" title="UNIQUE"></a>UNIQUE</h3><p>唯一约束</p><ul><li>不希望出现重复记录</li><li>CONSTRAINT 命名</li><li>DROP 撤销</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 建表<br>## MySQL<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Persons`(<br>    `P_Id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> (`P_Id`)<br>)<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Persons`(<br>`P_Id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>)<br>## 命名<span class="hljs-operator">+</span>多列<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Persons`(<br>    `P_Id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `LastName` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">CONSTRAINT</span> uc_PersonID <span class="hljs-keyword">UNIQUE</span> (`P_Id`,`LastName`)<br>)<br><br># 已建<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span>（`P_Id`）<br>## 多列<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> uc_PersonID <span class="hljs-keyword">UNIQUE</span> (`P_Id`,`LastName`)<br><br># 撤销<br>## MySQL<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">DROP</span> INDEX uc_PersonID<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> uc_PersonID<br></code></pre></td></tr></table></figure><h3 id="PRIMARY-KEY"><a href="#PRIMARY-KEY" class="headerlink" title="PRIMARY KEY"></a>PRIMARY KEY</h3><p>主键约束</p><ul><li>简单的说，PRIMARY KEY = UNIQUE + NOT NULL </li><li>NOT NULL UNIQUE 可以将表的一列或多列定义为唯一性属性，而 PRIMARY KEY 设为多列时，仅能保证多列之和是唯一的，具体到某一列可能会重复。</li><li>PRIMARY KEY 可以与外键配合，从而形成主从表的关系</li><li>PRIMARY KEY 一般在逻辑设计中用作记录标识，这也是设置 PRIMARY KEY 的本来用意，而 UNIQUE 只是为了保证域/域组的唯一性</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 建表<br>## MySQL<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Persons(<br>    `P_Id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`P_Id`)<br>);<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Persons`(<br>    `P_Id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>)<br>## 命名<span class="hljs-operator">+</span>多列<br><span class="hljs-keyword">CONSTRAINT</span> pk_PersonID <span class="hljs-keyword">PRIMARY</span> KEY (`P_Id`,`LastName`)<br><br># 已建<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (`P_Id`)<br>## 多列<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> pk_PersonID <span class="hljs-keyword">PRIMARY</span> KEY (`P_Id`,`LastName`)<br><br># 撤销<br>## MySQL<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> pk_PersonID<br></code></pre></td></tr></table></figure><h3 id="FOREIGN-KEY"><a href="#FOREIGN-KEY" class="headerlink" title="FOREIGN KEY"></a>FOREIGN KEY</h3><p>外键约束 </p><ul><li>一个表中的 FOREIGN KEY 指向另一个表中的 UNIQUE KEY </li><li>保证数据的完整性和一致性</li><li>在两个表之间建立关系，需要指定引用主表的哪一列，REFERENCES 表示引用一个表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 建表<br>## MySQL<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Orders`(<br>    `P_Id` <span class="hljs-type">int</span>,<br>    <span class="hljs-keyword">FOREIGN</span> KEY (P_Id) <span class="hljs-keyword">REFERENCES</span> Persons(P_Id)<br>)<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Orders`(<br>    P_Id <span class="hljs-type">int</span> <span class="hljs-keyword">FOREIGN</span> KEY <span class="hljs-keyword">REFERENCES</span> Persons(P_Id)<br>)<br>## 命名<span class="hljs-operator">+</span>多列<br><span class="hljs-keyword">CONSTRAINT</span> fk_PerOrders <span class="hljs-keyword">FOREIGN</span> KEY (P_Id)<br><span class="hljs-keyword">REFERENCES</span> Persons(P_Id)<br><br># 已建<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Orders`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">FOREIGN</span> KEY (P_Id)<br><span class="hljs-keyword">REFERENCES</span> Persons(P_Id)<br>## 命名<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Orders`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> fk_PerOrders<br><span class="hljs-keyword">FOREIGN</span> KEY (P_Id)<br><span class="hljs-keyword">REFERENCES</span> Persons(P_Id)<br><br># 撤销<br>## MySQL<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Orders`<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> KEY fk_PerOrders<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Orders`<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> fk_PerOrders<br></code></pre></td></tr></table></figure><h3 id="CHECK"><a href="#CHECK" class="headerlink" title="CHECK"></a>CHECK</h3><p>检查约束 </p><ul><li>限制列中的值的范围，评估插入或修改后的值。满足条件插入，否不插</li><li>可以为同一列指定多个 CHECK 约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `courses`(<br>`student_count` <span class="hljs-type">int</span>, …<br><span class="hljs-keyword">CHECK</span> (Condition1 <span class="hljs-keyword">AND</span> Condition2)<br>)<br>## 命名<br><span class="hljs-keyword">CONSTRAINT</span> chk_courses <span class="hljs-keyword">CHECK</span> (`student_count` <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>);<br><br># 已建<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `courses` <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CHECK</span> ( `student_count` <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>);<br>## <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> XXX <span class="hljs-keyword">CHECK</span> (<span class="hljs-keyword">Condition</span>);<br><br># 撤销<br>## MySQL<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `courses` <br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CHECK</span> chk_courses<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `courses` <br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> chk_courses<br></code></pre></td></tr></table></figure><h3 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h3><p>默认约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">`City` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;Sandnes&#x27;</span><br>`OrderDate` <span class="hljs-type">date</span> <span class="hljs-keyword">DEFAULT</span> GETDATE()  # 可以用函数<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">ALTER</span> `City` <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;SANDNES&#x27;</span><br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> ab_c <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;SANDNES&#x27;</span> <span class="hljs-keyword">for</span> `City`<br><br><span class="hljs-keyword">ALTER</span> `City` <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DEFAULT</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> `City` <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DEFAULT</span><br></code></pre></td></tr></table></figure><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><p>多表联结</p><h3 id="联结"><a href="#联结" class="headerlink" title="联结"></a>联结</h3><ul><li><p>在一条 SELECT 语句中关联多个表，返回一组输出</p></li><li><p>两大主角 : 主键 (PRIMARY KEY) 和外键 (FOREIGN KEY)</p></li><li><p>使用完全限定列名（用一个点分隔表名和列名）</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">condition</span><br>`table1`.`common_field` <span class="hljs-operator">=</span> `table2`.`common_field`<br></code></pre></td></tr></table></figure><ul><li>JOIN 连接子句<ul><li><strong>INNER JOIN</strong> 内连接：如果表中有至少一个匹配，则返回行</li><li><strong>OUTER JOIN</strong> 外连接<ul><li><strong>LEFT JOIN</strong>：即使右表中没有匹配，也从左表返回所有的行</li><li><strong>RIGHT JOIN</strong>：即使左表中没有匹配，也从右表返回所有的行</li></ul></li><li><strong>FULL JOIN</strong> 全连接：只要其中一个表中存在匹配，则返回行</li><li><strong>CROSS JOIN</strong> 交叉连接：又称<strong>笛卡尔积</strong>，两个表数据一一对应，返回结果的行数等于两个表行数的乘积</li></ul></li></ul><h3 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h3><p>内连接 又称为EQUIJOIN 等值连接</p><ul><li>内连接就是取两个表的交集，返回的结果就是连接的两张表中都满足条件的部分</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `table1`.`column1`, `table2`.`column2`...<br><span class="hljs-keyword">FROM</span> `table1`<br>(<span class="hljs-keyword">INNER</span>) <span class="hljs-keyword">JOIN</span> `table2` # <span class="hljs-keyword">INNER</span> 可省略不写<br><span class="hljs-keyword">ON</span> `table1`.`common_field` <span class="hljs-operator">=</span> `table2`.`common_field`;<br># <span class="hljs-keyword">ON</span> <span class="hljs-keyword">CONDITION</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># exp<br><span class="hljs-keyword">SELECT</span> `c`.`id`, `c`.`name` <span class="hljs-keyword">AS</span> `course_name`, `t`.`name` <span class="hljs-keyword">AS</span> `teacher_email`<br><span class="hljs-keyword">FROM</span> `courses` `c`<br>    (<span class="hljs-keyword">INNER</span>) <span class="hljs-keyword">JOIN</span> `teachers` `t` <span class="hljs-keyword">ON</span> `c`.`teacher_id` <span class="hljs-operator">=</span> `t`.`id`;<br></code></pre></td></tr></table></figure><ul><li><code>courses</code> <code>c</code> 等同于 <code>courses</code> AS <code>c</code> ，给<code>courses</code> 表取别名为 <code>c</code></li></ul><h3 id="OUTER-JOIN"><a href="#OUTER-JOIN" class="headerlink" title="OUTER JOIN"></a>OUTER JOIN</h3><p>外连接 分为左外连接 右外连接 全外连接</p><ul><li>外连接可以将某个表格中，在另外一张表格中无对应关系，但是也能将数据匹配出来</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-number">1</span>,column_name <span class="hljs-number">2</span> ... column_name n<br>    <span class="hljs-keyword">FROM</span> table1<br>        <span class="hljs-keyword">LEFT</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">RIGHT</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">FULL</span>  (<span class="hljs-keyword">OUTER</span>) <span class="hljs-keyword">JOIN</span> table2<br>        <span class="hljs-keyword">ON</span> <span class="hljs-keyword">CONDITION</span>;<br></code></pre></td></tr></table></figure><ul><li>LEFT JOIN : 以左表为参考表，返回左表中的所有记录，加上右表中匹配到的记录</li><li>RIGHT JOIN :  以右表为参考表</li><li>FULL JOIN : 只要左表和右表其中一个表中存在匹配，则返回行</li></ul><blockquote><p>tips :  MySQL 数据库不支持全连接，想要实现全连接可以使用 UNION ALL 来将左连接和右连接结果组合在一起实现全连接</p></blockquote><ul><li>UNION :  联合，把两次或多次查询结果合并起来<ul><li>要求：两次查询的列数必须一致，同时，每条 SELECT 语句中的列的顺序必须相同</li><li>UNION 会去掉重复的行。 如果不想去掉重复的行，可以使用 UNION ALL </li><li>如果子句中有 order by , limit，需用括号()包起来。推荐放到所有子句之后，即对最终合并的结果来排序或筛选</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-number">1</span>,column_name <span class="hljs-number">2</span> ... column_name n<br>    <span class="hljs-keyword">FROM</span> table1<br>        <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> table2 <span class="hljs-keyword">ON</span> <span class="hljs-keyword">CONDITION</span> <br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-number">1</span>,column_name <span class="hljs-number">2</span> ... column_name n<br>    <span class="hljs-keyword">FROM</span> table1<br>        <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> table2 <span class="hljs-keyword">ON</span> <span class="hljs-keyword">CONDITION</span> ;<br></code></pre></td></tr></table></figure><h3 id="CROSS-JOIN"><a href="#CROSS-JOIN" class="headerlink" title="CROSS JOIN"></a>CROSS JOIN</h3><p>交叉连接 结果也称作笛卡尔积</p><ul><li>返回左表中的所有行，左表中的每一行与右表中的所有行组合。即将两个表的数据一一对应，其查询结果的行数为左表中的行数乘以右表中的行数。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 隐式连接 不需要使用 <span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> 关键字<br><span class="hljs-keyword">SELECT</span> `table1`.`column1`, `table2`.`column2`...<br><span class="hljs-keyword">FROM</span> `table1`,`table2`;<br># 显式连接<br><span class="hljs-keyword">SELECT</span> `table1`.`column1`, `table2`.`column2`...<br><span class="hljs-keyword">FROM</span> `table1`<br><span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> `table2`;<br></code></pre></td></tr></table></figure><ul><li>通过增加联结条件，使用 WHERE 子句帮助筛选过滤无效的数据</li></ul><hr><h2 id="Advanced-Select"><a href="#Advanced-Select" class="headerlink" title="Advanced Select"></a>Advanced Select</h2><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><ul><li><p>GROUP BY 子句</p><ul><li>对同类的数据进行分类</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name`, aggregate_function(`column_name`)<br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` operator <span class="hljs-keyword">value</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `column_name`;<br></code></pre></td></tr></table></figure></li><li><p>HAVING 子句</p><ul><li>使用 WHERE 条件子句时不能与聚合函数联合使用</li><li> HAVING 子句经常与 GROUP BY 联合使用，HAVING 子句就是对分组统计函数进行过滤的子句</li><li>HAVING 子句对于 GROUP BY 子句设置条件的方式其实与 WHERE 子句与 SELECT 的方式类似，语法相近，但 WHERE 子句搜索条件是在分组操作之前，而 HAVING 则是在之后</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>   `column_name`, aggregate_function(`column_name`) <br><span class="hljs-keyword">FROM</span>     `table_name` <br><span class="hljs-keyword">WHERE</span>    `column_name` operator <span class="hljs-keyword">value</span> <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `column_name` <br><span class="hljs-keyword">HAVING</span>   aggregate_function(`column_name`) operator <span class="hljs-keyword">value</span>;<br></code></pre></td></tr></table></figure><ul><li>ex: 查询教师表 teachers计算不同国籍教师的平均年龄和所有教师的平均年龄，比较两者的大小，最后返回大于所有教师平均年龄的不同国籍下的全部教师信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 子查询<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> teachers <br>    <span class="hljs-keyword">WHERE</span> country <span class="hljs-keyword">IN</span><br>        (<span class="hljs-keyword">SELECT</span> country <span class="hljs-keyword">FROM</span> teachers <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> country<br>            <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">AVG</span>(age) <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(age) <span class="hljs-keyword">FROM</span> teachers))<br></code></pre></td></tr></table></figure></li></ul><h3 id="子查询-Base"><a href="#子查询-Base" class="headerlink" title="子查询(Base)"></a>子查询(Base)</h3><ul><li>SELECT 语句中的子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name(s)`<br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` OPERATOR (<br>    <span class="hljs-keyword">SELECT</span> `column_name(s)`<br>    <span class="hljs-keyword">FROM</span> `table_name`<br>);<br></code></pre></td></tr></table></figure><ul><li>INSERT 语句中的子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `table_name`<br><span class="hljs-keyword">SELECT</span> `colnum_name(s)`<br><span class="hljs-keyword">FROM</span> `table_name`<br>[ <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">VALUE</span> OPERATOR ]<br></code></pre></td></tr></table></figure><ul><li>UPDATE 语句中的子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE `table_name` <br><span class="hljs-keyword">SET</span> `column_name` <span class="hljs-operator">=</span> `new_value`<br><span class="hljs-keyword">WHERE</span> `column_name` OPERATOR <br>   (<span class="hljs-keyword">SELECT</span> `column_name`<br>   <span class="hljs-keyword">FROM</span> `table_name`<br>   [<span class="hljs-keyword">WHERE</span>] )<br></code></pre></td></tr></table></figure><ul><li>DELETE 语句中的子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` OPERATOR <br>   (<span class="hljs-keyword">SELECT</span> `column_name`<br>   <span class="hljs-keyword">FROM</span> `table_name`  <br>   [<span class="hljs-keyword">WHERE</span>] )<br></code></pre></td></tr></table></figure><h3 id="子查询-Adv"><a href="#子查询-Adv" class="headerlink" title="子查询(Adv.)"></a>子查询(Adv.)</h3><ul><li><p>内联视图子查询</p><ul><li>将查询的结果集作为一个查询表，继续进行查询操作</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> (<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> xxxx<br>) `T`<br><span class="hljs-keyword">WHERE</span> xxx <span class="hljs-operator">=</span> (<br><span class="hljs-keyword">SELECT</span> xxxx<br>);<br></code></pre></td></tr></table></figure></li><li><p>IN 操作符的多行子查询 / NOT IN </p></li><li><p>ANY 操作符的多行子查询</p><ul><li>在子查询中使用 ANY ，表示与子查询返回的任何值比较为真，则返回真</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name(s)`<br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` OPERATOR<br>   <span class="hljs-keyword">ANY</span>(<span class="hljs-keyword">SELECT</span> column_name<br>   <span class="hljs-keyword">FROM</span> table_name)<br></code></pre></td></tr></table></figure></li><li><p>ALL 操作符的多行子查询</p><ul><li>在子查询中使用 ALL ，表示与子查询返回的所有值比较为真，则返回真</li></ul></li><li><p>多列子查询</p></li><li><p>HAVING 子句中的子查询</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
