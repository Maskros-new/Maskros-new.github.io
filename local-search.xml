<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>进行一个毛概题库的爬</title>
    <link href="/2021/11/10/maogai_crawler/"/>
    <url>/2021/11/10/maogai_crawler/</url>
    
    <content type="html"><![CDATA[<h1 id="进行一个毛概题库的爬"><a href="#进行一个毛概题库的爬" class="headerlink" title="进行一个毛概题库的爬"></a>进行一个毛概题库的爬</h1><blockquote><p>前言：🐷b毛概题库要截止了，几个时间段的题库各自有截止日期😅，眼见着ddl就要到了可👴又不想去刷，所以萌生了借助python爬虫来进行偷懒的想法</p></blockquote><h2 id="办事流程"><a href="#办事流程" class="headerlink" title="办事流程"></a>办事流程</h2><blockquote><p>由于之前👴说过：“python狗都不用”，“用python的都沙比” 的名言，所以一开始是拒绝的，但是迫于现状，所以简单突击了几天，学到了一些知识，实战用到的也就只有不到 1/5</p></blockquote><p>需求：</p><p>题库共计165左右的题目，每次测试15道题，5单选5多选5判断，提交做题结果之后方可获得所有题的正确答案，所以我们的思路就是从所有测试尝试的反馈页面中爬取题目题面和正确答案并持久化存储，over</p><p>**原先步骤(全自动)**：</p><ol><li><p>模拟登录</p><p>由于这个b bb平台需要信息门户登录成功之后才能做那b题，所以需要模拟登陆之后才能请求到做题结果的页面，所以我们利用session会话对象在向登录页面发起请求后储存cookie，这样后面直接用session对象再对需求的页面进行get请求即可。</p></li><li><p>自动做题</p><p>其实只需要点进去题库，选择开始新尝试，然后提交即可，要说模拟这个过程也可以，就是有点麻烦</p></li><li><p>开爬</p><p>get到了页面之后，利用xpath进行数据解析，持久化存储即可</p></li></ol><blockquote><p>想法很好，后来出现了一些问题，所以以下是最终流程：</p></blockquote><hr><p>**现实步骤(半自动)**：</p><ol><li><p>模拟登录(x) 手动登录(√)</p><p>按照原先的想法模拟登陆，返回的消息也是登陆成功，但是请求所需页面是还是被拦截了，需要重新登录，由于才疏学浅，一时不知道如何是好，干脆直接手动登录后，利用浏览器F12，找到登录的cookie，<strong>手动复制</strong>到源码中的 headers 内，直接用 requests 进行post和get的请求即可获得所需页面</p></li><li><p>自动做题(x) 手动点击(√)</p><p>这个也没实现，因为有点麻烦，不如自己点，反正也就两下🤓</p></li><li><p>自动开爬 ！(终于自动了)</p><ol><li><p>get到所有尝试的页面，利用xpath解析到对应每次做题结果的 <code>&lt;a&gt;</code> 标签的href地址存到 list 中，拼接成完整的url</p></li><li><p>对每个url 利用xpath解析到对应题目和答案的标签，根据题目类型分别存储，利用字典存储，题目名称为key，题目答案为value，为了防止存储重复题目，每次存储前先查询key是否存在，不存在再存入字典中，写入文件的同时计数器+1，方便统计爬取题目的个数</p></li><li><p>冻手冻手</p></li></ol></li></ol><blockquote><p>没啥技术含量，直接上🐴</p></blockquote><h2 id="🐴来"><a href="#🐴来" class="headerlink" title="🐴来"></a>🐴来</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    session = requests.Session()<br>    detail_url = <span class="hljs-string">&#x27;https://wlkc.ouc.edu.cn&#x27;</span><br>    <span class="hljs-comment"># 使用现成的cookie直接绕过登录页面</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;JSESSIONID=D7F909CFC0867C34B637056F90EF6F82; LOGIN=3139303230303331303330; UM_distinctid=17bcb2f4e579ab-0e328a4e032f8-a7d193d-144000-17bcb2f4e58315; COMPANY_ID=10122; session_id=C5213DCE7771258BD6D197CB9F9EF42E; s_session_id=29620728AB303E7B331F423AC2F6311B; web_client_cache_guid=96d181ba-548a-4b74-8724-97e4c2772026; ID=444a594d59682f527a70303d; PASSWORD=5569576f51734a6670786b3d; SCREEN_NAME=4f566b646b73396b79642f396274486b665a503656773d3d&#x27;</span>,<br>    &#125;<br>    <span class="hljs-comment"># 总尝试页面</span><br>    total_url = <span class="hljs-string">&#x27;https://wlkc.ouc.edu.cn/webapps/gradebook/do/student/viewAttempts?method=list&amp;course_id=_13492_1&amp;outcome_definition_id=_94418_1&amp;outcome_id=_2037807_1&#x27;</span><br>    page_text_tot = session.get(url=total_url, headers=headers)<br>    tree_tot = etree.HTML(page_text_tot.text)<br>    attempt_list = tree_tot.xpath(<span class="hljs-string">&#x27;//div[@class=&quot; columnStep clearfix&quot;]//a/@href&#x27;</span>)<br>    <span class="hljs-comment"># print(attempt_list)</span><br><br>    <span class="hljs-comment"># 为了去重使用字典保存键值对</span><br>    danxuan = &#123;&#125;<br>    duoxuan = &#123;&#125;<br>    panduan = &#123;&#125;<br>    cnt1 = <span class="hljs-number">0</span><br>    cnt2 = <span class="hljs-number">0</span><br>    cnt3 = <span class="hljs-number">0</span><br><br>    fp1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./maogai/Round_1/单选.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    fp2 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./maogai/Round_1/多选.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    fp3 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./maogai/Round_1/判断.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>    times = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> attempt <span class="hljs-keyword">in</span> attempt_list:<br>        times = times + <span class="hljs-number">1</span><br>        new_url = detail_url + attempt<br>        <span class="hljs-comment"># print(new_url)</span><br>        page_text = session.get(url=new_url, headers=headers)<br>        tree = etree.HTML(page_text.text)<br>        pro_list = tree.xpath(<span class="hljs-string">&#x27;//ul[@id=&quot;content_listContainer&quot;]/li&#x27;</span>)<br><br>        cnt = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 每次尝试的内容进行爬取</span><br>        <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> pro_list:<br>            cnt = cnt + <span class="hljs-number">1</span><br>            pro_name = li.xpath(<span class="hljs-string">&#x27;normalize-space(.//div[@class=&quot;vtbegenerated inlineVtbegenerated&quot;])&#x27;</span>)<br>            pro_answer_1 = li.xpath(<span class="hljs-string">&#x27;.//div[@class=&quot;vtbegenerated inlineVtbegenerated&quot;]//label/text()&#x27;</span>)<br>            pro_answer_1 = <span class="hljs-built_in">str</span>(pro_answer_1)<br>            pro_answer_2 = li.xpath(<span class="hljs-string">&#x27;normalize-space(.//span[@class=&quot;answerTextSpan&quot;])&#x27;</span>)<br>            <br>            <span class="hljs-keyword">if</span> cnt &lt;= <span class="hljs-number">5</span>:<br>                <span class="hljs-keyword">if</span> pro_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> danxuan:<br>                    cnt1 = cnt1 + <span class="hljs-number">1</span><br>                    danxuan[pro_name] = pro_answer_1<br>                    fp1.write(<span class="hljs-built_in">str</span>(cnt1) + <span class="hljs-string">&#x27;. &#x27;</span> + pro_name+<span class="hljs-string">&#x27;\n&#x27;</span>+pro_answer_1+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> cnt &lt;= <span class="hljs-number">10</span>:<br>                <span class="hljs-keyword">if</span> pro_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> duoxuan:<br>                    cnt2 = cnt2 + <span class="hljs-number">1</span><br>                    duoxuan[pro_name] = pro_answer_1<br>                    fp2.write(<span class="hljs-built_in">str</span>(cnt2) + <span class="hljs-string">&#x27;. &#x27;</span> + pro_name + <span class="hljs-string">&#x27;\n&#x27;</span> +pro_answer_1+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> pro_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> panduan:<br>                    cnt3 = cnt3 +<span class="hljs-number">1</span><br>                    panduan[pro_name] = pro_answer_2<br>                    fp3.write(<span class="hljs-built_in">str</span>(cnt3) + <span class="hljs-string">&#x27;. &#x27;</span> + pro_name + <span class="hljs-string">&#x27;\n&#x27;</span>+pro_answer_2+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;times: &#x27;</span> + <span class="hljs-built_in">str</span>(times) + <span class="hljs-string">&#x27; 单选: &#x27;</span> + <span class="hljs-built_in">str</span>(cnt1) + <span class="hljs-string">&#x27;,多选：&#x27;</span> + <span class="hljs-built_in">str</span>(cnt2) + <span class="hljs-string">&#x27;,判断: &#x27;</span> + <span class="hljs-built_in">str</span>(cnt3) )<br>   <br>    fp1.close()<br>    fp2.close()<br>    fp3.close()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;total: &#x27;</span> + <span class="hljs-built_in">str</span>(cnt1+cnt2+cnt3) + <span class="hljs-string">&#x27; problems have been downloaded.&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>一个小实战，效果还行，也就这样吧，全自动有点蠢😅，半自动也还行😅，以后会想办法修改自动登录的问题，可以提点意见</p><p>github项目地址 <a href="https://github.com/Maskros-new/THEOL-questions-crawler">link</a>  爬取的题库在文件夹里</p><p>over大火</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>PROJECT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Crawler</tag>
      
      <tag>python</tag>
      
      <tag>requests</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫杂记</title>
    <link href="/2021/11/10/crawler/"/>
    <url>/2021/11/10/crawler/</url>
    
    <content type="html"><![CDATA[<h1 id="python爬虫杂记"><a href="#python爬虫杂记" class="headerlink" title="python爬虫杂记"></a>python爬虫杂记</h1><p>Crawler in python</p><blockquote><p>又名 《为了偷懒爬毛概题库的突击学习》</p></blockquote><h2 id="一些知识"><a href="#一些知识" class="headerlink" title="一些知识"></a>一些知识</h2><ul><li><p>爬虫在使用场景中的分类：</p><ul><li><p>通用爬虫：抓取系统重要促成部分，抓取的是一整张页面数据</p></li><li><p>聚焦爬虫：是建立在通用爬虫的基础上，抓取的是页面中特定的局部内容</p></li><li><p>增量式爬虫：检测网站中数据更新的情况，只会抓取网站中最新更新出来的数据</p></li></ul></li></ul><ul><li><p>robots.txt协议：君子协议，规定网站中哪些数据能爬哪些不能，约定俗成</p></li><li><p>http &amp; https 协议：</p><blockquote><p>http协议：服务器和客户端进行数据交互的一种形式</p><p>https协议：安全的超文本传输协议 证书秘钥加密</p></blockquote></li><li><p>常用请求头信息：</p><ul><li><p>User-Agent：请求载体的身份标识</p></li><li><p>Connection：请求完毕后，是断开连接还是保持连接</p></li></ul></li></ul><ul><li>常用响应头信息：<ul><li>Content-Type：服务器响应回客户端的数据类型</li></ul></li></ul><h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><blockquote><p>requests: python原生的基于网络请求的模块，模拟浏览器发请求</p><p>.text 字符串   .content 二进制   .json() 对象</p></blockquote><p>编码流程：</p><ul><li>指定url</li><li>发起请求</li><li>获取响应数据</li><li>持久化存储</li></ul><h3 id="0x00-requests-一血"><a href="#0x00-requests-一血" class="headerlink" title="0x00 requests 一血"></a>0x00 requests 一血</h3><blockquote><p><code>response.text</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 1.指定url</span><br>url=<span class="hljs-string">&#x27;xxxx/xxx/xxx.xxx&#x27;</span><br><span class="hljs-comment"># 2.发起请求 get方法会返回一个响应对象</span><br>response = requests.get(url=url)<br><span class="hljs-comment"># 3.获取响应数据 .text返回的是字符串形式的响应数据</span><br>page_text = response.text<br><span class="hljs-built_in">print</span>(page_text)<br><span class="hljs-comment"># 4.持久化存储</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./xxx.html&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(page_text)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over!&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="0x01-网页采集器"><a href="#0x01-网页采集器" class="headerlink" title="0x01 网页采集器"></a>0x01 网页采集器</h3><ul><li>UA检测 </li><li>UA伪装</li></ul><blockquote><p><code>requests.get(url, params, headers)</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># UA：User-Agent 请求载体的身份标识</span><br><span class="hljs-comment"># UA检测：门户网站的服务器会检测对应请求的载体身份标识，如果检测到的标识为基于某一款浏览器的，</span><br><span class="hljs-comment"># 则说明是正常请求，反之服务端就可能拒绝这次请求</span><br><br><span class="hljs-comment"># UA伪装：让爬虫对应的请求载体身份标识伪装成某一款浏览器</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># UA伪装：将对应的User-Agent封装到一个字典中</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span><br>    &#125;<br>    url = <span class="hljs-string">&#x27;https://www.sogou.com/web&#x27;</span><br>    <span class="hljs-comment"># 处理url携带的参数：封装到字典中</span><br>    kw = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;enter a word:&#x27;</span>)<br>    param = &#123;<br>        <span class="hljs-string">&#x27;query&#x27;</span>: kw<br>    &#125;<br>    <span class="hljs-comment"># 对指定url发起的请求对应url是携带参数的，并且请求过程中处理了参数</span><br>    response = requests.get(url=url, params=param, headers=headers)<br><br>    page_text = response.text<br>    fileName = <span class="hljs-string">&#x27;./requests_test/test2/&#x27;</span>+kw+<span class="hljs-string">&#x27;.html&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(fileName, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        fp.write(page_text)<br>    <span class="hljs-built_in">print</span>(fileName, <span class="hljs-string">&#x27; is saved&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="0x02-百度翻译"><a href="#0x02-百度翻译" class="headerlink" title="0x02 百度翻译"></a>0x02 百度翻译</h3><ul><li>post请求 (携带了参数)  </li><li>ajax</li><li>响应数据是一组json数据</li></ul><blockquote><p><code>requests.post(url, data, json, headers...)</code></p><p><code>response.json</code>()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 1.指定url</span><br>    post_url = <span class="hljs-string">&#x27;https://fanyi.baidu.com/sug&#x27;</span><br>    <span class="hljs-comment"># 2.进行UA伪装</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span><br>    &#125;<br>    <span class="hljs-comment"># 3.post请求参数处理(同get请求一致)</span><br>    word = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;enter a word&#x27;</span>)<br>    data = &#123;<br>        <span class="hljs-string">&#x27;kw&#x27;</span>: word<br>    &#125;<br>    <span class="hljs-comment"># 4.请求发送</span><br>    response = requests.post(url=post_url, data=data, headers=headers)<br>    <span class="hljs-comment"># 5.获取响应数据:json()方法返回的是obj(如果确认响应数据是json类型才能使用)</span><br>    dic_obj=response.json()<br>    <span class="hljs-built_in">print</span>(dic_obj)<br>    <span class="hljs-comment"># 6.持久化存储</span><br>    fileName = <span class="hljs-string">&#x27;./requests_test/test3/&#x27;</span>+word+<span class="hljs-string">&#x27;.json&#x27;</span><br>    fp = <span class="hljs-built_in">open</span>(fileName,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-comment"># 由于中文不能用ascii编码，所以令ensure_ascii=False</span><br>    json.dump(dic_obj,fp=fp,ensure_ascii=<span class="hljs-literal">False</span>) <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over!&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="0x03-豆瓣电影"><a href="#0x03-豆瓣电影" class="headerlink" title="0x03 豆瓣电影"></a>0x03 豆瓣电影</h3><blockquote><p>request.get</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url = <span class="hljs-string">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span><br>    param = &#123;<br>        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;24&#x27;</span>,    <br>        <span class="hljs-string">&#x27;interval_id&#x27;</span>: <span class="hljs-string">&#x27;100:90&#x27;</span>,<br>        <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-string">&#x27;40&#x27;</span>,  <span class="hljs-comment"># 从库中的第几部电影去取</span><br>        <span class="hljs-string">&#x27;limit&#x27;</span>: <span class="hljs-string">&#x27;20&#x27;</span>,  <span class="hljs-comment"># 一次从库中取出的个数</span><br>    &#125;<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span><br>    &#125;<br>    response = requests.get(url=url, params=param, headers=headers) <br>    list_data = response.json()<br>    <span class="hljs-comment"># print(list_data)</span><br>    fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./requests_test/test4/douban.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    json.dump(list_data, fp=fp, ensure_ascii=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over!&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="0x04-综合案例-数据提取"><a href="#0x04-综合案例-数据提取" class="headerlink" title="0x04 综合案例-数据提取"></a>0x04 综合案例-数据提取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span><br>    &#125;<br>    id_list = []  <span class="hljs-comment"># 存储企业id</span><br>    all_data_list = []  <span class="hljs-comment"># 存储所有的企业详情数据</span><br><br>    <span class="hljs-comment"># 批量获取不同企业的id值</span><br>    url = <span class="hljs-string">&#x27;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span><br>    <span class="hljs-comment"># 参数的封装</span><br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>):<br>        page=<span class="hljs-built_in">str</span>(page)<br>        data = &#123;<br>            <span class="hljs-string">&#x27;on&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span>,<br>            <span class="hljs-string">&#x27;page&#x27;</span>: page,<br>            <span class="hljs-string">&#x27;pagesize&#x27;</span>: <span class="hljs-string">&#x27;15&#x27;</span>,<br>            <span class="hljs-string">&#x27;productName&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;conditionType&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>            <span class="hljs-string">&#x27;applyname&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;applysn&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        &#125;<br>        json_ids = requests.post(url=url, headers=headers, data=data).json()<br>        <span class="hljs-keyword">for</span> dic <span class="hljs-keyword">in</span> json_ids[<span class="hljs-string">&#x27;list&#x27;</span>]:<br>            id_list.append(dic[<span class="hljs-string">&#x27;ID&#x27;</span>])<br><br>    <span class="hljs-comment"># 获取企业详细数据</span><br>    post_url = <span class="hljs-string">&#x27;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> id_list:<br>        data = &#123;<br>            <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-built_in">id</span><br>        &#125;<br>        detail_json = requests.post(<br>            url=post_url, headers=headers, data=data).json()<br>        <span class="hljs-built_in">print</span>(detail1_json, <span class="hljs-string">&#x27;--------ending--------&#x27;</span>)<br>        all_data_list.append(detail_json)<br>    <span class="hljs-comment"># 持久化存储all_data_list</span><br>    fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./requests_test/test5/allData.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    json.dump(all_data_list, fp=fp, ensure_ascii=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over!&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><blockquote><p>聚焦爬虫：爬取页面中指定的页面内容</p></blockquote><p>编码流程：</p><ul><li>指定url</li><li>发起请求</li><li>获取响应数据</li><li><strong>数据解析</strong></li><li>持久化存储</li></ul><p>数据解析分类：正则，bs4，<strong>xpath</strong></p><p>数据解析原理概述：</p><blockquote><p>解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储</p></blockquote><ol><li>进行指定标签的定位</li><li>标签或者标签对应的属性中存储的数据值进行提取 (解析)</li></ol><h3 id="0x00-图片"><a href="#0x00-图片" class="headerlink" title="0x00 图片"></a>0x00 图片</h3><blockquote><p>.content 返回二进制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 如何爬取图片数据</span><br>    url = <span class="hljs-string">&#x27;https://i2.hdslb.com/bfs/archive/237001f0163eb48c1745a906c5b480f449183d66.jpg@672w_378h_1c_100q.webp&#x27;</span><br>    <span class="hljs-comment"># content 返回的是二进制形式图片数据</span><br>    img_data = requests.get(url=url).content<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./data_parse_test/test1/dsm.jpg&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        fp.write(img_data)    <br><br></code></pre></td></tr></table></figure><h3 id="0x01-正则解析"><a href="#0x01-正则解析" class="headerlink" title="0x01 正则解析"></a>0x01 正则解析</h3><blockquote><p>需要导入re模块</p></blockquote><p>常用正则表达式</p><p><img src="https://i.bmp.ovh/imgs/2021/11/022868b8a1cd24f4.png" alt="img"></p><p>ex:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/dsadas/sdada&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//sdadasd/dsadas/dasdas&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;sdada&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>ex=&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>.*?<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;(.*?)&quot;</span> <span class="hljs-attr">alt</span> <span class="hljs-attr">.</span>*?&lt;/<span class="hljs-attr">div</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure><p><strong>练习：图片分页爬取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 需求：爬取所有图片</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">#创建文件夹，保存所有图片</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;./data_parse_test/test1&#x27;</span>):<br>        os.mkdir(<span class="hljs-string">&#x27;./data_parse_test/test1/&#x27;</span>)<br>    <span class="hljs-comment">#设置一个通用url模板</span><br>    url = <span class="hljs-string">&#x27;https://www.qiushibaike.com/pic/page/%d/?s=5184961&#x27;</span><br>    <span class="hljs-keyword">for</span> pageNum <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">36</span>):<br>        <span class="hljs-comment">#对应页码的url</span><br>        new_url = <span class="hljs-built_in">format</span>(url%pageNum)<br>        <span class="hljs-comment"># 使用通用爬虫对url对应的一整张页面进行爬取</span><br>        page_text = requests.get(url=url, headers=headers).text<br><br>        <span class="hljs-comment"># 使用聚焦爬虫将页面中所有漫画进行解析/提取</span><br>        ex = <span class="hljs-string">&#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&lt;/div&gt; &#x27;</span><br>        img_src_list = re.findall(ex, page_text, re.S)<br>        <span class="hljs-comment"># print(img_src_list)</span><br>        <span class="hljs-keyword">for</span> src <span class="hljs-keyword">in</span> img_src_list:<br>            <span class="hljs-comment">#拼接出一个完整的图片url</span><br>            src=<span class="hljs-string">&#x27;https:&#x27;</span>+src<br>            <span class="hljs-comment">#请求到了图片的二进制数据</span><br>            img_data=requests.get(url=src,headers=headers).content<br>            <span class="hljs-comment">#生成图片名称</span><br>            img_name=src.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>            <span class="hljs-comment">#图片存储的路径</span><br>            imgPath=<span class="hljs-string">&#x27;./data_parse_test/test1/&#x27;</span>+img_name<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(imgPath,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>                fp.write(img_data)<br>                <span class="hljs-built_in">print</span>(img_name,<span class="hljs-string">&#x27;下载成功！&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="0x02-bs4解析"><a href="#0x02-bs4解析" class="headerlink" title="0x02 bs4解析"></a>0x02 bs4解析</h3><blockquote><p>所需模块：bs4 lxml</p></blockquote><p>数据解析的原理：</p><ol><li>标签定位</li><li>提取标签、标签属性中存储的数据值</li></ol><p>bs4数据解析的原理：</p><ol><li>实例化一个BeautifulSoup对象，并且将页面源码数据加载到该对象中</li><li>通过调用BeautifulSoup对象中相关的属性或者方法进行标签定位和数据提取</li></ol><p>如何实例化Beautiful对象：</p><blockquote><p><code>from bs4 import BeautifulSoup</code></p></blockquote><ul><li><p>对象的实例化：将本地/互联网上获取的页面源码加载到该对象中</p><p><code>soup=BeautifulSoap(page_text.content,&#39;lxml&#39;)</code></p></li></ul><p>提供的用于数据解析的方法和属性：</p><ul><li><p><code>soup.tagName</code> 对应html标签 返回的是html中第一次出现的tagName标签</p></li><li><p><code>soup.find()</code> :</p><ul><li><code>soup.find(&#39;tagName&#39;)</code> 同 <code>soup.tagName</code></li><li>属性定位：<code>soup.find(&#39;tagName&#39;,class_=&#39;xxx&#39;)</code> (class要带下划线)</li><li><code>soup.find_all(&#39;tagName&#39;)</code> 返回所有的标签(列表)</li></ul></li><li><p><code>soup.select()</code></p><ul><li><p><code>soup.select(&#39;某种选择器(id,class,标签...)&#39;)</code>，返回的是一个<strong>列表</strong></p><blockquote><p><code>#id</code>, <code>tag</code>, <code>.class</code></p></blockquote></li><li><p>层级选择器：</p><ul><li><code>soup.select(&#39;.class1 &gt; ul &gt; li &gt; a&#39;)[2]</code>  表示 class1 下的 ul 标签下的 li 标签中的第二个 a 标签。 <code>&gt;</code> 表示一个层级关系</li><li><code>soup.select(&#39;.class1 &gt; ul a&#39;)[2]</code> 表示同上，空格表示的是多个层级关系</li></ul></li></ul></li><li><p>获取标签之间的文本数据</p><ul><li><code>soup.a.text/string/get_text()</code><ul><li><code>.text/.get_text()</code> 可以获得某一个标签中所有的文本内容</li><li><code>.string</code> 只可以获取改标签下面直系的文本内容</li></ul></li></ul></li><li><p>获取标签中属性值</p><ul><li><code>soup.a[&#39;href&#39;]</code></li></ul></li></ul><p><strong>练习：小说章节名和内容爬取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> lxml<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment"># 需求：爬取小说的所有章节标题和内容</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;./data_parse_test/test2&#x27;</span>):<br>        os.mkdir(<span class="hljs-string">&#x27;./data_parse_test/test2/&#x27;</span>)<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span><br>    &#125;<br>    <span class="hljs-comment"># 对首页的页面进行爬取</span><br>    url = <span class="hljs-string">&#x27;http://www.banzhu22.org/5_5853/&#x27;</span><br>    page_text = requests.get(url=url, headers=headers)<br><br>    <span class="hljs-comment"># 在首页中解析出章节的标题和详情页的url</span><br>    <span class="hljs-comment"># 1. 实例化BeautifulSoup对象，将网页源码加载到对象中</span><br>    soup = BeautifulSoup(page_text.content, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    dd_list = soup.select(<span class="hljs-string">&#x27;.box_con &gt; #list dd&#x27;</span>)[<span class="hljs-number">9</span>:]<br><br>    fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./data_parse_test/test2/49gifts.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">for</span> dd <span class="hljs-keyword">in</span> dd_list:<br>        title = dd.a.string<br>        detail_url = <span class="hljs-string">&#x27;http://www.banzhu22.org&#x27;</span> + dd.a[<span class="hljs-string">&#x27;href&#x27;</span>]<br>        <span class="hljs-comment"># 对详情页发起请求，解析出章节内容</span><br>        detail_page_text = requests.get(url=detail_url, headers=headers)<br>        <span class="hljs-comment"># 解析出详情页中相关章节的内容</span><br>        detail_soup = BeautifulSoup(detail_page_text.content, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>        div_tag = detail_soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;content&#x27;</span>)<br>        <span class="hljs-comment"># 解析到章内容</span><br>        content = div_tag.text<br>        fp.write(title+<span class="hljs-string">&#x27;\n&#x27;</span>+content+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(title+<span class="hljs-string">&#x27;downloaded successfully!&#x27;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;over!&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="0x03-xpath解析"><a href="#0x03-xpath解析" class="headerlink" title="0x03 xpath解析"></a>0x03 xpath解析</h3><blockquote><p>是最常用且最便捷高效的爬取方式，通用性最强</p><p>所需模块：lxml</p></blockquote><p>xpath解析原理：</p><ol><li>实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中</li><li>调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获</li></ol><p>如何实例化etree对象：</p><blockquote><p><code>from lxml import etree</code></p></blockquote><ul><li><p>本地源码：<code>etree.parse(filePath)</code></p></li><li><p>互联网源码：<code>etree.HTML(&#39;page_text&#39;)</code></p></li><li><p><code>xpath(&#39;xpath表达式&#39;)</code></p></li></ul><p>xpath表达式：</p><blockquote><p>各表达式可以用 <code>|</code> 连接</p></blockquote><ul><li><p><code>/</code>：表示的是一个层级，从根节点开始定位</p></li><li><p>开头<code>./</code>：定位了层级后，当前层级下的层级</p></li><li><p><code>//</code>：表示的是多个层级，可以从任意位置开始定位</p></li><li><p>属性定位：<code>//div[@class=&quot;xxx&quot;]</code> 即 <code>tag[@attrName=&quot;attrValue&quot;]</code></p></li><li><p>索引定位：<code>//div[@class=&quot;xxx&quot;]/p[3]</code> 索引是从1开始的</p></li><li><p>取文本：</p><ul><li><code>/text()</code> 标签下直系的文本内容</li><li><code>//text()</code> 标签下所有的文本内容</li></ul></li><li><p>取属性：<code>/@attrName</code></p></li><li><p>通用处理中文乱码的解决方案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name = name.encode(<span class="hljs-string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="hljs-string">&#x27;gbk&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><p><strong>练习略</strong></p><h2 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h2><p>反爬机制：验证码</p><p>识别验证码的操作：</p><ul><li>第三方自动识别：<a href="http://www.yundama.com/demo.html">云打码</a> </li></ul><blockquote><p> to be added….</p></blockquote><h2 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h2><p>需求：对校园网进行登陆 (无验证码)</p><ul><li>点击登陆按钮后会发起一个POST请求，POST请求中会携带登录信息(username,pwd)</li><li><code>print(response.status_code)</code> 打印响应状态码，如果打印200则证明模拟登陆成功</li></ul><p>需求：爬取当前用户的相关信息</p><p>http/https协议特性：无状态</p><p>没有请求到对应页面数据的原因：发起的第二次基于页面的请求时，服务器端不知道此次请求是基于登录状态下的请求</p><p>cookie：用来让服务端记录客户端的相关状态</p><ul><li>cookie值的来源是哪里：模拟登陆post请求后，有服务器端创建</li><li>session会话对象：<ul><li>可以进行请求的发送</li><li>如果请求过程中产生了cookie，则cookie会被自动存储/携带在该session对象中</li></ul></li></ul><p>步骤：</p><ol><li>创建一个session对象： <code>session = requests.Session()</code></li><li>使用session对象进行模拟登录post请求的发送 (cookie就会被存储在session中)</li><li>session对象再对登录后页面对应的get请求进行发送 (携带了cookie)</li></ol><blockquote><p>to be added … </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>Crawler</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021CCPC女生专场</title>
    <link href="/2021/11/08/2021ccpc_girl/"/>
    <url>/2021/11/08/2021ccpc_girl/</url>
    
    <content type="html"><![CDATA[<h1 id="2021CCPC女生专场"><a href="#2021CCPC女生专场" class="headerlink" title="2021CCPC女生专场"></a>2021CCPC女生专场</h1><blockquote><p>“假如我是女生”</p></blockquote><h2 id="A-公交线路"><a href="#A-公交线路" class="headerlink" title="A_公交线路"></a>A_公交线路</h2><blockquote><p>水题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n,x,y; cin&gt;&gt;n&gt;&gt;x&gt;&gt;y;<br>    <span class="hljs-keyword">int</span> k[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>) cin&gt;&gt;k[i];<br>    <span class="hljs-keyword">int</span> m; cin&gt;&gt;m;<br>    <span class="hljs-keyword">int</span> p[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>) cin&gt;&gt;p[i];<br>    <span class="hljs-keyword">int</span> lpos=x<span class="hljs-number">-1</span>,rpos=x+<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k[lpos]!=p[i])&#123;<br>            <span class="hljs-keyword">if</span>(y&lt;x) &#123;cout&lt;&lt;<span class="hljs-string">&quot;Wrong&quot;</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>;&#125;<br>            <span class="hljs-keyword">else</span> &#123;cout&lt;&lt;<span class="hljs-string">&quot;Right&quot;</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(k[rpos]!=p[i])&#123;<br>            <span class="hljs-keyword">if</span>(x&lt;y) &#123;cout&lt;&lt;<span class="hljs-string">&quot;Wrong&quot;</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>;&#125;<br>            <span class="hljs-keyword">else</span> &#123;cout&lt;&lt;<span class="hljs-string">&quot;Right&quot;</span>&lt;&lt;endl; <span class="hljs-keyword">return</span>;&#125;<br>        &#125;<br>        lpos--; rpos++;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Unsure&quot;</span>&lt;&lt;endl;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D-修建道路"><a href="#D-修建道路" class="headerlink" title="D_修建道路"></a>D_修建道路</h2><blockquote><p>沙比题，两两取最大值即可，脂环王写了一发线段树优化递归我不是很认可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 200005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, n) &#123;<br>        cin &gt;&gt; a[i];<br>        <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>) ans+=<span class="hljs-built_in">max</span>(a[i],a[i<span class="hljs-number">-1</span>]);<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="G-3G网络"><a href="#G-3G网络" class="headerlink" title="G_3G网络"></a>G_3G网络</h2><blockquote><p>输出1/n即可 我搞错了double 结果wa在精度上了 最后手写了个除法</p><p>结果发现 printf(“%.16lf”,ans) 即可，少写个小数点😅</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n; cin&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> x,y;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n)&#123;<br>        cin&gt;&gt;x&gt;&gt;y;<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans[<span class="hljs-number">15</span>];  <br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,<span class="hljs-number">12</span>)&#123;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) &#123;ans[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>; tmp=<span class="hljs-number">0</span>;&#125;<br>            <span class="hljs-keyword">else</span> &#123;ans[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>; tmp*=<span class="hljs-number">10</span>;&#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            ans[i]=tmp/n;<br>            tmp=tmp%n;<br>            tmp*=<span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-string">&quot;.&quot;</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,<span class="hljs-number">12</span>)&#123;<br>        cout&lt;&lt;ans[i];<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// ans=1.0/n</span><br><span class="hljs-comment">// printf(&quot;%.16lf&quot;,ans);</span><br></code></pre></td></tr></table></figure><h2 id="I-驾驶卡丁车"><a href="#I-驾驶卡丁车" class="headerlink" title="I_驾驶卡丁车"></a>I_驾驶卡丁车</h2><blockquote><p>楞模拟就行，八个方向 <code>dis[8][2]</code> 直接做掉啊做掉</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">char</span> mp[<span class="hljs-number">55</span>][<span class="hljs-number">55</span>];<br><span class="hljs-keyword">int</span> dis[<span class="hljs-number">8</span>][<span class="hljs-number">2</span>] = &#123;<br>    &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;&#125;;<br><span class="hljs-keyword">int</span> n, m, x, y, v, face;<br><span class="hljs-keyword">bool</span> crsh=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">0</span> || x &gt; n || y &lt;= <span class="hljs-number">0</span> || y &gt; m)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (mp[x][y] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">0</span>, v) &#123;<br>        <span class="hljs-keyword">if</span> (dis[face][<span class="hljs-number">0</span>] != <span class="hljs-number">0</span> &amp;&amp; dis[face][<span class="hljs-number">1</span>] != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">check</span>(x + dis[face][<span class="hljs-number">0</span>], y) &amp;&amp; !<span class="hljs-built_in">check</span>(x, y + dis[face][<span class="hljs-number">1</span>])) &#123;<br>                crsh = <span class="hljs-literal">true</span>;<br>                v = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(x + dis[face][<span class="hljs-number">0</span>], y + dis[face][<span class="hljs-number">1</span>])) &#123;<br>            x += dis[face][<span class="hljs-number">0</span>];<br>            y += dis[face][<span class="hljs-number">1</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            crsh = <span class="hljs-literal">true</span>;<br>            v = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    v=<span class="hljs-number">0</span>, face=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>) &#123;<br>            cin &gt;&gt; mp[i][j];<br>            <span class="hljs-keyword">if</span> (mp[i][j] == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>                x = i, y = j;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> opcnt;<br>    cin &gt;&gt; opcnt;<br>    <span class="hljs-keyword">char</span> op;<br>    crsh = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, opcnt) &#123;<br>        cin &gt;&gt; op;<br>        crsh = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;L&#x27;</span>) &#123;<br>            face++;<br>            <span class="hljs-keyword">if</span> (face &gt; <span class="hljs-number">7</span>) &#123;<br>                face = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-built_in">go</span>();<br>        &#125;<br>        <span class="hljs-built_in">eif</span>(op == <span class="hljs-string">&#x27;R&#x27;</span>) &#123;<br>            face--;<br>            <span class="hljs-keyword">if</span> (face &lt; <span class="hljs-number">0</span>) &#123;<br>                face = <span class="hljs-number">7</span>;<br>            &#125;<br>            <span class="hljs-built_in">go</span>();<br>        &#125;<br>        <span class="hljs-built_in">eif</span>(op == <span class="hljs-string">&#x27;U&#x27;</span>) &#123;<br>            v++;<br>            <span class="hljs-built_in">go</span>();<br>        &#125;<br>        <span class="hljs-built_in">eif</span>(op == <span class="hljs-string">&#x27;D&#x27;</span>) &#123;<br>            v = <span class="hljs-built_in">max</span>(v - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">go</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (crsh)<br>            cout &lt;&lt; <span class="hljs-string">&quot;Crash! &quot;</span>;<br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="K-音乐游戏"><a href="#K-音乐游戏" class="headerlink" title="K_音乐游戏"></a>K_音乐游戏</h2><blockquote><p>沙比题</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n; cin&gt;&gt;n;<br>    string s;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">getline</span>(cin,s);<br>        <span class="hljs-built_in">rep</span>(j,<span class="hljs-number">0</span>,s.<span class="hljs-built_in">length</span>())&#123;<br>            <span class="hljs-keyword">if</span> (s[j] == <span class="hljs-string">&#x27;-&#x27;</span>)<br>                cnt++;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;cnt;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：再次化身签到皇帝，还在想B题的字符串，请把“今天想出来B了吗”打在评论区😘</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SOLUTIONS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>solutions</tag>
      
      <tag>CCPC</tag>
      
      <tag>思维</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 752 (Div.2)</title>
    <link href="/2021/10/31/cf%20752/"/>
    <url>/2021/10/31/cf%20752/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Round-752-Div-2"><a href="#Codeforces-Round-752-Div-2" class="headerlink" title="Codeforces Round #752 (Div.2)"></a>Codeforces Round #752 (Div.2)</h1><h2 id="A-Era"><a href="#A-Era" class="headerlink" title="A_Era"></a>A_Era</h2><blockquote><p>水题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>) &#123;<br>        cin &gt;&gt; t;<br>        <span class="hljs-keyword">if</span> (t &gt; pos) &#123;<br>            ans += t - pos;<br>            pos += t - pos;<br>        &#125;<br>        pos++;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B-XOR-Specia-LIS-t"><a href="#B-XOR-Specia-LIS-t" class="headerlink" title="B_XOR_Specia_LIS_t"></a>B_XOR_Specia_LIS_t</h2><blockquote><p>题意：</p><p>沙比题，如果序列所分成的若干子序列中，最长的任意递增序列(不需要连续)的长度相异或，可以为0则输出 yes 否则输出 no</p><p>思路：</p><p>没说咋分，就一个一个分，所以就是 1^1^1^… ，根据序列长度的奇偶性判断一下即可，偶数一定yes，奇数就判断是不是单增序列，不是的话一定yes，反之no</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n; cin&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> tmp;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n)&#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">bool</span> is=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]&lt;=a[i<span class="hljs-number">-1</span>])&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>                is=<span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!is) cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C-Di-visible-Confusion"><a href="#C-Di-visible-Confusion" class="headerlink" title="C_Di_visible_Confusion"></a>C_Di_visible_Confusion</h2><blockquote><p>题意：</p><p>一个序列，可以对a[i]进行删除操作的前提是 <code>a[i]%(i+1)!=0</code>，问这个序列能不能被删干净</p><p>思路：</p><p>暴力即可</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n; cin&gt;&gt;n;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">bool</span> flag=<span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)&#123;<br>        flag=<span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">rep</span>(j,<span class="hljs-number">2</span>,i+<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]%j!=<span class="hljs-number">0</span>)&#123;<br>                flag=<span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!flag)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="D-Vupsen-Pupsen-and-0"><a href="#D-Vupsen-Pupsen-and-0" class="headerlink" title="D_Vupsen_Pupsen_and_0"></a>D_Vupsen_Pupsen_and_0</h2><blockquote><p>题意：</p><p>输入x,y 两个偶数，找出 n，使得 <code>n%x=y%n</code></p><p>思路：</p><p>分类讨论即可：</p><ul><li><code>x&gt;y</code> 时，<code>n=x+y</code></li><li><code>x&lt;y</code> 时，<code>n=y-(y%x)/2</code></li><li>考虑特例</li></ul><p>思考不出来的时候画数轴可以给你灵感</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    ll x, y;<br>    cin &gt;&gt; x &gt;&gt; y;<br>    <span class="hljs-keyword">if</span> (x == y) &#123;<br>        cout &lt;&lt; x &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; y) &#123;<br>        cout &lt;&lt; x + y &lt;&lt; endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (y % x == <span class="hljs-number">0</span>) &#123;<br>            cout &lt;&lt; x &lt;&lt; endl;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; y - (y % x) / <span class="hljs-number">2</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SOLUTIONS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>solutions</tag>
      
      <tag>思维</tag>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Educational Codeforces Round 116 (Div.2)</title>
    <link href="/2021/10/30/cf%20Edu%20116/"/>
    <url>/2021/10/30/cf%20Edu%20116/</url>
    
    <content type="html"><![CDATA[<h1 id="Educational-Codeforces-Round-116-Rated-for-Div-2"><a href="#Educational-Codeforces-Round-116-Rated-for-Div-2" class="headerlink" title="Educational Codeforces Round 116 (Rated for Div. 2)"></a>Educational Codeforces Round 116 (Rated for Div. 2)</h1><h2 id="A-AB-Balance"><a href="#A-AB-Balance" class="headerlink" title="A_AB_Balance"></a>A_AB_Balance</h2><blockquote><p>题意：</p><p>由ab构成的串，做最少操作使ab和ba出现的次数相同</p><p>思路：</p><p>如果出现次数不同，最多差1，修改首位即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-keyword">int</span> l = s.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">int</span> ab = <span class="hljs-number">0</span>, ba = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, l) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;a&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;b&#x27;</span>)<br>                ab++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;b&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;a&#x27;</span>)<br>                ba++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ab == ba)<br>        cout &lt;&lt; s &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (ab &gt; ba) &#123;<br>            <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;a&#x27;</span>)<br>                s[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;b&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;b&#x27;</span>)<br>                s[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br>        &#125;<br>        cout &lt;&lt; s &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="B-Update-Files"><a href="#B-Update-Files" class="headerlink" title="B_Update_Files"></a>B_Update_Files</h2><blockquote><p>水题</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">ll <span class="hljs-title">quickpow</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    ll res = a;<br>    <span class="hljs-keyword">while</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * res;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        res = res * res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    ll n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<br>        cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">int</span> need = <span class="hljs-number">0</span>;<br>        ll tmp = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">65</span>) &#123;<br>            tmp = <span class="hljs-built_in">quickpow</span>(<span class="hljs-number">2</span>, i);<br>            <span class="hljs-keyword">if</span> (tmp &gt;= k || tmp &gt;= n) &#123;<br>                need = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (tmp &gt;= n)<br>            cout &lt;&lt; need &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> &#123;<br>            ll times = need;<br>            <span class="hljs-keyword">if</span> ((n - tmp) % k &gt; <span class="hljs-number">0</span>) &#123;<br>                times += (n - tmp) / k + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                times += (n - tmp) / k;<br>            &#125;<br>            cout &lt;&lt; times &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="C-Banknotes"><a href="#C-Banknotes" class="headerlink" title="C_Banknotes"></a>C_Banknotes</h2><blockquote><p>题意：</p><p>给定n,k, n代表纸币种类，k代表最多可用纸币数量，接下来给出a[0…n-1]， 顺序由小到大，表示每张纸币的面值为 10^a[i]，求不能表示出的金额的最小值</p><p>思路：</p><p>贪心，按10进制从低位到高位取，能取够低位就是 <strong>a[i+1]-1</strong> 的形式，即为 <strong>x999…</strong> , 如果a[i]取不到a[i+1] 或者 没有更大面值的钞票，答案即为 <strong>a[i] * 剩余张数 + a[i]-1</strong> , 能取到就接着找a[i+1]。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ll a[<span class="hljs-number">20</span>];<br><span class="hljs-function">ll <span class="hljs-title">quickpow</span><span class="hljs-params">(ll a, ll b)</span> </span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    ll res = a;<br>    <span class="hljs-keyword">while</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * res;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        res = res * res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    ll n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, n) &#123;<br>        cin &gt;&gt; a[i];<br>        a[i] = <span class="hljs-built_in">quickpow</span>(<span class="hljs-number">10</span>, a[i]);<br>    &#125;<br>    a[n] = <span class="hljs-number">0</span>;<br>    ll ans = <span class="hljs-number">0</span>;<br>    ll tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, n) &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>                cout &lt;&lt; k + <span class="hljs-number">1</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (a[i] * k + <span class="hljs-number">1</span> &lt; a[i + <span class="hljs-number">1</span>]) &#123;<br>                cout &lt;&lt; a[i] * k + <span class="hljs-number">1</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tmp += a[i + <span class="hljs-number">1</span>] / a[i] - <span class="hljs-number">2</span>;<br>                ans = a[i + <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> ((k - tmp) * a[i] &lt; a[i + <span class="hljs-number">1</span>]) &#123;<br>                ans = (k - tmp) * a[i] + a[i] - <span class="hljs-number">1</span>;<br>                cout &lt;&lt; ans &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-built_in">eif</span>(a[i + <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>) &#123;<br>                ans = (k - tmp) * a[i] + a[i] - <span class="hljs-number">1</span>;<br>                cout &lt;&lt; ans &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                tmp += a[i + <span class="hljs-number">1</span>] / a[i] - <span class="hljs-number">1</span>;<br>                ans = a[i] - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我真是个沙比，打的时候因为有个判断条件写错了一直wa2，比赛完十分钟就过了，纯掉分飞舞 😅</p>]]></content>
    
    
    <categories>
      
      <category>SOLUTIONS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>solutions</tag>
      
      <tag>思维</tag>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 750 (Div.2)</title>
    <link href="/2021/10/28/cf%20750/"/>
    <url>/2021/10/28/cf%20750/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Round-750-Div-2"><a href="#Codeforces-Round-750-Div-2" class="headerlink" title="Codeforces Round #750 (Div.2)"></a>Codeforces Round #750 (Div.2)</h1><h2 id="A-Luntik-and-Concerts"><a href="#A-Luntik-and-Concerts" class="headerlink" title="A_Luntik_and_Concerts"></a>A_Luntik_and_Concerts</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    ll a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    <span class="hljs-keyword">int</span> mn = <span class="hljs-built_in">min</span>(a, b);<br>    <span class="hljs-keyword">if</span> ((mn + c) &amp; <span class="hljs-number">1</span>) &#123;<br>        mn--;<br>        a -= mn;<br>        b -= mn;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        a -= mn;<br>        b -= mn;<br>    &#125;<br>    b &amp;= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-number">2</span>)<br>            a -= <span class="hljs-number">2</span>;<br>        cout &lt;&lt; (a &amp; <span class="hljs-number">1</span>) &lt;&lt; endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; (a &amp; <span class="hljs-number">1</span>) &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="B-Luntik-and-Subsequences"><a href="#B-Luntik-and-Subsequences" class="headerlink" title="B_Luntik_and_Subsequences"></a>B_Luntik_and_Subsequences</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gcd(a, b) __gcd(a, b)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 400005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> co(x) cout &lt;&lt; x &lt;&lt; <span class="hljs-meta-string">&quot; &quot;</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">ll <span class="hljs-title">quickpow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123; <br>    ll ans = <span class="hljs-number">1</span>;<br>    ll res = a;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * res;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        res = res * res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n; cin&gt;&gt;n;<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">65</span>];<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n) cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">sort</span>(a,a+n);<br>    ll cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">1</span>) cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span>&#123;<br>        ll cnt0=<span class="hljs-number">0</span>,cnt1=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-number">0</span>) cnt0++;<br>            <span class="hljs-built_in">eif</span>(a[i]==<span class="hljs-number">1</span>) cnt1++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        cnt=cnt1*<span class="hljs-built_in">quickpow</span>(<span class="hljs-number">2</span>,cnt0);<br>        cout&lt;&lt;cnt&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    IOS;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C-Grandma-Capa-Knits-a-Scarf"><a href="#C-Grandma-Capa-Knits-a-Scarf" class="headerlink" title="C_Grandma_Capa_Knits_a_Scarf"></a>C_Grandma_Capa_Knits_a_Scarf</h2><blockquote><p>题意：</p><p>待补</p><p>思路：</p><p>待补</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> sum1[<span class="hljs-number">100005</span>], sum2[<span class="hljs-number">100005</span>];<br><span class="hljs-keyword">int</span> p[<span class="hljs-number">1000005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> T;<br>cin &gt;&gt; T;<br><span class="hljs-comment">//T = 1;</span><br><span class="hljs-keyword">while</span>(T--) &#123;<br><span class="hljs-keyword">int</span> n;<br>cin &gt;&gt; n;<br>string s;<br>cin &gt;&gt; s;<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>string s1 = <span class="hljs-string">&quot;&quot;</span>;<br>sum1[<span class="hljs-number">0</span>] = sum2[n + <span class="hljs-number">1</span>] = sum2[n] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> now = <span class="hljs-string">&#x27;a&#x27;</span> + i;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; s.<span class="hljs-built_in">size</span>(); j++) &#123;<br><span class="hljs-keyword">if</span>(s[j] == now) &#123;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>) sum1[j] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> sum1[j] = sum1[j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>) sum1[j] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> sum1[j] = sum1[j - <span class="hljs-number">1</span>];<br>s1 += s[j];<br>p[s1.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>] = j;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>sum2[j] = sum2[j + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span>(s[j] == now) sum2[j]++;<br>&#125;<br>string s2 = s1;<br><span class="hljs-built_in">reverse</span>(s2.<span class="hljs-built_in">begin</span>(), s2.<span class="hljs-built_in">end</span>());<br><span class="hljs-comment">//cout &lt;&lt; &quot;fuck&quot; &lt;&lt; endl;</span><br><span class="hljs-keyword">if</span>(s1 == s2) &#123;<br><span class="hljs-comment">//cout &lt;&lt; (char)(&#x27;a&#x27; + i) &lt;&lt; endl;</span><br><span class="hljs-keyword">int</span> del = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; s1.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span> + (s1.<span class="hljs-built_in">size</span>() &amp; <span class="hljs-number">1</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>); k++) &#123;<br><span class="hljs-comment">//if(i == 0) cout &lt;&lt; k &lt;&lt; &quot; &quot; &lt;&lt; endl;</span><br><span class="hljs-keyword">int</span> pos1 = p[k], pos2 = p[s1.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> - k];<br><span class="hljs-comment">//if(i + &#x27;a&#x27; == &#x27;r&#x27;) cout &lt;&lt; k &lt;&lt; &quot; &quot; &lt;&lt; del &lt;&lt; endl;</span><br><span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>) del += <span class="hljs-built_in">abs</span>(sum1[pos1] - sum2[pos2]);<br><span class="hljs-keyword">else</span> del += <span class="hljs-built_in">abs</span>((sum1[pos1] - sum1[p[k - <span class="hljs-number">1</span>]]) - (sum2[pos2] - sum2[p[s1.<span class="hljs-built_in">size</span>() - k]]));<br>&#125;<br>ans = <span class="hljs-built_in">min</span>(ans, del);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(ans == <span class="hljs-number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span> cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 8</span><br><span class="hljs-comment">// rprarlap</span><br></code></pre></td></tr></table></figure><h2 id="D-Vupsen-Pupsen-and-0"><a href="#D-Vupsen-Pupsen-and-0" class="headerlink" title="D_Vupsen_Pupsen_and_0"></a>D_Vupsen_Pupsen_and_0</h2><blockquote><p>题意：</p><p>已知非零数组a[i]，求非零数组b[i]，使得a[i]*b[i] 的和为0</p><p>思路：</p><p>个数为偶数两两相消，个数为奇数的话，选取尾部三个数，判断两个相加不为零的数出来，当作一个数与剩下的一个数两两相消即可。</p><p>坑点：三个数时合并的两个数相加不能为0</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PI acos(-1.0)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eif <span class="hljs-meta-keyword">else</span> <span class="hljs-meta-keyword">if</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> en putchar(<span class="hljs-meta-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, x, y) for (int i = x; i &lt; y; i++)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> red(i, x, y) for (int i = x; i &gt; y; i--)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, x) memset(a, x, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS cin.tie(0), ios::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 100005</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pll pair<span class="hljs-meta-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a[maxn];<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">0</span>, n) &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">bool</span> t1 = <span class="hljs-literal">false</span>, t2 = <span class="hljs-literal">false</span>, t3 = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (a[n - <span class="hljs-number">1</span>] + a[n - <span class="hljs-number">2</span>] != <span class="hljs-number">0</span>) &#123;<br>            a[n - <span class="hljs-number">2</span>] = a[n - <span class="hljs-number">1</span>] + a[n - <span class="hljs-number">2</span>];<br>            t1 = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (a[n - <span class="hljs-number">2</span>] + a[n - <span class="hljs-number">3</span>] != <span class="hljs-number">0</span>) &#123;<br>                a[n - <span class="hljs-number">3</span>] = a[n - <span class="hljs-number">2</span>] + a[n - <span class="hljs-number">3</span>];<br>                a[n - <span class="hljs-number">2</span>] = a[n - <span class="hljs-number">1</span>];<br>                t2 = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                a[n - <span class="hljs-number">3</span>] = a[n - <span class="hljs-number">3</span>] + a[n - <span class="hljs-number">1</span>];<br>                t3 = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i += <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">if</span> (t1) &#123;<br>                    cout &lt;&lt; a[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; -a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; -a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                &#125;<br>                <span class="hljs-built_in">eif</span>(t2) &#123;<br>                    cout &lt;&lt; a[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; -a[i];<br>                &#125;<br>                <span class="hljs-built_in">eif</span>(t3) &#123;<br>                    cout &lt;&lt; a[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; -a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a[i + <span class="hljs-number">1</span>];<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cout &lt;&lt; a[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; -a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">2</span>) &#123;<br>            cout &lt;&lt; a[i + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; -a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SOLUTIONS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>solutions</tag>
      
      <tag>思维</tag>
      
      <tag>codeforces</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kmp &amp; exkmp</title>
    <link href="/2021/10/24/kmp%20&amp;%20exkmp/"/>
    <url>/2021/10/24/kmp%20&amp;%20exkmp/</url>
    
    <content type="html"><![CDATA[<h1 id="kmp-amp-exkmp"><a href="#kmp-amp-exkmp" class="headerlink" title="kmp &amp; exkmp"></a>kmp &amp; exkmp</h1><p>Knuth-Morris-Pratt &amp; entend kmp </p><p>字符串匹配</p><h2 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a>kmp</h2><blockquote><p><strong>Keywords</strong>：next[] </p><p>由BF改进，O(m+n)，传世经典属于是😅</p><p>以下均假设主串为 <code>S</code>，模式串为 <code>P</code> </p></blockquote><ul><li><p><strong>What is <code>next[]</code> ?</strong></p><p>针对模式串，<code>next[j]</code> 表示模式串下标 <code>j</code> <strong>之前</strong> 最长<strong>相同前后缀</strong>的长度，这不重要。</p><p>你只需要记住：<code>next[j]</code>表示当 <code>P[j]!=S[i]</code> 时，<code>j</code> 指针的<strong>下一步移动位置</strong>。</p><p>偷个好图：</p><p><img src="https://pic4.zhimg.com/v2-817073ca77f6c75d234392f207a3c81b_b.webp" alt="img"></p></li><li><p><strong>How to quickly build <code>next[]</code> ?</strong></p><blockquote><p>话不多说，直接上🐎</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kmp_pre</span><span class="hljs-params">(string p, <span class="hljs-keyword">int</span> next[])</span></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br>j=next[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&lt;p.<span class="hljs-built_in">length</span>())&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">-1</span>!=j &amp;&amp; p[i]!=p[j]) j=next[j];<br>next[++i]=++j;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>① 初始化<code>next[0]=-1</code></p><p>② 如果 <code>P[next[m]]==P[m]</code> ，那么 <code>next[m+1]=next[m]+1</code></p><p>③ 如果 <code>P[next[m]]!=P[m]</code>，令 <code>t=m, t=next[t]</code>，比较 <code>P[next[t]]</code>和 <code>P[m]</code>：相同的话 <code>next[m]=next[t]+1</code> , 不同的令<code>t=next[t]</code> 继续比较，直到 <code>t==-1</code> 时，<code>next[m]=0 </code></p><hr></li><li><p><strong>kmp计数模板</strong></p><p>模式串在主串中出现了几次 (可重叠、不可重叠)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kmp_pre</span><span class="hljs-params">(string p, <span class="hljs-keyword">int</span> next[])</span></span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br>j=next[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&lt;p.<span class="hljs-built_in">length</span>())&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">-1</span>!=j &amp;&amp; p[i]!=p[j]) j=next[j];<br>next[++i]=++j;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kmp_Count</span><span class="hljs-params">(string x, string y, <span class="hljs-keyword">int</span> next[])</span></span>&#123; <span class="hljs-comment">//x是模式串，y是主串</span><br><span class="hljs-keyword">int</span> i,j;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">kmp_pre</span>(x,next);<br>i=j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&lt;y.<span class="hljs-built_in">length</span>())&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">-1</span>!=j &amp;&amp; y[i]!=x[j]) j=next[j];<br>i++;j++;<br><span class="hljs-keyword">if</span>(j&gt;=x.<span class="hljs-built_in">length</span>())&#123;<br>ans++;<br>            <span class="hljs-comment">//以下二选一</span><br>j=next[j]; <span class="hljs-comment">//可重叠计数</span><br>            j=<span class="hljs-number">0</span>;<span class="hljs-comment">//不可重叠计数</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="exkmp"><a href="#exkmp" class="headerlink" title="exkmp"></a>exkmp</h2><blockquote><p><strong>Keywords</strong>: extend[] next[]</p><p>O(m+n)</p><p><strong>e-kmp 可以找到主串中所有模式串的匹配</strong></p></blockquote><ul><li><p><strong>What are they?</strong></p><p><strong>next[i]</strong>: 对模式串，表示 <code>P[i...m-1]</code> 与 <code>P[0...m-1]</code> 的最长公共前缀</p><p><strong>extend[i]</strong> : 对主串和模式串，表示 <code>S[i...n-1]</code>与 <code>P[0...m-1]</code> 的最长公共前缀</p></li><li><p><strong>How to build them?</strong></p><blockquote><p>🐎来</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ekmp_pre</span><span class="hljs-params">(string x, <span class="hljs-keyword">int</span> next[])</span></span>&#123;<br><span class="hljs-keyword">int</span> m=x.<span class="hljs-built_in">length</span>();<br>next[<span class="hljs-number">0</span>]=m;<br><span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(j+<span class="hljs-number">1</span>&lt;m &amp;&amp; x[j]==x[j+<span class="hljs-number">1</span>]) j++;<br>next[<span class="hljs-number">1</span>]=j;<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>; i&lt;m; i++)&#123;<br><span class="hljs-keyword">int</span> p=next[k]+k<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">int</span> L=next[i-k];<br><span class="hljs-keyword">if</span>(i+L&lt;p+<span class="hljs-number">1</span>) next[i]=L;<br><span class="hljs-keyword">else</span>&#123;<br>j=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,p-i+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(i+j&lt;m &amp;&amp; xi+j]==x[j]) j++;<br>next[i]=j;<br>k=i;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ekmp</span><span class="hljs-params">(string x, string y, <span class="hljs-keyword">int</span> next[], <span class="hljs-keyword">int</span> extend[])</span></span>&#123;<br><span class="hljs-built_in">ekmp_pre</span>(x,next);<br><span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> m=x.<span class="hljs-built_in">length</span>(), n=y.<span class="hljs-built_in">length</span>();<br><span class="hljs-keyword">while</span>(j&lt;n &amp;&amp; j&lt;m &amp;&amp; x[j]==y[j]) j++;<br>extend[<span class="hljs-number">0</span>]=j;<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br><span class="hljs-keyword">int</span> p=extend[k]+k<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">int</span> L=next[i-k];<br><span class="hljs-keyword">if</span>(i+L&lt;p+<span class="hljs-number">1</span>) extend[i]=L;<br><span class="hljs-keyword">else</span>&#123;<br>j=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,p-i+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(i+j&lt;n &amp;&amp; j&lt;m &amp;&amp; y[i+j]==x[j]) j++;<br>extend[i]=j;<br>k=i;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>假设我们已经知道 <code>next[]</code> , 如何求 <code>extend[]</code> 呢？</p><blockquote><p>此处变量设置会和🐎有所出入，主要是理解过程😅</p></blockquote><p>① 假设当前 <code>S</code> 串遍历到位置<code>i </code>, 即<code>extend[0...i-1]</code>的值均以求出；首先设置两个变量，<code>a</code> 和 <code>p</code>，<code>p</code> 代表以<code>a</code>为起始位置的字符匹配成功的最右边界，’p = 最后一个匹配成功位置+1’ ，即 <code>S[a...p) == P[0...p-a) </code>，假设下面基于<code>S[i]</code> 对应 <code>P[i-a]</code> 的几种情况开始讨论：</p><p>② 如图所示，如果 <code>i+next[i-a] &lt; p</code> ，根据 <code>next[]</code>  数组的定义，易知 <code>extend[i] = next[i-a]</code></p><p><img src="https://i.bmp.ovh/imgs/2021/10/b4e3168596aa7ae5.png" alt="img"></p><p>③ 如果 <code>i+next[i-a] == p</code> ，此时<code>S[p]!=P[p-a]</code> 且<code>P[p-i]!=P[p-a]</code>，但是<code>S[p]==P[p-i]</code>的可能仍然存在，所以直接从 <code>S[p]</code> 与 <code>P[p-i]</code> 开始向后匹配即可</p><p><img src="https://i.bmp.ovh/imgs/2021/10/c93d09cbc00e9b72.png" alt="img"></p><p>④ 如果 <code>i+next[i-a] &gt; p</code> ，此时说明 <code>S[i...p)</code> 与 <code>P[i-a...p-a]</code>相同，注意到 <code>S[p]!=P[p-a]</code> 并且 <code>P[p-i]==P[p-a]</code>，即 <code>S[p]!=T[p-i]</code> ，所以没必要继续往下判断了，故赋值<code>extend[i]=p-i</code></p><p><img src="https://i.bmp.ovh/imgs/2021/10/2f76cdb08c9080ee.png" alt="img"></p><p>⑤ 由上面的过程，求解<code>next[i]</code>的过程即为 <code>P</code> 自己和自己匹配的过程，over</p></li></ul><blockquote><p>需要细品</p></blockquote><hr><h2 id="题单"><a href="#题单" class="headerlink" title="题单"></a>题单</h2><p><a href="">Solution</a></p><ul><li><p>0x01 剪花布条 HDU-2087 <a href="https://vjudge.net/problem/HDU-2087">link</a></p></li><li><p>0x02 Secret HDU-6153 <a href="https://vjudge.net/problem/HDU-6153">link</a></p></li><li><p>0x03 Cow Patterns POJ-3167 <a href="https://vjudge.net/problem/POJ-3167">link</a></p></li><li><p>… 待更</p></li></ul><blockquote><p>kmp 和 exkmp 整的头晕….</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ALGORITHMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>note</tag>
      
      <tag>ACM</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC学习杂记</title>
    <link href="/2021/09/16/springMVC/"/>
    <url>/2021/09/16/springMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC学习杂记"><a href="#SpringMVC学习杂记" class="headerlink" title="SpringMVC学习杂记"></a>SpringMVC学习杂记</h1><blockquote><p>注：杂记即为看到啥记啥 毫无章法 乱jb记</p></blockquote><blockquote><p>常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等</p></blockquote><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>Spring 是最受欢迎的企业级 Java 应用程序开发的轻量级框架</p><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践</p><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul><li><p>表现层  web层  MVC是表现层的一个设计模型 </p></li><li><p>业务层  service层</p></li><li><p>持久层  dao层</p></li></ul><h3 id="优良特性"><a href="#优良特性" class="headerlink" title="优良特性"></a>优良特性</h3><ul><li>非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API</li><li>控制反转：IOC——Inversion of Control，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。</li><li>依赖注入：DI——Dependency Injection，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。</li><li>面向切面编程：Aspect Oriented Programming——AOP</li><li>容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期</li><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）</li></ul><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/album/c9159efce03899c144f5fd357785a4eba6956568.png" alt="img"></p><h2 id="MVC职责分析"><a href="#MVC职责分析" class="headerlink" title="MVC职责分析"></a>MVC职责分析</h2><ul><li><p>Controller：控制器</p><ul><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ul></li><li><p>Model：模型</p><ul><li>业务逻辑</li><li>保存数据的状态</li></ul></li><li><p>View：视图</p><ul><li>显示页面</li></ul></li></ul><hr><ul><li><p>MVC框架需要做哪些事情：</p><ol><li><p>将url映射到java类或java类的方法 .</p></li><li><p>封装用户提交的数据 .</p></li><li><p>处理请求–调用相关的业务处理–封装响应数据 .</p></li><li><p>将响应的数据进行渲染 . jsp / html 等表示层数据 .</p></li></ol></li></ul><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>jsp：本质就是一个servlet</p><ol><li><p>添加pom依赖</p></li><li><p>新建空Maven项目</p></li><li><p>Add Framework Support 选择Web Application添加 变成web项目 </p></li><li><p>导入servlet和jsp的依赖</p></li><li><p>编写一个Servlet类，用来处理用户的请求</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span><br></code></pre></td></tr></table></figure><ol start="6"><li>在WEB-INF目录下新建一个jsp的文件夹，新建test.jsp</li><li>在web.xml中注册Servlet</li><li>配置Tomcat 并启动测试</li></ol><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><blockquote><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量 级Web框架</p></blockquote><p> Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁</p><h3 id="中心控制器"><a href="#中心控制器" class="headerlink" title="中心控制器"></a>中心控制器</h3><p>Spring MVC框架以请求为驱动 , 围绕一个中心Servlet分派请求及提供其他功能，DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)。</p><p>SpringMVC的原理如下图所示：</p><p>​    当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/album/d3318d96dfdee2ee58b6bee91fde63570542aeb8.png" alt="img"></p><h3 id="SpringMVC执行原理"><a href="#SpringMVC执行原理" class="headerlink" title="SpringMVC执行原理"></a>SpringMVC执行原理</h3><blockquote><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现</p></blockquote><p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/album/825f31d6c644d7b4d5c7a270d3c5244f93282738.png" alt="img"></p><ol><li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p><blockquote><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p><p>如上url拆分成三部分：</p><p><a href="http://localhost:8080/">http://localhost:8080</a> 服务器域名</p><p>SpringMVC部署在服务器上的web站点</p><p>hello表示控制器</p><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p></blockquote></li><li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p></li><li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p></li><li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p></li><li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p></li><li><p>Handler让具体的Controller执行。</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p></li><li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p></li><li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p></li><li><p>最终视图呈现给用户。</p></li></ol><h3 id="配置版"><a href="#配置版" class="headerlink" title="配置版"></a>配置版</h3><ol><li><p>配置web.xml  ， 注册DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--1.注册DispatcherServlet--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--启动级别-1--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span><br>   <span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml  : [servletname]-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 处理映射器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 处理器适配器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.maskros.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">//注意：这里我们先导入Controller接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">//ModelAndView 模型和视图</span><br>       ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br><br>       <span class="hljs-comment">//封装对象，放在ModelAndView中。Model</span><br>       mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;HelloSpringMVC!&quot;</span>);<br>       <span class="hljs-comment">//封装要跳转的视图，放在ModelAndView中</span><br>       mv.setViewName(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//: /WEB-INF/jsp/hello.jsp</span><br>       <span class="hljs-keyword">return</span> mv;<br>  &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将自己的类交给SpringIOC容器，注册bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Handler--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.controller.HelloController&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;Kuangshen&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>配置tomcat启动测试</p></li></ol><blockquote><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li>查看控制台输出，看一下是不是缺少了什么jar包。</li><li>如果jar包存在，显示无法输出，<strong>就在IDEA的项目发布中，添加lib依赖</strong>！</li></ol></blockquote><hr><h3 id="※注解版"><a href="#※注解版" class="headerlink" title="※注解版"></a>※注解版</h3><ol><li><p>由于Maven可能存在资源过滤的问题，我们将配置完善</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入</p></li><li><p>配置 web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>/ 和 /* 的区别：</strong>&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错</p></blockquote></li><li><p>添加 SpringMVC 配置文件</p><p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">   支持mvc注解驱动</span><br><span class="hljs-comment">       在spring中一般采用@RequestMapping注解来完成映射关系</span><br><span class="hljs-comment">       要想使@RequestMapping注解生效</span><br><span class="hljs-comment">       必须向上下文中注册DefaultAnnotationHandlerMapping</span><br><span class="hljs-comment">       和一个AnnotationMethodHandlerAdapter实例</span><br><span class="hljs-comment">       这两个实例分别在类级别和方法级别处理。</span><br><span class="hljs-comment">       而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>       <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 Contronller</p><blockquote><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 编写控制类</span><br><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/HelloController&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>   <span class="hljs-comment">//真实访问地址 : 项目名/HelloController/hello</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(Model model)</span></span>&#123;<br>       <span class="hljs-comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span><br>       model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello,SpringMVC&quot;</span>);<br>       <span class="hljs-comment">//web-inf/jsp/hello.jsp</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建视图层</p><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;SpringMVC&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>配置 Tomcat 运行</p></li></ol><hr><p>使用springMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p><h3 id="控制器和RestFul"><a href="#控制器和RestFul" class="headerlink" title="控制器和RestFul"></a>控制器和RestFul</h3><blockquote><p>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</p><p>控制器负责解析用户的请求并将其转换为一个模型。</p><p>在Spring MVC中一个控制器类可以包含多个方法</p><p>在Spring MVC中，对于Controller的配置方式有很多种，一般<strong>使用注解@Controller</strong></p></blockquote><h4 id="实现Controller接口"><a href="#实现Controller接口" class="headerlink" title="实现Controller接口"></a>实现Controller接口</h4><ul><li><p>mvc的配置文件只留下 视图解析器</p></li><li><p>ControllerTest1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义控制器</span><br><span class="hljs-comment">//注意点：不要导错包，实现Controller接口，重写方法；</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">//返回一个模型视图对象</span><br>       ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>       mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Test1Controller&quot;</span>);<br>       mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>       <span class="hljs-keyword">return</span> mv;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;/t1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.maskros.controller.ControllerTest1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写前端test.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>   &lt;title&gt;Kuangshen&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li></ul><hr><ul><li>实现接口Controller定义控制器是较老的办法</li><li>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li></ul><h4 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h4><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>增加一个ControllerTest2类，使用注解实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Controller注解的类会自动添加到Spring上下文中</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest2</span></span>&#123;<br><br>   <span class="hljs-comment">//映射访问路径</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/t2&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model)</span></span>&#123;<br>       <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>       model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;ControllerTest2&quot;</span>);<br>       <span class="hljs-comment">//返回视图位置</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</p></blockquote><h4 id="RequestMapping-使用"><a href="#RequestMapping-使用" class="headerlink" title="@RequestMapping 使用"></a>@RequestMapping 使用</h4><ul><li>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 只注解在方法上面</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br>   <span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//访问路径：http://localhost:8080 / 项目名 / h1</span><br><br><span class="hljs-comment">// 同时注解类与方法@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br>   <span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//访问路径：http://localhost:8080 / 项目名/ admin /h1 </span><br></code></pre></td></tr></table></figure><h4 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h4><blockquote><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。localhost:8080/a/b/c/d/……</p></blockquote><p>在Spring MVC中可以使用  @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>&#123;<br><br>   <span class="hljs-comment">//映射访问路径</span><br>   <span class="hljs-meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p2, Model model)</span></span>&#123;<br>       <br>       <span class="hljs-keyword">int</span> result = p1+p2;<br>       <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>       model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果：&quot;</span>+result);<br>       <span class="hljs-comment">//返回视图位置</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>       <br>  &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p>使用路径变量的好处？</p><ol><li><ul><li>使路径变得更加简洁；</li><li>获得参数更加方便，框架会自动进行类型转换。</li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</li></ul></li></ol><p><strong>使用method属性指定请求类型</strong></p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径,必须是POST请求</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index2</span><span class="hljs-params">(Model model)</span></span>&#123;<br>   model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello!&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 我们使用浏览器地址栏进行访问默认是Get请求，会报错405</span><br><span class="hljs-comment">// 如果将POST修改为GET则正常了</span><br><br><span class="hljs-comment">//映射访问路径,必须是Get请求</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index2</span><span class="hljs-params">(Model model)</span></span>&#123;<br>   model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello!&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。\</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的</strong></p><p>方法级别的注解变体有如下几个：组合注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span><br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-meta">@PutMapping</span><br><span class="hljs-meta">@DeleteMapping</span><br><span class="hljs-meta">@PatchMapping</span><br></code></pre></td></tr></table></figure><p><strong>@GetMapping</strong> 是一个组合注解，平时使用的会比较多, 它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式</p><h3 id="数据处理和跳转"><a href="#数据处理和跳转" class="headerlink" title="数据处理和跳转"></a>数据处理和跳转</h3><p>转发 重定向</p><p>接受请求参数以及数据回显</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestParam(&quot;xxx&quot;)</span>  <span class="hljs-comment">//必须要求传这个参数</span><br></code></pre></td></tr></table></figure><h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><blockquote><p>JavaScript Object Notation, JS 对象标记 是一种轻量级的数据交换格式，目前使用特别广泛，采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据</p></blockquote><ul><li>@Controller：定义一个控制器类，</li><li>@RestController： 注解相当于 @Controller ＋ @ResponseBody 合在一起的作用。</li><li>@ResponseBody：标记Controller类中的方法。把return的结果变成<strong>JSON对象</strong>返回。</li></ul><p>语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;QinJiang&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>&#125;<br>&#123;<span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-string">&quot;男&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>Json 和 JavaScript 对象互转：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">JSON</span>.parse()  <span class="hljs-comment">//从JSON字符串转换为JavaScript 对象</span><br><span class="hljs-built_in">JSON</span>.stringify() <span class="hljs-comment">//从JavaScript 对象转换为JSON字符串</span><br></code></pre></td></tr></table></figure><h3 id="Controller返回Json数据"><a href="#Controller返回Json数据" class="headerlink" title="Controller返回Json数据"></a>Controller返回Json数据</h3><h4 id="Jackson使用"><a href="#Jackson使用" class="headerlink" title="Jackson使用"></a>Jackson使用</h4><p>导入它的jar包 配置SpringMVC</p><p>编写Controller时需要运用到两个新东西：@ResponseBody，ObjectMapper对象</p><p>乱码处理</p><h4 id="FastJson使用"><a href="#FastJson使用" class="headerlink" title="FastJson使用"></a>FastJson使用</h4><blockquote><p> 阿里开发 方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换</p></blockquote><h4 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Json乱码问题配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><blockquote><p>Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）</p><p>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术</p></blockquote><ul><li>可以通过 iframe 标签来伪造一个Ajax</li><li><strong>利用AJAX可以做：</strong><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>….</li></ul></li></ul><h3 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h3><blockquote><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据</p><p>jQuery是一个库，提供大量的JavaScript函数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs text">jQuery.ajax(...)<br>      部分参数：<br>            url：请求地址<br>            type：请求方式，GET、POST（1.9.0之后用method）<br>        headers：请求头<br>            data：要发送的数据<br>    contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;)<br>          async：是否异步<br>        timeout：设置请求超时时间（毫秒）<br>      beforeSend：发送请求前执行的函数(全局)<br>        complete：完成之后执行的回调函数(全局)<br>        success：成功之后执行的回调函数(全局)<br>          error：失败之后执行的回调函数(全局)<br>        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型<br>        dataType：将服务器端返回的数据转换成指定类型<br>          &quot;xml&quot;: 将服务器端返回的内容转换成xml格式<br>          &quot;text&quot;: 将服务器端返回的内容转换成普通文本格式<br>          &quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。<br>        &quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式<br>          &quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象<br>        &quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback=?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数<br></code></pre></td></tr></table></figure><h3 id="Ajax异步加载数据"><a href="#Ajax异步加载数据" class="headerlink" title="Ajax异步加载数据"></a>Ajax异步加载数据</h3><p>实现了数据回显</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">   $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">       $(<span class="hljs-string">&quot;#btn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">           $.post(<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">               <span class="hljs-built_in">console</span>.log(data)</span><br><span class="javascript">               <span class="hljs-keyword">var</span> html=<span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">               <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;data.length ; i++) &#123;</span><br><span class="javascript">                   html+= <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span> +</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span></span><br><span class="javascript">              &#125; <span class="hljs-comment">//html拼接</span></span><br><span class="javascript">               $(<span class="hljs-string">&quot;#content&quot;</span>).html(html);</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h2><blockquote><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。可用于验证用户是否登录 (认证用户)</p></blockquote><p>过滤器和拦截器的区别：</p><p>过滤器：</p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><p>拦截器 (是AOP思想的具体应用)</p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li></ul><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口</p><p>在springmvc的配置文件中配置拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--/** 包括路径及其子路径--&gt;</span><br>            <span class="hljs-comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span><br>            <span class="hljs-comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/somewhere/**&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--拦截somewhere下的 somewhere用@RequestMapping()配置 --&gt;</span><br>            <span class="hljs-comment">&lt;!--bean配置的就是拦截器--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.maskros.interceptor.MyInterceptor&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>每写一个拦截器要到xml中配置这个拦截器</p><p>exp：未登录时点击主页按钮会被拦截器重定向到登录页面</p><h2 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h2><p>SpringMVC + Vue + SpringBoot + SpringCloud + Linux</p><p>Spring：IOC 和 AOP</p><p>SpringMVC：SpringMVC的执行流程，SSM框架整合</p><p>SSM =  javaweb做项目</p><p>MVC：模型 (dao, service) , 视图 (jsp) , 控制器 (servlet)</p><p>servlet: 转发 重定向</p><p>前端 数据传输 实体类</p><p>实体类：用户名 密码  生日 ….. n个</p><p>前端：用户名 密码</p><p>pojo: User</p><p>vo: UserVo</p><p>MVVM:  M - V - VM (ViewModel: 双向绑定)</p><p>form表单 method: get/post</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;/hello&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;method&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>Spring: 大杂烩，我们可以将SpringMVC中所有要用到的Bean，注册到Spring中</p><p>访问网站：-&gt; Servlet(中转调度) &lt;=&gt; Service -&gt; Dao -&gt; Sql</p><p>前后端分离时代：</p><p>后端部署后端，提供接口，提供数据：json</p><p>前端独立部署，负责渲染后端的数据</p><p>js:</p><ul><li>函数：闭包() ()</li><li>Dom<ul><li>id, name, tag</li><li>create, remove</li></ul></li><li>Bom<ul><li>window</li><li>document</li></ul></li></ul><p>ES6: import require</p><p>js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">data:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:$(<span class="hljs-string">&quot;#username&quot;</span>).val()&#125;,<br><span class="hljs-comment">// data传键值对 &#123;x:y&#125;  .val()==value 左边的name对应controller的name 右边的username对应下面输入框的id,加#才能取到！    </span><br></code></pre></td></tr></table></figure><p>IDEA alt+insert 快捷键 实现接口等等 </p>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>springMVC</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL使用手册</title>
    <link href="/2021/08/13/STL%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2021/08/13/STL%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="STL使用手册"><a href="#STL使用手册" class="headerlink" title="STL使用手册"></a>STL使用手册</h1><p>Standard Template Library</p><blockquote><p>又名《👴怕忘了先把他写下来》</p></blockquote><h2 id="我-是-谁"><a href="#我-是-谁" class="headerlink" title="我 是 谁 ?"></a>我 是 谁 ?</h2><p>斯丹德儿的 坦普雷特 莱博瑞 即标准模板库</p><ul><li><p>重要特点：数据结构和算法的分离</p></li><li><p>重要特性：不是面向对象的</p></li><li><p>逻辑层次：体现了泛型化程序设计的思想</p></li><li><p>实现层次：以一种类型参数化的方式实现，基于模板(template)</p></li></ul><p>六大组件：</p><ul><li>容器（Container），是一种数据结构，如list，vector，deques ，以模板类的方法提供 ;</li><li>迭代器（Iterator），提供了访问容器中对象的方法。迭代器就如同一个指针。C++的指针也是一种迭代器。迭代器也可以是那些定义了operator*()以及其他类似于指针的操作符地方法的类对象；</li><li>算法（Algorithm），是用来操作容器中的数据的模板函数。如sort()，find()，函数本身与他们操作的数据的结构和类型无关 ;</li><li>仿函数（Functor）</li><li>适配器（Adaptor）</li><li>分配器（allocator）</li></ul><h2 id="👴-常用的"><a href="#👴-常用的" class="headerlink" title="👴 常用的"></a>👴 常用的</h2><blockquote><p>以下不按顺序，想到啥就写啥，有个🥚的顺序</p></blockquote><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//构造函数</span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(str,index)</span></span>; <span class="hljs-comment">//将字符串str内“始于位置index”的部分当作字符串的初值</span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(str,index,n)</span></span>; <span class="hljs-comment">//将字符串str内“始于index且长度顶多n”的部分作为字符串的初值</span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(n,c)</span></span>; <span class="hljs-comment">//生成一个字符串，包含n个c字符(char)</span><br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(str.begin(),str.end())</span></span>; <span class="hljs-comment">//以区间begin():end() (不包含end())内的字符作为字符串s的初值</span><br><br><span class="hljs-comment">//操作函数</span><br>s.<span class="hljs-built_in">erase</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">//删除</span><br>s.<span class="hljs-built_in">replace</span>(pos,len,str); <span class="hljs-comment">//替换，从pos开始长为len被替换为str</span><br>s.<span class="hljs-built_in">find</span>(str,pos=<span class="hljs-number">0</span>); <span class="hljs-comment">//从pos向右查找，返回str第一次出现的位置</span><br>s.<span class="hljs-built_in">rfind</span>(str,pos=npos); <span class="hljs-comment">//从pos反向查找，返回找到位置</span><br>s.<span class="hljs-built_in">find_first_of</span>(str); <span class="hljs-comment">//查找第一个属于str中字符的位置</span><br>s.<span class="hljs-built_in">find_first_not_of</span>(str); <span class="hljs-comment">//查找第一个不属于str中字符位置</span><br>s.<span class="hljs-built_in">find_last_of</span>(str);<br>s.<span class="hljs-built_in">find_last_not_of</span>(str);<br>s1.<span class="hljs-built_in">compare</span>(s2); <span class="hljs-comment">//比较，相等0大于1小于-1</span><br>s1.<span class="hljs-built_in">compare</span>(pos,len,s2)<span class="hljs-comment">//从s1的pos开始长为len与s2比较</span><br></code></pre></td></tr></table></figure><h4 id="stringstream"><a href="#stringstream" class="headerlink" title="stringstream"></a>stringstream</h4><p>自动且直接的类型转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">stringstream sstream;<br><span class="hljs-comment">//数据类型转换</span><br>string str;<br><span class="hljs-keyword">int</span> a=<span class="hljs-number">123</span>;<br>sstream &lt;&lt; a;<br>sstream &gt;&gt; str;<br>cout&lt;&lt;str;<br>cout&lt;&lt;sstream.<span class="hljs-built_in">str</span>(); <br><span class="hljs-comment">//多个字符串拼接</span><br>sstream &lt;&lt; <span class="hljs-string">&quot;xxxx&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-string">&quot;aaaaa&quot;</span>;<br><span class="hljs-comment">//清空stringstream</span><br>sstream.<span class="hljs-built_in">clear</span>();<br>sstream.<span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h4><p>便携结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//访问通过first second</span><br><span class="hljs-comment">//可以通过一般运算符比较，先比较first再second</span><br><span class="hljs-function">pair&lt;string,<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">p</span> <span class="hljs-params">(str,<span class="hljs-number">123</span>)</span></span>;<br>pair&lt;string,<span class="hljs-keyword">int</span>&gt; p = <span class="hljs-built_in">make_pair</span>(str,<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><h4 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h4><p>向量容器，动态存储</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-keyword">int</span>&gt; v;<br>v.<span class="hljs-built_in">front</span>(); v.<span class="hljs-built_in">back</span>();<br>v.<span class="hljs-built_in">begin</span>(); v.<span class="hljs-built_in">end</span>();<br>v.<span class="hljs-built_in">push_back</span>();<br>v.<span class="hljs-built_in">size</span>();<br>v.<span class="hljs-built_in">empty</span>();<br>v.<span class="hljs-built_in">clear</span>();<br>v.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">//删除表尾元素</span><br>v.<span class="hljs-built_in">insert</span>(it,x); <span class="hljs-comment">//向迭代器it 指向的元素前插入新元素x</span><br>v.<span class="hljs-built_in">insert</span>(it,n,x); <span class="hljs-comment">//插入n个x</span><br>v.<span class="hljs-built_in">insert</span>(it, first, last); <span class="hljs-comment">//将由迭代器first和last 所指定的序列[first, last)插入到迭代器it指向的元素前面</span><br>v.<span class="hljs-built_in">erase</span>(it); <span class="hljs-comment">//删</span><br>v.<span class="hljs-built_in">erase</span>(first,last);<br>v.<span class="hljs-built_in">reverse</span>(n); <span class="hljs-comment">//预分配缓冲空间，使存储空间至少可容纳n个元素</span><br>v.<span class="hljs-built_in">resize</span>(n); <span class="hljs-comment">//改变序列长度，超出元素删除，若源空间小于n，则默认值填满空间</span><br>v.<span class="hljs-built_in">resize</span>(n,val); <span class="hljs-comment">//超出的用val填满</span><br></code></pre></td></tr></table></figure><h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h4><p>栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">stack&lt;<span class="hljs-keyword">int</span>&gt; s;<br>s.<span class="hljs-built_in">push</span>(x);<br>s.<span class="hljs-built_in">pop</span>();<br>s.<span class="hljs-built_in">top</span>();<br>s.<span class="hljs-built_in">empty</span>();<br>s.<span class="hljs-built_in">size</span>();<br></code></pre></td></tr></table></figure><h4 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h4><p>队列，优先队列，双端队列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// queue</span><br>queue&lt;<span class="hljs-keyword">int</span>&gt; q;<br>q.<span class="hljs-built_in">push</span>(x);<br>q.<span class="hljs-built_in">pop</span>();<br>q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">back</span>();<br>q.<span class="hljs-built_in">empty</span>();<br>q.<span class="hljs-built_in">size</span>();<br><br><span class="hljs-comment">// priority_queue</span><br>priority&lt;<span class="hljs-keyword">int</span>&gt; q; <span class="hljs-comment">//默认大者优先</span><br>priority&lt;<span class="hljs-keyword">int</span>, vector&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; q; <span class="hljs-comment">//小的先出队 三个模板参数：元素类型，容器类型，比较算子</span><br><span class="hljs-comment">// 优先级设置：定义结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-keyword">int</span> grade;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (Student s1, Student s2)&#123;<br>        <span class="hljs-keyword">return</span> s1.grade&lt;s2.grade;<br>        <span class="hljs-comment">//此处小于号还是小于的作用，故队列中以成绩高的学生优先，若反之变号即可</span><br>    &#125;<br>&#125;;<br>priority_queue&lt;Student&gt; q;<br><span class="hljs-comment">//也可以把重载的函数写在结构体外面</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmp</span>&#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(Student s1, Student s2)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> s1.grade&lt;s2.grade;<br>    &#125;<br>&#125;;<span class="hljs-comment">//tips:优先队列中的cmp和sort中的cmp效果相反</span><br>priority_queue&lt;Student,vector&lt;Student&gt;,cmp&gt; q;<br><span class="hljs-comment">//如果结构体内数据庞大，像出现字符串或者数组，建议使用引用来提高效率。此时比较类的参数需要加上 const 和 &amp;</span><br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> Student &amp;s1, <span class="hljs-keyword">const</span> Student &amp;s2)&#123;<br><span class="hljs-keyword">return</span> s1.grade&lt;s2.grade;<br>&#125;<br><br><span class="hljs-comment">//deque</span><br>deque&lt;<span class="hljs-keyword">int</span>&gt; d;<br>d.<span class="hljs-built_in">push_back</span>(x); <span class="hljs-comment">//尾部插入</span><br>d.<span class="hljs-built_in">push_front</span>(x); <span class="hljs-comment">//首部插入元素</span><br>d.<span class="hljs-built_in">insert</span>(d.<span class="hljs-built_in">begin</span>()+len,x); <span class="hljs-comment">//中间插入元素</span><br><span class="hljs-comment">//可以通过 d[0] d[1] 访问</span><br>d.<span class="hljs-built_in">pop_front</span>(); <span class="hljs-comment">//删除头部</span><br>d.<span class="hljs-built_in">pop_back</span>();<br>d.<span class="hljs-built_in">erase</span>(d.<span class="hljs-built_in">begin</span>()+len); <span class="hljs-comment">//删除指定位置元素，可以写多个</span><br></code></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>键值对，元素按关键字有序，内部红黑树</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// map空间占用率高</span><br>map&lt;string,<span class="hljs-keyword">int</span>&gt; m;<br>m[key]=value;<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(key,value));<br>m.<span class="hljs-built_in">erase</span>(key);<br>m.<span class="hljs-built_in">erase</span>(it);<br>m.<span class="hljs-built_in">clear</span>();<br>m.<span class="hljs-built_in">size</span>();<br>map&lt;string,<span class="hljs-keyword">int</span>&gt;::iterator it;<br><span class="hljs-keyword">for</span>(it=mp.<span class="hljs-built_in">begin</span>();it!=mp.<span class="hljs-built_in">end</span>();++it)&#123;<br>    cout&lt;&lt;it-&gt;first&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-comment">// unordered_map 效率较高 内部哈希表</span><br><span class="hljs-comment">// 对于查找问题，unordered_map会更加高效一些，因此遇到查找问题，常会考虑一下用unordered_map</span><br></code></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>无重复，按键值自动排序</p><p>数据结构为红黑树。以节点形式保存（动态)，用迭代器访问</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">set&lt;<span class="hljs-keyword">int</span>&gt; s;<br>s.<span class="hljs-built_in">begin</span>(); s.<span class="hljs-built_in">end</span>();<br>s.<span class="hljs-built_in">clear</span>();<br>s.<span class="hljs-built_in">empty</span>();<br>s.<span class="hljs-built_in">erase</span>(x);<br>s.<span class="hljs-built_in">find</span>(x);<br>s.<span class="hljs-built_in">insert</span>(x);<br>s.<span class="hljs-built_in">size</span>();<br>s.<span class="hljs-built_in">lower_bound</span>(value); <span class="hljs-comment">//返回第一个大于等于value的定位器</span><br>s.<span class="hljs-built_in">upper_bound</span>(value); <span class="hljs-comment">//返回最后一个大于等于value的定位器</span><br>set&lt;<span class="hljs-keyword">int</span>&gt;::iterator it;<br><span class="hljs-keyword">for</span>(it=s.<span class="hljs-built_in">begin</span>();it!=s.<span class="hljs-built_in">end</span>();it++)<br>cout&lt;&lt;*it&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>链表</p><ul><li>如果你需要高效的随即存取，而不在乎插入和删除的效率，使用vector </li><li>如果你需要大量的插入和删除，而不关心随即存取，则应使用list </li><li>如果你需要随即存取，而且关心两端数据的插入和删除，则应使用deque</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">list&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>list&lt;<span class="hljs-keyword">int</span>&gt; a&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>a.<span class="hljs-built_in">push_back</span>(x);<br>a.<span class="hljs-built_in">push_front</span>(x);<br>a.<span class="hljs-built_in">empty</span>();<br>a.<span class="hljs-built_in">resize</span>(n);<br>a.<span class="hljs-built_in">clear</span>();<br>a.<span class="hljs-built_in">front</span>(); a.<span class="hljs-built_in">back</span>();<br>a.<span class="hljs-built_in">reverse</span>();<br>a.<span class="hljs-built_in">merge</span>(b); <span class="hljs-comment">//b变空，a尾插入b</span><br>a.<span class="hljs-built_in">insert</span>(pos,x);<br>a.<span class="hljs-built_in">insert</span>(pos,b.<span class="hljs-built_in">begin</span>(),b.<span class="hljs-built_in">end</span>());<br>a.<span class="hljs-built_in">erase</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>a.<span class="hljs-built_in">remove</span>(x);<br></code></pre></td></tr></table></figure><h4 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h4><p>存放二进制0/1的容器，可以声明非常大的二进制位而不限于64，用来优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">bitset&lt;N&gt; b; <span class="hljs-comment">//表示长为N的二进制串</span><br><span class="hljs-comment">// 通过b[pos]访问</span><br>b.<span class="hljs-built_in">any</span>(); <span class="hljs-comment">//存在为1的二进制位</span><br>b.<span class="hljs-built_in">none</span>(); <span class="hljs-comment">//不存在为1的二进制位</span><br>b.<span class="hljs-built_in">count</span>(); <span class="hljs-comment">//置1的二进制位的个数</span><br>b.<span class="hljs-built_in">size</span>();<br>b.<span class="hljs-built_in">test</span>(pos); <span class="hljs-comment">//在pos位处是否为1</span><br>b.<span class="hljs-built_in">set</span>(); <span class="hljs-comment">//所有位置1</span><br>b.<span class="hljs-built_in">set</span>(pos);<br>b.<span class="hljs-built_in">reset</span>(); <span class="hljs-comment">//所有位置0</span><br>b.<span class="hljs-built_in">reset</span>(pos);<br>b.<span class="hljs-built_in">flip</span>(); <span class="hljs-comment">//逐位取反</span><br>b.<span class="hljs-built_in">flip</span>(pos);<br></code></pre></td></tr></table></figure><h3 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h3><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">lower_bound</span>(a,a+n,x); <span class="hljs-comment">//二分查找第一个大于等于x的位置</span><br><span class="hljs-built_in">upper_bound</span>(a,a+n,x); <span class="hljs-comment">//二分查找第一个大于x的位置</span><br><span class="hljs-built_in">find</span>();<br><span class="hljs-built_in">rfind</span>();<br></code></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">sort</span>(a,a+n,cmp); <span class="hljs-comment">//默认ASC</span><br></code></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">swap</span>(a,b); <span class="hljs-comment">//交换</span><br><span class="hljs-built_in">replace</span>(pos,len,str); <span class="hljs-comment">//替换</span><br><span class="hljs-built_in">unique</span>(a,a+n); <span class="hljs-comment">//去除相邻的重复元素,会把重复的藏到末尾，使用前需要先排序</span><br></code></pre></td></tr></table></figure><h4 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">next_permutation</span>(a,a+n); <span class="hljs-comment">//下一个全排列</span><br><span class="hljs-built_in">prev_permutation</span>(a,a+n); <span class="hljs-comment">//上一个全排列</span><br><span class="hljs-comment">//函数返回bool值，一般配合while()</span><br></code></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">isalpha</span>(<span class="hljs-keyword">char</span> x); <span class="hljs-comment">//小写字母返回2，大写字母1，非字母0</span><br><span class="hljs-built_in">tolower</span>(<span class="hljs-keyword">char</span> x); <span class="hljs-built_in">toupper</span>(<span class="hljs-keyword">char</span> x); <span class="hljs-comment">//返回小写，大写字母的ASCII值，非字母则相等</span><br><span class="hljs-comment">//海伦公式</span><br>p=(a+b+c)/<span class="hljs-number">2</span>;<br>s=<span class="hljs-built_in">sqrt</span>(p*(p-a)*(p-b)*(p-c));<br><span class="hljs-built_in">abs</span>(<span class="hljs-keyword">int</span> x); <span class="hljs-comment">//只用于整数</span><br><span class="hljs-built_in">fabs</span>(<span class="hljs-keyword">double</span> x); <span class="hljs-comment">//精度更高</span><br></code></pre></td></tr></table></figure><hr><p>暂时就这些了，寄！</p>]]></content>
    
    
    <categories>
      
      <category>ALGORITHMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>note</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我确实不会线段树</title>
    <link href="/2021/08/06/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <url>/2021/08/06/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p>Segment Tree</p><blockquote><p>一个问题，只要能化成对一些连续点的修改和统计问题，基本就可以用线段树来艹了</p></blockquote><hr><p>原理：将[1,n]分解成若干特定的子区间(数量不超过4*n),然后，将每个区间[L,R]都分解为少量特定的子区间，通过对这些少量子区间的修改或者统计，来实现快速对[L,R]的修改或者统计。每一个非叶结点所表示的结点[a,b]，其左儿子表示的区间为[a,(a+b)/2]，右儿子表示的区间为[(a+b)/2,b]。</p><p>作用：对编号连续的一些点的区间信息进行修改或者统计操作，用线段树统计的东西，必须符合<strong>区间加法</strong>。与树状数组不同的是，线段树不止适用于区间求和的查询，也可以进行区间最大值，区间最小值，或者区间异或值的查询。</p><p>主要操作：区间查询、点更新、区间更新</p><p>例如：</p><ul><li>给定s和t，求其区间上的最小值</li><li>给定i和x，把ai的值改成x</li></ul><p>更新和区间查询的复杂度都是 <strong>O(log(N))</strong></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>build, update(内含push_down), query</p></blockquote><h3 id="建树-build"><a href="#建树-build" class="headerlink" title="建树 (build)"></a>建树 (build)</h3><p>线段树是一棵平衡二叉树，每个节点都对应一条线段(区间)，反之不成立，每个节点 $p$ 的左右子节点的编号分别为 $2p$ 和 $2p+1$ ，假如节点 $p$ 储存区间 $[a,b]$ 的和，设 $mid=[\frac{l+r}{2}]$，那么两个子节点分别储存 $[l,mid]$ 和 $[mid+1,r]$ 的和。可以发现，左节点对应的区间长度，与右节点相同或者比之恰好多 $1$。</p><p>故建树可考虑递归进行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll l = <span class="hljs-number">1</span>, ll r = n, ll p = <span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-comment">// 到达叶子节点</span><br>        tree[p]=A[l]; <span class="hljs-comment">// 用数组中的数据赋值</span><br>    <span class="hljs-keyword">else</span>&#123;<br>        ll mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">build</span>(l, mid, p * <span class="hljs-number">2</span>); <span class="hljs-comment">// 先建立左右子节点</span><br>        <span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r, p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>        tree[p] = tree[p * <span class="hljs-number">2</span>] + tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]; <span class="hljs-comment">// 该节点的值等于左右子节点之和</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 这里👴偷了个 gif 来演示一下过程 (虽然大部分都是偷的🤡)</p><img src="https://pic4.zhimg.com/v2-c2d11b12c87b6a7076e3df0bb3585423_b.webp" alt="img" style="zoom:60%;" /><h3 id="区间修改-update"><a href="#区间修改-update" class="headerlink" title="区间修改(update)"></a>区间修改(update)</h3><p>首先定义”<strong>懒标记</strong>“(即“延迟标记”) <code>mark[]</code>：</p><p>对于区间修改，朴素的想法是用<strong>递归</strong>的方式一层层修改（类似于线段树的建立），但这样的时间复杂度比较高。使用懒标记后，对于那些正好是线段树节点的区间，我们不继续递归下去，而是打上一个<strong>标记</strong>，将来要用到它的<strong>子区间</strong>的时候，再向下<strong>传递</strong></p><p>直接上🐴 (非最简):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(ll l, ll r, ll d, ll p = <span class="hljs-number">1</span>, ll cl = <span class="hljs-number">1</span>, ll cr = n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &gt; r || cr &lt; l) <span class="hljs-comment">// 区间无交集</span><br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 剪枝</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cl &gt;= l &amp;&amp; cr &lt;= r) <span class="hljs-comment">// 当前节点对应的区间包含在目标区间中</span><br>    &#123;<br>        tree[p] += (cr - cl + <span class="hljs-number">1</span>) * d; <span class="hljs-comment">// 更新当前区间的值</span><br>        <span class="hljs-keyword">if</span> (cr &gt; cl) <span class="hljs-comment">// 如果不是叶子节点</span><br>            mark[p] += d; <span class="hljs-comment">// 给当前区间打上标记</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">// 与目标区间有交集，但不包含于其中</span><br>    &#123;<br>        ll mid = (cl + cr) / <span class="hljs-number">2</span>;<br>        mark[p * <span class="hljs-number">2</span>] += mark[p]; <span class="hljs-comment">// 标记向下传递</span><br>        mark[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p];<br>        tree[p * <span class="hljs-number">2</span>] += mark[p] * (mid - cl + <span class="hljs-number">1</span>); <span class="hljs-comment">// 往下更新一层</span><br>        tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p] * (cr - mid);<br>        mark[p] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 清除标记</span><br>        <span class="hljs-built_in">update</span>(l, r, d, p * <span class="hljs-number">2</span>, cl, mid); <span class="hljs-comment">// 递归地往下寻找</span><br>        <span class="hljs-built_in">update</span>(l, r, d, p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>        tree[p] = tree[p * <span class="hljs-number">2</span>] + tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]; <span class="hljs-comment">// 根据子节点更新当前节点的值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>更新时，我们是从最大的区间开始，递归向下处理。注意到，<strong>任何区间都是线段树上某些节点的并集</strong>。于是我们记目标区间为 $[l,r] $，当前区间为 $[cl,cr]$ ， 当前节点为 $p$ ，我们会遇到三种情况：</p><ol><li><p>当前区间与目标区间没有交集：</p><p>直接结束递归</p></li><li><p>当前区间被包括在目标区间里：</p><p>可以更新区间，不能忘记乘上区间长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">tree[p] += (cr - cl + <span class="hljs-number">1</span>) * d;<br></code></pre></td></tr></table></figure><p>然后打上懒标记（叶子节点可以不打标记，因为不会再向下传递了）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">mark[p] += d;<span class="hljs-comment">//表示“该区间上每一个点都要加上d”。因为原来可能存在标记，所以是+=而不是=</span><br></code></pre></td></tr></table></figure></li><li><p>当前区间与目标区间相交，但不包含于其中:</p><p>这时把当前区间一分为二，分别进行处理。如果存在懒标记，要先把懒标记传递给子节点（注意也是+=，因为原来可能存在懒标记)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">ll mid = (cl + cr) / <span class="hljs-number">2</span>;<br>mark[p * <span class="hljs-number">2</span>] += mark[p];<br>mark[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p];<br></code></pre></td></tr></table></figure><p>两个子节点的值也就需要相应的更新（后面乘的是区间长度) :[p * 2] += mark[p] * (mid - cl + 1);</p><p>tree[p * 2 + 1] += mark[p] * (cr - mid);</p><p>不要忘记清除该节点的懒标记：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">mark[p]=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>因为贵标记和👴一样是个懒蛋，只往下传递一层，所以这个过程并不是递归的，以后要用再才继续传递。其实我们常常把这个传递过程封装成一个函数<strong>扑屎裆</strong> :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(ll p, ll len)</span></span>&#123;<br>    mark[p * <span class="hljs-number">2</span>] += mark[p];<br>    mark[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p];<br>    tree[p * <span class="hljs-number">2</span>] += mark[p] * (len - len / <span class="hljs-number">2</span>);<br>    tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p] * (len / <span class="hljs-number">2</span>); <span class="hljs-comment">// 右边的区间可能要短一点</span><br>    mark[p] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//这样儿 update() 里面调用的时候直接 push_down(p, cr - cl + 1); 就彳亍</span><br></code></pre></td></tr></table></figure><p>传递完标记后，再递归地去处理左右两个子节点就彳亍乐</p></li></ol><p>下面儿👴又偷了个视频展示一下区间 $[1,4]$ 加上 $1$ 的过程：</p><p><video width=70% src="https://vdn1.vzuu.com/SD/534181e0-23ad-11eb-905e-ca0d7949bec0.mp4?disable_local_cache=1&auth_key=1628242679-0-0-804945d6146979c7aa1236d8806960d8&f=mp4&bu=pico&expiration=1628242679&v=hw"></video></p><p>至于单点修改，只需要令左右端点相等即可~</p><h3 id="区间查询-query"><a href="#区间查询-query" class="headerlink" title="区间查询(query)"></a>区间查询(query)</h3><p>还就那个直接上🐴</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll l, ll r, ll p = <span class="hljs-number">1</span>, ll cl = <span class="hljs-number">1</span>, ll cr = n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &gt; r || cr &lt; l)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cl &gt;= l &amp;&amp; cr &lt;= r)<br>        <span class="hljs-keyword">return</span> tree[p];<br>    <span class="hljs-keyword">else</span>&#123;<br>        ll mid = (cl + cr) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push_down</span>(p, cr - cl + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(l, r, p * <span class="hljs-number">2</span>, cl, mid) + <span class="hljs-built_in">query</span>(l, r, p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr); <br>        <span class="hljs-comment">// 上一行拆成三行写就和区间修改格式一致了</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一样的递归，一样自顶至底地寻找，一样的合并信息，即插即用😍</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><blockquote><p>source : <strong>洛谷P3372 【模板】线段树 1</strong></p><p><strong>题目描述</strong><br>如题，已知一个数列，你需要进行下面两种操作：<br>1.将某区间每一个数加上x<br>2.求出某区间每一个数的和<br><strong>输入格式</strong><br>第一行包含两个整数N、M，分别表示该数列数字的个数和操作的总个数。<br>第二行包含N个用空格分隔的整数，其中第i个数字表示数列第i项的初始值。<br>接下来M行每行包含3或4个整数，表示一个操作，具体如下：<br>操作1： 格式：1 x y k 含义：将区间[x,y]内每个数加上k<br>操作2： 格式：2 x y 含义：输出区间[x,y]内每个数的和<br><strong>输出格式</strong><br>输出包含若干行整数，即为所有操作2的结果。</p></blockquote><hr><p>tips: 本模板分为龙鸣版和贵族版</p><h3 id="龙鸣version"><a href="#龙鸣version" class="headerlink" title="龙鸣version"></a>龙鸣version</h3><blockquote><p>(此龙鸣非彼龙鸣，意为把上面的龙鸣🐴整合起来):</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 100005</span><br>ll n, m, A[MAXN], tree[MAXN * <span class="hljs-number">4</span>], mark[MAXN * <span class="hljs-number">4</span>]; <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(ll p, ll len)</span></span>&#123;<br>    mark[p * <span class="hljs-number">2</span>] += mark[p];<br>    mark[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p];<br>    tree[p * <span class="hljs-number">2</span>] += mark[p] * (len - len / <span class="hljs-number">2</span>);<br>    tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += mark[p] * (len / <span class="hljs-number">2</span>);<br>    mark[p] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll l = <span class="hljs-number">1</span>, ll r = n, ll p = <span class="hljs-number">1</span>)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r)<br>        tree[p] = A[l];<br>    <span class="hljs-keyword">else</span>&#123;<br>        ll mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">build</span>(l, mid, p * <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r, p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>        tree[p] = tree[p * <span class="hljs-number">2</span>] + tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(ll l, ll r, ll d, ll p = <span class="hljs-number">1</span>, ll cl = <span class="hljs-number">1</span>, ll cr = n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &gt; r || cr &lt; l)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cl &gt;= l &amp;&amp; cr &lt;= r)&#123;<br>        tree[p] += (cr - cl + <span class="hljs-number">1</span>) * d;<br>        <span class="hljs-keyword">if</span> (cr &gt; cl)<br>            mark[p] += d;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        ll mid = (cl + cr) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push_down</span>(p, cr - cl + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">update</span>(l, r, d, p * <span class="hljs-number">2</span>, cl, mid);<br>        <span class="hljs-built_in">update</span>(l, r, d, p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>        tree[p] = tree[p * <span class="hljs-number">2</span>] + tree[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll l, ll r, ll p = <span class="hljs-number">1</span>, ll cl = <span class="hljs-number">1</span>, ll cr = n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &gt; r || cr &lt; l)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cl &gt;= l &amp;&amp; cr &lt;= r)<br>        <span class="hljs-keyword">return</span> tree[p];<br>    <span class="hljs-keyword">else</span>&#123;<br>        ll mid = (cl + cr) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">push_down</span>(p, cr - cl + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(l, r, p * <span class="hljs-number">2</span>, cl, mid) + <span class="hljs-built_in">query</span>(l, r, p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        A[i] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">build</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)&#123;<br>        ll opr = <span class="hljs-built_in">read</span>(), l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (opr == <span class="hljs-number">1</span>)&#123;<br>            ll d = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">update</span>(l, r, d);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(l, r));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="贵族version"><a href="#贵族version" class="headerlink" title="贵族version"></a>贵族version</h3><blockquote><p><del>豪华升级plus</del>，本来想加个乘除的发现板子不兼容，👴是懒狗</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br>ll tree[MAXN &lt;&lt; <span class="hljs-number">2</span>], mark[MAXN &lt;&lt; <span class="hljs-number">2</span>], n, m, A[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> len)</span></span>&#123;<br>    tree[p &lt;&lt; <span class="hljs-number">1</span>] += mark[p] * (len - len / <span class="hljs-number">2</span>);<br>    mark[p &lt;&lt; <span class="hljs-number">1</span>] += mark[p];<br>    tree[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] += mark[p] * (len / <span class="hljs-number">2</span>);<br>    mark[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] += mark[p];<br>    mark[p] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> cl = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> cr = n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl == cr) &#123; tree[p] = A[cl]; <span class="hljs-keyword">return</span>; &#125;<br>    <span class="hljs-keyword">int</span> mid = (cl + cr) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    tree[p] = tree[p &lt;&lt; <span class="hljs-number">1</span>] + tree[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> p = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> cl = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> cr = n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &gt;= l &amp;&amp; cr &lt;= r) <span class="hljs-keyword">return</span> tree[p];<br>    <span class="hljs-built_in">push_down</span>(p, cr - cl + <span class="hljs-number">1</span>);<br>    ll mid = (cl + cr) &gt;&gt; <span class="hljs-number">1</span>, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (mid &gt;= l) ans += <span class="hljs-built_in">query</span>(l, r, p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-keyword">if</span> (mid &lt; r) ans += <span class="hljs-built_in">query</span>(l, r, p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;   <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> d, <span class="hljs-keyword">int</span> p = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> cl = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> cr = n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &gt;= l &amp;&amp; cr &lt;= r) &#123; tree[p] += d * (cr - cl + <span class="hljs-number">1</span>), mark[p] += d; <span class="hljs-keyword">return</span>; &#125;<br>    <span class="hljs-built_in">push_down</span>(p, cr - cl + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> mid = (cl + cr) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (mid &gt;= l) <span class="hljs-built_in">update</span>(l, r, d, p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-keyword">if</span> (mid &lt; r) <span class="hljs-built_in">update</span>(l, r, d, p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    tree[p] = tree[p &lt;&lt; <span class="hljs-number">1</span>] + tree[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常见模型"><a href="#常见模型" class="headerlink" title="常见模型"></a>常见模型</h2><p>步骤：</p><ol><li>将问题转化成点信息和目标信息</li><li>将目标信息根据需要扩充成区间信息<ul><li>增加信息符合区间加法</li><li>增加标记支持区间操作</li></ul></li><li>代码中的主要模块：区间加法，标记下推，点信息-&gt;区间信息，各种操作(修改、查询…)</li></ol><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><blockquote><p>URAL1989 Subpalindromes  <a href="https://blog.csdn.net/zearot/article/details/38921403">题解</a></p><p>给定一个字符串(长度&lt;=100000)，有两个操作。  1：改变某个字符。 2：判断某个子串是否构成回文串</p></blockquote><p>分析：</p><p>直接判断会超时，此处用 <strong>线段树维护字符串哈希</strong></p><p>对于一个字符串$a[0],a[1],…,a[n-1] $它对应的哈希函数为$a[0]+a[1]*K + a[2]*K^2 +…+a[n-1]*K^{n-1}$</p><p>再维护一个从右往左的哈希值：</p><p>$a[0]*K^{n-1} + a[1]*K^{n-2} +…+a[n-1]$</p><p><strong>若是回文串，则左右的哈希值会相等。而左右哈希值相等，则很大可能这是回文串。</strong></p><p>若出现误判，可以再用一个K2，进行二次哈希判断，可以减小误判概率。实现上，哈希值最好对某个质数取余数，这样分布更均匀。</p><p>解题模型：</p><ul><li>目标信息：某个区间的左，右哈希值</li><li>点信息：一个字符</li></ul><p>目标信息已经符合区间加法，所以<strong>区间信息=目标信息</strong></p><p>故线段树结构：</p><ul><li><p><strong>区间信息</strong>：区间哈希值</p></li><li><p><strong>点信息</strong>：一个字符</p></li></ul><p>核心：就是找到<strong>区间信息</strong>， 写好<strong>区间加法</strong></p><h3 id="最长连续零"><a href="#最长连续零" class="headerlink" title="最长连续零"></a>最长连续零</h3><blockquote><p>Codeforces 527C Glass Carving <a href="https://blog.csdn.net/zearot/article/details/44759437">题解</a></p><p>给定一个矩形，不停地纵向/横向切割，问每次切割后，最大的矩形面积是多少</p></blockquote><p>分析：</p><p>最大矩形面积=最长的长*最宽的宽</p><p>长宽范围均为1e5，故用01序列表示每个点是否被切割</p><p>最长的长就是长的最长连续0的数量+1，宽同理，于是可用用线段树维护最长连续零</p><p>解题模型：</p><ul><li>目标信息：区间最长连续零的个数</li><li>点信息：0或1</li></ul><p>由于目标信息不符合区间加法，所以要扩充目标信息</p><p>故线段树结构：</p><ul><li><strong>区间信息</strong>：从左，右开始的最长连续零，本区间是否全零，本区间最长连续零</li><li><strong>点信息</strong>：0或1</li></ul><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><blockquote><p>Codeforces 558E A Simple Task <a href="https://blog.csdn.net/zearot/article/details/48048559">题解</a></p><p>给定一个长度不超过1e5的字符串（小写英文字母），和不超过5000个操作，每个操作 L R K 表示给区间[L,R]的字符串排序，K=1为升序，K=0为降序。 最后输出最终的字符串</p></blockquote><p>解题模型：</p><ul><li>目标信息：区间的计数排序结果</li><li>点信息：一个字符</li></ul><p>目标信息是符合区间加法的，但是为了支持区间操作，还是需要扩充信息</p><p>故线段树结构：</p><ul><li><strong>目标信息</strong>：区间的计数排序结果，排序标记，排序种类（升降）</li><li><strong>点信息</strong>：一个字符</li></ul><blockquote><p>To be continued…</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ALGORITHMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>note</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博弈论</title>
    <link href="/2021/07/31/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    <url>/2021/07/31/%E5%8D%9A%E5%BC%88%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h1><p>Game Theory</p><hr><h2 id="Nim游戏"><a href="#Nim游戏" class="headerlink" title="Nim游戏"></a>Nim游戏</h2><p>属于 ICG (Impartial Combinatorial Games) 的一种，满足条件如下：</p><ul><li>两名选手交替移动，在有限的合法移动集合中任选一种进行移动</li><li>对于任何一种局面，合法的移动集合只取决于局面本身</li><li>到谁无法移动谁就输了</li></ul><p>以下给出 P/N 的定义：</p><ul><li>P-Position：先手必败点 (Previous)</li><li>N-Position：先手必胜点 (Next)</li><li>可知所有终结点都是P点，一步就<strong>能</strong>到P点的一定是N点，通过一步<strong>只能</strong>到N点的一定是P点</li></ul><p>下面来说说Nim游戏：“有若干堆石子，每堆石子的数量有限，合法的移动是“选择一堆石子并拿走若干颗（不能不拿）”，如果轮到某个人时所有的石子堆都已经被拿空了，则判负（因为没有任何合法的移动）“，简单来想，我们可以想到一个递归的算法：对于当前的局面，递归计算它的所有子局面的性质，如果存在某个子局面是P，那么向这个子局面的移动就是必胜策略。这其中有大量的重叠子问题，所以可以用DP或者记忆化搜索的方法以提高效率。</p><p>但是👴们已经有了一个nb的结论：</p><p><strong>对于一个Nim游戏的局面(a1,a2,…,an)，它是P-position当且仅当a1^a2^…^an=0，其中^表示异或(xor)运算</strong></p><p>根据这个定理，我们可以在O(n)的时间内判断一个Nim的局面的性质，且如果它是N-position，也可以在O(n)的时间内找到所有的必胜策略。Nim问题就这样基本上完美的解决了。</p><hr><h2 id="Sprague-Grundy函数"><a href="#Sprague-Grundy函数" class="headerlink" title="Sprague-Grundy函数"></a>Sprague-Grundy函数</h2><p>ICG的抽象模型：给定一个有向无环图和一个起始顶点上的一枚棋子，两名选手交替的将这枚棋子沿有向边进行移动，无法移动者判负</p><p>首先定义mex(minimal excludnt) 运算：</p><p>施加于集合，表示<strong>最小</strong>的<strong>不属于</strong>这个集合的<strong>非负整数</strong>，exp: mex{0,1,2,4}=3、mex{2,3,5}=0、mex{}=0。</p><p>下面给出SG函数的定义：</p><p>对于一个给定的<strong>有向无环图</strong>，定义关于图的每个顶点的Sprague-Garundy函数如下：sg(x)=mex{ sg(y) | y是x的<strong>后继</strong> }。</p><p>结论：当SG[x] = 0时，x为必败状态；当SG[x] &gt; 0时，x为必胜状态</p><p>所以从1~n的SG函数值应该如何计算呢？</p><ol><li>使用 数组 f[ ] 将可改变当前状态 的方式记录下来</li><li>然后我们使用 另一个数组 S[ ] 将当前状态x 的后继状态标记</li><li>模拟mex运算，也就是我们在标记值中 搜索 <strong>未被标记值</strong> 的最小值，将其赋值给SG(x)</li><li>不断重复 2-3 的步骤，即完成计算 1-n 的SG函数值</li></ol><p><strong>SG定理</strong>：<strong>SG(G)=SG(G1)^SG(G2)^…^SG(Gn)<strong>，原游戏的SG函数值是它的所有子游戏的SG函数值的</strong>异或</strong></p><hr><h2 id="解题模型"><a href="#解题模型" class="headerlink" title="解题模型"></a>解题模型</h2><ol><li><p>把原游戏分解成多个独立的子游戏，则原游戏的SG函数值就变为<strong>SG(G)=SG(G1)^SG(G2)^…^Sg(Gn)</strong></p></li><li><p>分别考虑每一个子游戏，计算其SG值</p><p><strong>SG值的计算方法</strong>（important）：</p><p>​    a. <strong>可选步数为1~m的连续整数，直接取模即可，SG(x) = x % (m+1)</strong> <strong>（Bash game）</strong></p><p>​    b. <strong>可选步数为任意步，SG(x) = x（Nim game）</strong></p><p>​    c. <strong>可选步数为一系列不连续的数，用模板计算</strong></p></li></ol><h2 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h2><blockquote><p>首选打表预处理，打表没法使的时候就怼dfs</p></blockquote><h3 id="☆打表"><a href="#☆打表" class="headerlink" title="☆打表"></a>☆打表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//打表</span><br><span class="hljs-keyword">int</span> f[N],SG[MAXN],S[MAXN]; <span class="hljs-comment">// f[] 可改变当前状态的方式(可取走石子个数)   S[] 当前状态的后继状态集合</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getSG</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i,j;<br><span class="hljs-built_in">memset</span>(SG,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(SG));<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123; <br><span class="hljs-built_in">memset</span>(S,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(S));<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; f[j]&lt;=i &amp;&amp; j&lt;=N;j++)<br>S[SG[i-f[j]]]=<span class="hljs-number">1</span>; <span class="hljs-comment">//S[]数组来保存当前状态的后继状态集合</span><br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=n;j++)&#123; <br>        <span class="hljs-keyword">if</span>(!S[j])&#123;<span class="hljs-comment">//模拟mex运算</span><br>SG[i]=j;<br><span class="hljs-keyword">break</span>;<br>            &#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="深搜"><a href="#深搜" class="headerlink" title="深搜"></a>深搜</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//注意 f数组要按从小到大排序 SG函数要初始化为-1 对于每个集合只需初始化1遍</span><br><span class="hljs-comment">//n是集合f的大小 f[i]是定义的特殊取法规则的数组</span><br><span class="hljs-keyword">int</span> f[<span class="hljs-number">110</span>],SG[<span class="hljs-number">10010</span>],n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">SG_dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">if</span>(SG[x]!=<span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> SG[x];<br>    <span class="hljs-keyword">bool</span> vis[<span class="hljs-number">110</span>];<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vis));<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(x&gt;=f[i])&#123;<br>            <span class="hljs-built_in">SG_dfs</span>(x-f[i]);<br>            vis[SG[x-f[i]]]=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> e;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;;i++)<br>        <span class="hljs-keyword">if</span>(!vis[i])&#123;<br>            e=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    <span class="hljs-keyword">return</span> SG[x]=e;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="常见博弈"><a href="#常见博弈" class="headerlink" title="常见博弈"></a>常见博弈</h2><h3 id="Bash-Game"><a href="#Bash-Game" class="headerlink" title="Bash Game"></a>Bash Game</h3><p>只有一堆n个物品，两个人轮流取物，每次至少取一个，最多取m个。最后取光者得胜（谁拿了最后一个谁赢）</p><p>结论：最优选择为保持给对手留下 <strong>m+1</strong> 的倍数</p><ul><li><p>if(n%(m+1) != 0)  则先手必赢 </p></li><li><p>if(n%(m+1) == 0)  则后手必赢</p></li></ul><h3 id="Wythoff-Game"><a href="#Wythoff-Game" class="headerlink" title="Wythoff Game"></a>Wythoff Game</h3><blockquote><p>各位👴属实🐮，黄金分割数（1+√5）/2 = 1.618 都给整上了</p></blockquote><p>有两堆各若干个物品，两个人轮流从某一堆取物或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜</p><p>这里用（ak，bk）（ak ≤ bk ,k=0，1，2，…,n)表示两堆物品的数量并称其为<strong>局势</strong></p><p>由ak，bk组成的矩形近似为黄金矩形</p><p>结论：</p><ul><li><p>(int)((bk-ak)*(1+sqrt(5.0))/2) != ak ,  先手必赢</p></li><li><p>(int)((bk-ak)*(1+sqrt(5.0))/2) == ak , 后手必赢</p></li></ul><h3 id="Nim-Game"><a href="#Nim-Game" class="headerlink" title="Nim Game"></a>Nim Game</h3><p>若干堆石子，每堆石子的数量有限，两个人可以选择一堆石子并拿走若干颗</p><p>结论：xor 略</p><h3 id="Fibonacci-Nim"><a href="#Fibonacci-Nim" class="headerlink" title="Fibonacci Nim"></a>Fibonacci Nim</h3><p>有一堆个数为n的石子，游戏双方轮流取石子，满足: (1)先手不能在第一次把所有的石子取完 (2)每次可以取的石子数介于1到对手刚取的石子数的2倍之间(包含)  (3) 取走最后一个石子的人为赢家</p><p>结论：<strong>当n为Fibonacci数的时候，必败</strong></p><p>f[i]：1,2,3,5,8,13,21,34,55,89……</p>]]></content>
    
    
    <categories>
      
      <category>ALGORITHMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>note</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql学习笔记</title>
    <link href="/2021/07/29/sql/"/>
    <url>/2021/07/29/sql/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>结构化查询语言-Structured Query Language</p><p><em><strong>@author：Maskros</strong></em></p><hr><h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><p>类型</p><ul><li>字符型<ul><li>VARCHAR型和CHAR型</li></ul></li><li>文本型<ul><li>TEXT</li></ul></li><li>数值型<ul><li>整数INT 、小数NUMERIC、钱数MONEY)</li></ul></li><li>逻辑型<ul><li>BIT</li></ul></li><li>日期型<ul><li>DATETIME </li></ul></li></ul><hr><h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><p>操作</p><p>增删改查 CURD</p><p>tips : 不区分大小写，列名表名前``可以省略</p><h3 id="SELECT-FROM"><a href="#SELECT-FROM" class="headerlink" title="SELECT(FROM)"></a>SELECT(FROM)</h3><ul><li>SELECT COLUMN 查询单个列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name`<br><span class="hljs-keyword">FROM</span> `table_name`;<br></code></pre></td></tr></table></figure><ul><li>SELECT COLUMN, COLUMN 查询多个列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name_1`, `column_name_2`  <br><span class="hljs-keyword">FROM</span> `table_name`;<br></code></pre></td></tr></table></figure><ul><li>使用 SELECT * 查询所有列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `table_name`;<br></code></pre></td></tr></table></figure><ul><li>使用 SELECT DISTINCT 查询不同行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> `column_name`<br><span class="hljs-keyword">FROM</span> `table_name`<br></code></pre></td></tr></table></figure><p>​    希望查询的值都是唯一不重复的</p><ul><li>SELECT WHERE 对行进行筛选过滤</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name1`,`column_name2`…<br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` operator `<span class="hljs-keyword">value</span>`;<br></code></pre></td></tr></table></figure><h3 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT(INTO)"></a>INSERT(INTO)</h3><ul><li>INSERT INTO 在不指定列的情况下插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `table_name`<br><span class="hljs-keyword">VALUES</span> (value1, value2, value3,...);<br># <span class="hljs-string">&#x27;value&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>INSERT INTO 在指定的列中插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `table_name`<br>(`column1`, `column2`, `column3`,...)<br><span class="hljs-keyword">VALUES</span> (value1, value2, value3,...);<br></code></pre></td></tr></table></figure><h3 id="UPDATE-SET"><a href="#UPDATE-SET" class="headerlink" title="UPDATE(SET)"></a>UPDATE(SET)</h3><ul><li>UPDATE 更新数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE `table_name`<br><span class="hljs-keyword">SET</span> `column1`<span class="hljs-operator">=</span>value1,`column2`<span class="hljs-operator">=</span>value2,...<br><span class="hljs-keyword">WHERE</span> `some_column`<span class="hljs-operator">=</span>some_value;<br># <span class="hljs-keyword">WHERE</span> 可以省略<br></code></pre></td></tr></table></figure><h3 id="DELETE-FROM"><a href="#DELETE-FROM" class="headerlink" title="DELETE(FROM)"></a>DELETE(FROM)</h3><ul><li>DELETE 删除数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `some_column` <span class="hljs-operator">=</span> `some_value`;<br></code></pre></td></tr></table></figure><ul><li>TRUNCATE TABLE 清空表</li></ul><hr><h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p>条件</p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">WHERE</span> A OPERATOR B<br></code></pre></td></tr></table></figure><ul><li>tips:  <code>&lt;&gt;</code> , <code>!=</code> 均为不等于，但用法不同</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>AND 连接多条件</p></li><li><p>OR 连接多条件</p></li><li><p>NOT 过滤不满足条件的数据</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name` <br><span class="hljs-keyword">FROM</span> `table_name` <br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> `<span class="hljs-keyword">condition</span>`;<br># (condition1 operator condition2)<br></code></pre></td></tr></table></figure><h3 id="特殊条件"><a href="#特殊条件" class="headerlink" title="特殊条件"></a>特殊条件</h3><ul><li>IN 查询多条件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Where</span> `column_name1` <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">condition</span>)<br># <span class="hljs-keyword">condition</span> 中也可以写<br><span class="hljs-keyword">IN</span> (<span class="hljs-keyword">select</span> `column_name1` xxxxxxxx)<br></code></pre></td></tr></table></figure><ul><li>NOT IN 排除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` (<span class="hljs-keyword">NOT</span>) <span class="hljs-keyword">IN</span> `<span class="hljs-keyword">value</span>`;<br># （value1, value2）<br></code></pre></td></tr></table></figure><ul><li>BETWEEN AND 查询两值间的数据范围</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` <span class="hljs-keyword">BETWEEN</span> `<span class="hljs-keyword">value</span>` <span class="hljs-keyword">AND</span> `<span class="hljs-keyword">value</span>`;<br></code></pre></td></tr></table></figure><ul><li>IS NULL 查询空数据</li><li>使用 LIKE 模糊查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` <span class="hljs-keyword">LIKE</span> `<span class="hljs-keyword">value</span>`;<br># <span class="hljs-keyword">LIKE</span> `D<span class="hljs-operator">%</span>`<br># <span class="hljs-string">&#x27;D%&#x27;</span> 表示以D开头的所有单词，<span class="hljs-operator">%</span> 表示为通配符，可以替代<span class="hljs-number">0</span><span class="hljs-operator">~</span>n个字符<br></code></pre></td></tr></table></figure><h3 id="ORDER-BY-amp-LIMIT"><a href="#ORDER-BY-amp-LIMIT" class="headerlink" title="ORDER BY &amp; LIMIT"></a>ORDER BY &amp; LIMIT</h3><ul><li><p>ORDER BY 对数据进行排序（一列/多列(多列按SELECT顺序)）</p><p>ASC (ascend)升序(默认)  |  DESC(descend) 降序</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> `column_name`, `column_name`<br><span class="hljs-keyword">FROM</span> `table_name`<br># <span class="hljs-keyword">WHERE</span> XXXX<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `column_name`, `column_name` <span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>; <br></code></pre></td></tr></table></figure><ul><li><p>使用 LIMIT 限制输出行数</p><p>offset ：是返回集的初始标注，起始点是0</p><p>count ：制定返回的数量</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name`, `column_name`<br><span class="hljs-keyword">FROM</span> `table_name`<br># <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> XXXX<br>LIMIT `<span class="hljs-keyword">offset</span>` , `count`;<br># <span class="hljs-keyword">offset</span>和count通常只用一个count：LIMIT (<span class="hljs-number">0</span>,)<span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>函数</p><h3 id="算数函数"><a href="#算数函数" class="headerlink" title="算数函数"></a>算数函数</h3><ul><li>AVG() 函数求数值列的平均值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(`column_name`) # <span class="hljs-keyword">AS</span> `column2_name`<br><span class="hljs-keyword">FROM</span> `table_name`;<br></code></pre></td></tr></table></figure><ul><li><p>MAX() 函数返回指定列中的最大值</p></li><li><p>MIN() 函数返回指定列中的最小值</p></li><li><p>SUM() 函数统计数值列的总数</p></li><li><p>ROUND() 函数将数值四舍五入</p><ul><li>ROUND() 返回值数据类型会被变换为一个BIGINT 。</li><li>当 decimals 为正数时，column_name 四舍五入为 decimals 所指定的小数位数。省略decimals自动保留四舍五入后的整数。当 decimals 为负数时，column_name 则按 decimals 所指定的在小数点的左边四舍五入。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ROUND(`column_name`, `decimals`) <br><span class="hljs-keyword">FROM</span> `table_name`;<br>#decimals 规定要返回的小数位数<br></code></pre></td></tr></table></figure></li><li><p>NULL() 函数判断空值</p><ul><li><p>ISNULL()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ISNULL(`column_name`)<br><span class="hljs-keyword">FROM</span> `table_name`;<br># 返回 <span class="hljs-number">0</span> 或 <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>IFNULL()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> IFNULL(`column_name`, `<span class="hljs-keyword">value</span>`)<br><span class="hljs-keyword">FROM</span> `table_name`;<br># 是 <span class="hljs-keyword">NULL</span> 则返回 <span class="hljs-keyword">value</span> 值，不是则返回对应内容<br></code></pre></td></tr></table></figure></li></ul></li><li><p>COUNT() 函数计数</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-built_in">COUNT</span>(column_name) 对列具有的行数进行计数 除去值为 <span class="hljs-keyword">NULL</span> 的行<br># 主要用于查看各列数据的数量情况，便于统计数据的缺失值<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(`column_name`) <br><span class="hljs-keyword">FROM</span> `table_name`;<br># <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 对表中行的数目进行计数,包括 <span class="hljs-keyword">NULL</span> 所在行和重复项所在行<br># 主要用于查看表中的记录数<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <br><span class="hljs-keyword">FROM</span> `table_name`;<br># <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> column_name) 函数返回指定列的不同值的数目<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> `column_name`) <br><span class="hljs-keyword">FROM</span> `table_name`;<br></code></pre></td></tr></table></figure><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><ul><li><p>NOW()，CURDATE()、CURTIME() 获取当前时间</p><ul><li><code>NOW()</code> 返回当前日期和时间  YYYY-MM-DD hh:mm:ss</li><li><code>CURDATE()</code> 返回当前日期  YYYY-MM-DD</li><li><code>CURTIME()</code> 返回当前时间  hh:mm:ss</li><li>要精确的秒以后的时间的话，可以在 () 中加数字，加多少，就表示精确到秒后多少位</li></ul></li><li><p>DATE()、TIME() 函数提取日期和时间</p></li><li><p>EXTRACT() 函数提取指定的时间信息</p><ul><li><p>FROM</p></li><li><p>返回日期/时间的单独部分</p></li><li><p>unit :  <code>YEAR</code> (年)、<code>MONTH</code> (月)、<code>DAY</code> (日)、<code>HOUR</code> (小时)、<code>MINUTE</code> (分钟)、 <code>SECOND</code> (秒)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">EXTRACT</span>(unit <span class="hljs-keyword">FROM</span> <span class="hljs-type">date</span>) # unit 为单独部分名<br><span class="hljs-keyword">FROM</span> `<span class="hljs-keyword">table</span>`<br># <span class="hljs-type">date</span> <span class="hljs-operator">-</span> 合法<span class="hljs-keyword">column</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>DATE_FORMAT() 格式化输出日期</p><ul><li>%Y 年份 %m 月份 %d 日期 %w 星期 %H 小时  %i 分钟 %s 秒</li><li>小写y 表示年份后两位，小写h表示12小时计的小时</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATE_FORMAT(<span class="hljs-type">date</span>,<span class="hljs-string">&#x27;format&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>DATE_ADD() 增加时间</p><ul><li>INTERVAL</li><li>向日期添加指定的时间间隔</li><li> <code>expr</code> 是希望添加的时间间隔的数值</li><li>type :  MICROSECOND , SECOND , MINUTE , HOUR , DAY , WEEK , MONTH , QUARTER , YEAR</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATE_ADD(<span class="hljs-type">date</span>, <span class="hljs-type">INTERVAL</span> expr type)<br><span class="hljs-keyword">FROM</span> table_name<br></code></pre></td></tr></table></figure></li><li><p>DATE_SUB() 减少时间</p></li><li><p>DATEDIFF() 和 TIMESTAMPDIFF() 计算日期差</p><ul><li>时间1-时间2</li><li>DATEDIFF() 默认只能计算天数差</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> DATEDIFF(时间<span class="hljs-number">1</span>,时间<span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> date_diff <span class="hljs-keyword">FROM</span> courses;<br></code></pre></td></tr></table></figure><ul><li>TIMESTAMPDIFF() 计算相差年月周日时<ul><li>类型YEAR,MONTH,WEEK,DAY,HOUR</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> TIMESTAMPDIFF (类型,时间<span class="hljs-number">1</span>,时间<span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> year_diff；<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>约束</p><h3 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h3><p>非空约束</p><ul><li>强制列不接受 NULL 值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SQL"># 建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Persons` (<br>    `ID` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `LastName` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>);<br># 已建表<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br>MODIFY `Age` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br># 撤销<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br>MODIFY `Age` <span class="hljs-type">int</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h3 id="UNIQUE"><a href="#UNIQUE" class="headerlink" title="UNIQUE"></a>UNIQUE</h3><p>唯一约束</p><ul><li>不希望出现重复记录</li><li>CONSTRAINT 命名</li><li>DROP 撤销</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 建表<br>## MySQL<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Persons`(<br>    `P_Id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> (`P_Id`)<br>)<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Persons`(<br>`P_Id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>)<br>## 命名<span class="hljs-operator">+</span>多列<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Persons`(<br>    `P_Id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `LastName` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">CONSTRAINT</span> uc_PersonID <span class="hljs-keyword">UNIQUE</span> (`P_Id`,`LastName`)<br>)<br><br># 已建<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span>（`P_Id`）<br>## 多列<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> uc_PersonID <span class="hljs-keyword">UNIQUE</span> (`P_Id`,`LastName`)<br><br># 撤销<br>## MySQL<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">DROP</span> INDEX uc_PersonID<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> uc_PersonID<br></code></pre></td></tr></table></figure><h3 id="PRIMARY-KEY"><a href="#PRIMARY-KEY" class="headerlink" title="PRIMARY KEY"></a>PRIMARY KEY</h3><p>主键约束</p><ul><li>简单的说，PRIMARY KEY = UNIQUE + NOT NULL </li><li>NOT NULL UNIQUE 可以将表的一列或多列定义为唯一性属性，而 PRIMARY KEY 设为多列时，仅能保证多列之和是唯一的，具体到某一列可能会重复。</li><li>PRIMARY KEY 可以与外键配合，从而形成主从表的关系</li><li>PRIMARY KEY 一般在逻辑设计中用作记录标识，这也是设置 PRIMARY KEY 的本来用意，而 UNIQUE 只是为了保证域/域组的唯一性</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 建表<br>## MySQL<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Persons(<br>    `P_Id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`P_Id`)<br>);<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Persons`(<br>    `P_Id` <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>)<br>## 命名<span class="hljs-operator">+</span>多列<br><span class="hljs-keyword">CONSTRAINT</span> pk_PersonID <span class="hljs-keyword">PRIMARY</span> KEY (`P_Id`,`LastName`)<br><br># 已建<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (`P_Id`)<br>## 多列<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> pk_PersonID <span class="hljs-keyword">PRIMARY</span> KEY (`P_Id`,`LastName`)<br><br># 撤销<br>## MySQL<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> pk_PersonID<br></code></pre></td></tr></table></figure><h3 id="FOREIGN-KEY"><a href="#FOREIGN-KEY" class="headerlink" title="FOREIGN KEY"></a>FOREIGN KEY</h3><p>外键约束 </p><ul><li>一个表中的 FOREIGN KEY 指向另一个表中的 UNIQUE KEY </li><li>保证数据的完整性和一致性</li><li>在两个表之间建立关系，需要指定引用主表的哪一列，REFERENCES 表示引用一个表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 建表<br>## MySQL<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Orders`(<br>    `P_Id` <span class="hljs-type">int</span>,<br>    <span class="hljs-keyword">FOREIGN</span> KEY (P_Id) <span class="hljs-keyword">REFERENCES</span> Persons(P_Id)<br>)<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `Orders`(<br>    P_Id <span class="hljs-type">int</span> <span class="hljs-keyword">FOREIGN</span> KEY <span class="hljs-keyword">REFERENCES</span> Persons(P_Id)<br>)<br>## 命名<span class="hljs-operator">+</span>多列<br><span class="hljs-keyword">CONSTRAINT</span> fk_PerOrders <span class="hljs-keyword">FOREIGN</span> KEY (P_Id)<br><span class="hljs-keyword">REFERENCES</span> Persons(P_Id)<br><br># 已建<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Orders`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">FOREIGN</span> KEY (P_Id)<br><span class="hljs-keyword">REFERENCES</span> Persons(P_Id)<br>## 命名<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Orders`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> fk_PerOrders<br><span class="hljs-keyword">FOREIGN</span> KEY (P_Id)<br><span class="hljs-keyword">REFERENCES</span> Persons(P_Id)<br><br># 撤销<br>## MySQL<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Orders`<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> KEY fk_PerOrders<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Orders`<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> fk_PerOrders<br></code></pre></td></tr></table></figure><h3 id="CHECK"><a href="#CHECK" class="headerlink" title="CHECK"></a>CHECK</h3><p>检查约束 </p><ul><li>限制列中的值的范围，评估插入或修改后的值。满足条件插入，否不插</li><li>可以为同一列指定多个 CHECK 约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `courses`(<br>`student_count` <span class="hljs-type">int</span>, …<br><span class="hljs-keyword">CHECK</span> (Condition1 <span class="hljs-keyword">AND</span> Condition2)<br>)<br>## 命名<br><span class="hljs-keyword">CONSTRAINT</span> chk_courses <span class="hljs-keyword">CHECK</span> (`student_count` <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>);<br><br># 已建<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `courses` <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CHECK</span> ( `student_count` <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>);<br>## <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> XXX <span class="hljs-keyword">CHECK</span> (<span class="hljs-keyword">Condition</span>);<br><br># 撤销<br>## MySQL<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `courses` <br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CHECK</span> chk_courses<br>## <span class="hljs-keyword">SQL</span> Server <span class="hljs-operator">/</span> Oracle <span class="hljs-operator">/</span> MS Access<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `courses` <br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> chk_courses<br></code></pre></td></tr></table></figure><h3 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h3><p>默认约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">`City` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;Sandnes&#x27;</span><br>`OrderDate` <span class="hljs-type">date</span> <span class="hljs-keyword">DEFAULT</span> GETDATE()  # 可以用函数<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `Persons`<br><span class="hljs-keyword">ALTER</span> `City` <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;SANDNES&#x27;</span><br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> ab_c <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;SANDNES&#x27;</span> <span class="hljs-keyword">for</span> `City`<br><br><span class="hljs-keyword">ALTER</span> `City` <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DEFAULT</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> `City` <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DEFAULT</span><br></code></pre></td></tr></table></figure><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><p>多表联结</p><h3 id="联结"><a href="#联结" class="headerlink" title="联结"></a>联结</h3><ul><li><p>在一条 SELECT 语句中关联多个表，返回一组输出</p></li><li><p>两大主角 : 主键 (PRIMARY KEY) 和外键 (FOREIGN KEY)</p></li><li><p>使用完全限定列名（用一个点分隔表名和列名）</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">condition</span><br>`table1`.`common_field` <span class="hljs-operator">=</span> `table2`.`common_field`<br></code></pre></td></tr></table></figure><ul><li>JOIN 连接子句<ul><li><strong>INNER JOIN</strong> 内连接：如果表中有至少一个匹配，则返回行</li><li><strong>OUTER JOIN</strong> 外连接<ul><li><strong>LEFT JOIN</strong>：即使右表中没有匹配，也从左表返回所有的行</li><li><strong>RIGHT JOIN</strong>：即使左表中没有匹配，也从右表返回所有的行</li></ul></li><li><strong>FULL JOIN</strong> 全连接：只要其中一个表中存在匹配，则返回行</li><li><strong>CROSS JOIN</strong> 交叉连接：又称<strong>笛卡尔积</strong>，两个表数据一一对应，返回结果的行数等于两个表行数的乘积</li></ul></li></ul><h3 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h3><p>内连接 又称为EQUIJOIN 等值连接</p><ul><li>内连接就是取两个表的交集，返回的结果就是连接的两张表中都满足条件的部分</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `table1`.`column1`, `table2`.`column2`...<br><span class="hljs-keyword">FROM</span> `table1`<br>(<span class="hljs-keyword">INNER</span>) <span class="hljs-keyword">JOIN</span> `table2` # <span class="hljs-keyword">INNER</span> 可省略不写<br><span class="hljs-keyword">ON</span> `table1`.`common_field` <span class="hljs-operator">=</span> `table2`.`common_field`;<br># <span class="hljs-keyword">ON</span> <span class="hljs-keyword">CONDITION</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># exp<br><span class="hljs-keyword">SELECT</span> `c`.`id`, `c`.`name` <span class="hljs-keyword">AS</span> `course_name`, `t`.`name` <span class="hljs-keyword">AS</span> `teacher_email`<br><span class="hljs-keyword">FROM</span> `courses` `c`<br>    (<span class="hljs-keyword">INNER</span>) <span class="hljs-keyword">JOIN</span> `teachers` `t` <span class="hljs-keyword">ON</span> `c`.`teacher_id` <span class="hljs-operator">=</span> `t`.`id`;<br></code></pre></td></tr></table></figure><ul><li><code>courses</code> <code>c</code> 等同于 <code>courses</code> AS <code>c</code> ，给<code>courses</code> 表取别名为 <code>c</code></li></ul><h3 id="OUTER-JOIN"><a href="#OUTER-JOIN" class="headerlink" title="OUTER JOIN"></a>OUTER JOIN</h3><p>外连接 分为左外连接 右外连接 全外连接</p><ul><li>外连接可以将某个表格中，在另外一张表格中无对应关系，但是也能将数据匹配出来</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-number">1</span>,column_name <span class="hljs-number">2</span> ... column_name n<br>    <span class="hljs-keyword">FROM</span> table1<br>        <span class="hljs-keyword">LEFT</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">RIGHT</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">FULL</span>  (<span class="hljs-keyword">OUTER</span>) <span class="hljs-keyword">JOIN</span> table2<br>        <span class="hljs-keyword">ON</span> <span class="hljs-keyword">CONDITION</span>;<br></code></pre></td></tr></table></figure><ul><li>LEFT JOIN : 以左表为参考表，返回左表中的所有记录，加上右表中匹配到的记录</li><li>RIGHT JOIN :  以右表为参考表</li><li>FULL JOIN : 只要左表和右表其中一个表中存在匹配，则返回行</li></ul><blockquote><p>tips :  MySQL 数据库不支持全连接，想要实现全连接可以使用 UNION ALL 来将左连接和右连接结果组合在一起实现全连接</p></blockquote><ul><li>UNION :  联合，把两次或多次查询结果合并起来<ul><li>要求：两次查询的列数必须一致，同时，每条 SELECT 语句中的列的顺序必须相同</li><li>UNION 会去掉重复的行。 如果不想去掉重复的行，可以使用 UNION ALL </li><li>如果子句中有 order by , limit，需用括号()包起来。推荐放到所有子句之后，即对最终合并的结果来排序或筛选</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-number">1</span>,column_name <span class="hljs-number">2</span> ... column_name n<br>    <span class="hljs-keyword">FROM</span> table1<br>        <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> table2 <span class="hljs-keyword">ON</span> <span class="hljs-keyword">CONDITION</span> <br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-number">1</span>,column_name <span class="hljs-number">2</span> ... column_name n<br>    <span class="hljs-keyword">FROM</span> table1<br>        <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> table2 <span class="hljs-keyword">ON</span> <span class="hljs-keyword">CONDITION</span> ;<br></code></pre></td></tr></table></figure><h3 id="CROSS-JOIN"><a href="#CROSS-JOIN" class="headerlink" title="CROSS JOIN"></a>CROSS JOIN</h3><p>交叉连接 结果也称作笛卡尔积</p><ul><li>返回左表中的所有行，左表中的每一行与右表中的所有行组合。即将两个表的数据一一对应，其查询结果的行数为左表中的行数乘以右表中的行数。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 隐式连接 不需要使用 <span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> 关键字<br><span class="hljs-keyword">SELECT</span> `table1`.`column1`, `table2`.`column2`...<br><span class="hljs-keyword">FROM</span> `table1`,`table2`;<br># 显式连接<br><span class="hljs-keyword">SELECT</span> `table1`.`column1`, `table2`.`column2`...<br><span class="hljs-keyword">FROM</span> `table1`<br><span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> `table2`;<br></code></pre></td></tr></table></figure><ul><li>通过增加联结条件，使用 WHERE 子句帮助筛选过滤无效的数据</li></ul><hr><h2 id="Advanced-Select"><a href="#Advanced-Select" class="headerlink" title="Advanced Select"></a>Advanced Select</h2><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><ul><li><p>GROUP BY 子句</p><ul><li>对同类的数据进行分类</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name`, aggregate_function(`column_name`)<br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` operator <span class="hljs-keyword">value</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `column_name`;<br></code></pre></td></tr></table></figure></li><li><p>HAVING 子句</p><ul><li>使用 WHERE 条件子句时不能与聚合函数联合使用</li><li> HAVING 子句经常与 GROUP BY 联合使用，HAVING 子句就是对分组统计函数进行过滤的子句</li><li>HAVING 子句对于 GROUP BY 子句设置条件的方式其实与 WHERE 子句与 SELECT 的方式类似，语法相近，但 WHERE 子句搜索条件是在分组操作之前，而 HAVING 则是在之后</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>   `column_name`, aggregate_function(`column_name`) <br><span class="hljs-keyword">FROM</span>     `table_name` <br><span class="hljs-keyword">WHERE</span>    `column_name` operator <span class="hljs-keyword">value</span> <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `column_name` <br><span class="hljs-keyword">HAVING</span>   aggregate_function(`column_name`) operator <span class="hljs-keyword">value</span>;<br></code></pre></td></tr></table></figure><ul><li>ex: 查询教师表 teachers计算不同国籍教师的平均年龄和所有教师的平均年龄，比较两者的大小，最后返回大于所有教师平均年龄的不同国籍下的全部教师信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 子查询<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> teachers <br>    <span class="hljs-keyword">WHERE</span> country <span class="hljs-keyword">IN</span><br>        (<span class="hljs-keyword">SELECT</span> country <span class="hljs-keyword">FROM</span> teachers <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> country<br>            <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">AVG</span>(age) <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(age) <span class="hljs-keyword">FROM</span> teachers))<br></code></pre></td></tr></table></figure></li></ul><h3 id="子查询-Base"><a href="#子查询-Base" class="headerlink" title="子查询(Base)"></a>子查询(Base)</h3><ul><li>SELECT 语句中的子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name(s)`<br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` OPERATOR (<br>    <span class="hljs-keyword">SELECT</span> `column_name(s)`<br>    <span class="hljs-keyword">FROM</span> `table_name`<br>);<br></code></pre></td></tr></table></figure><ul><li>INSERT 语句中的子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `table_name`<br><span class="hljs-keyword">SELECT</span> `colnum_name(s)`<br><span class="hljs-keyword">FROM</span> `table_name`<br>[ <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">VALUE</span> OPERATOR ]<br></code></pre></td></tr></table></figure><ul><li>UPDATE 语句中的子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE `table_name` <br><span class="hljs-keyword">SET</span> `column_name` <span class="hljs-operator">=</span> `new_value`<br><span class="hljs-keyword">WHERE</span> `column_name` OPERATOR <br>   (<span class="hljs-keyword">SELECT</span> `column_name`<br>   <span class="hljs-keyword">FROM</span> `table_name`<br>   [<span class="hljs-keyword">WHERE</span>] )<br></code></pre></td></tr></table></figure><ul><li>DELETE 语句中的子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` OPERATOR <br>   (<span class="hljs-keyword">SELECT</span> `column_name`<br>   <span class="hljs-keyword">FROM</span> `table_name`  <br>   [<span class="hljs-keyword">WHERE</span>] )<br></code></pre></td></tr></table></figure><h3 id="子查询-Adv"><a href="#子查询-Adv" class="headerlink" title="子查询(Adv.)"></a>子查询(Adv.)</h3><ul><li><p>内联视图子查询</p><ul><li>将查询的结果集作为一个查询表，继续进行查询操作</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> (<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> xxxx<br>) `T`<br><span class="hljs-keyword">WHERE</span> xxx <span class="hljs-operator">=</span> (<br><span class="hljs-keyword">SELECT</span> xxxx<br>);<br></code></pre></td></tr></table></figure></li><li><p>IN 操作符的多行子查询 / NOT IN </p></li><li><p>ANY 操作符的多行子查询</p><ul><li>在子查询中使用 ANY ，表示与子查询返回的任何值比较为真，则返回真</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `column_name(s)`<br><span class="hljs-keyword">FROM</span> `table_name`<br><span class="hljs-keyword">WHERE</span> `column_name` OPERATOR<br>   <span class="hljs-keyword">ANY</span>(<span class="hljs-keyword">SELECT</span> column_name<br>   <span class="hljs-keyword">FROM</span> table_name)<br></code></pre></td></tr></table></figure></li><li><p>ALL 操作符的多行子查询</p><ul><li>在子查询中使用 ALL ，表示与子查询返回的所有值比较为真，则返回真</li></ul></li><li><p>多列子查询</p></li><li><p>HAVING 子句中的子查询</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>NOTE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
