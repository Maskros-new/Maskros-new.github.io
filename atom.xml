<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maskros&#39; Blog</title>
  
  
  <link href="https://maskros.top/atom.xml" rel="self"/>
  
  <link href="https://maskros.top/"/>
  <updated>2022-05-19T06:49:20.350Z</updated>
  <id>https://maskros.top/</id>
  
  <author>
    <name>Maskros</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>树状数组yyds</title>
    <link href="https://maskros.top/post/algorithm/learn/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84.html"/>
    <id>https://maskros.top/post/algorithm/learn/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84.html</id>
    <published>2022-05-13T03:55:50.000Z</published>
    <updated>2022-05-19T06:49:20.350Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="树状数组"> 树状数组</span></h1><p>Binary Indexed Tree 二进制下标树</p><h2><span id="引入"> 引入</span></h2><p>基本操作： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span> 的<strong>单点修改</strong>和<strong>区间查询</strong></p><p>核心：巧妙利用二进制，如果我们要求前11项和，可以分别查询<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mo>(</mo><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn><msub><mo>)</mo><mn>2</mn></msub><mo separator="true">,</mo><mo>(</mo><mn>1</mn><mn>0</mn><mn>0</mn><mn>0</mn><msub><mo>)</mo><mn>2</mn></msub><mo>]</mo></mrow><annotation encoding="application/x-tex">((0000)_2, (1000)_2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mclose"><span class="mclose">)</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mclose"><span class="mclose">)</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">]</span></span></span></span>,  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mo>(</mo><mn>1</mn><mn>0</mn><mn>0</mn><mn>0</mn><msub><mo>)</mo><mn>2</mn></msub><mo separator="true">,</mo><mo>(</mo><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn><msub><mo>)</mo><mn>2</mn></msub><mo>]</mo></mrow><annotation encoding="application/x-tex">((1000)_2, (1010)_2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mclose"><span class="mclose">)</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mclose"><span class="mclose">)</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">]</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mo>(</mo><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn><msub><mo>)</mo><mn>2</mn></msub><mo separator="true">,</mo><mo>(</mo><mn>1</mn><mn>0</mn><mn>1</mn><mn>1</mn><msub><mo>)</mo><mn>2</mn></msub><mo>]</mo></mrow><annotation encoding="application/x-tex">((1010)_2, (1011)_2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mclose"><span class="mclose">)</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mclose"><span class="mclose">)</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">]</span></span></span></span> 的和再相加，即不断去掉<strong>二进制数最右边的一个1</strong>的过程。如果区间求和，使用<strong>前缀和</strong>的思想做差即可。</p><p><img src="https://pic1.zhimg.com/80/v2-fbaeb49fdbad31a211fe37f068ca8bb0_720w.jpg" alt="img"></p><p>核心实现：求二进制最低位的1：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>x</mi><mi mathvariant="normal">&amp;</mi><mo>(</mo><mo>−</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">lowbit(x) = x\&amp;(-x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord mathit">b</span><span class="mord mathit">i</span><span class="mord mathit">t</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit">x</span><span class="mord mathrm">&amp;</span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathit">x</span><span class="mclose">)</span></span></span></span></p><h2><span id="code"> Code</span></h2><h3><span id="0x01-单点修改-amp-区间查询"> 0x01 单点修改 &amp; 区间查询</span></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">100005</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lowbit</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span></span></span><span class="token keyword">int</span> tr<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 单点修改 init</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> i<span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> pos <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 前缀和</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> n<span class="token punctuation">;</span> pos<span class="token punctuation">;</span> pos <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+=</span> tr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 区间查询</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="0x02-区间修改-amp-单点查询"> 0x02 区间修改 &amp; 单点查询</span></h3><blockquote><p>树状数组采用<strong>差分</strong>建立，单点查询即采用原数组的区间查询即可</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 区间修改</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 单点查询 即做前缀和</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> n<span class="token punctuation">;</span> pos<span class="token punctuation">;</span> pos <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+=</span> tr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="0x03-区间修改-amp-区间查询"> *0x03 区间修改 &amp; 区间查询</span></h3><p><em>pf</em>: 由差分形式可知，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span> 个数到第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.65952em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span> 个数可表示为:</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mo>[</mo><mn>1</mn><mo>]</mo><mo>+</mo><mo>(</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>1</mn><mo>]</mo><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>2</mn><mo>]</mo><mo>)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mo>(</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>1</mn><mo>]</mo><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>2</mn><mo>]</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">tr[1]+(tr[1]+tr[2])+...+(tr[1]+tr[2]+...+tr[i])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>1</mn><mo>]</mo><mo>×</mo><mi>i</mi><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>2</mn><mo>]</mo><mo>×</mo><mo>(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>×</mo><mo>(</mo><mi>i</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">=tr[1]\times i+tr[2]\times(i-1)+...+tr[i]\times(i-i+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mrel">=</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">×</span><span class="mord mathit">i</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span><span class="mbin">×</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mbin">×</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathit">i</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo>(</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>1</mn><mo>]</mo><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>2</mn><mo>]</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>)</mo><mo>×</mo><mi>i</mi><mo>−</mo><mo>(</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>1</mn><mo>]</mo><mo>×</mo><mo>(</mo><mn>1</mn><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>2</mn><mo>]</mo><mo>×</mo><mo>(</mo><mn>2</mn><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>×</mo><mo>(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">=(tr[1]+tr[2]+...+tr[i])\times i-(tr[1]\times(1-1)+tr[2]\times(2-1)+...+tr[i]\times(i-1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mclose">)</span><span class="mbin">×</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">×</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span><span class="mbin">×</span><span class="mopen">(</span><span class="mord mathrm">2</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mbin">×</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>​</p><p>结论： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>1</mn><mo>]</mo><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>2</mn><mo>]</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">(tr[1]+tr[2]+...+tr[i])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>​ 可用区间修改和查询来维护，而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>1</mn><mo>]</mo><mo>×</mo><mo>(</mo><mn>1</mn><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mn>2</mn><mo>]</mo><mo>×</mo><mo>(</mo><mn>2</mn><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>t</mi><mi>r</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>×</mo><mo>(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">(tr[1]\times(1-1)+tr[2]\times(2-1)+...+tr[i]\times(i-1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">×</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathrm">2</span><span class="mclose">]</span><span class="mbin">×</span><span class="mopen">(</span><span class="mord mathrm">2</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mbin">×</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>​ 用另一个update来存即可</p><p><strong>完整板子</strong>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">100005</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lowbit</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> tr<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> tr2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 单点修改 init</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> i<span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> pos <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update2</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> i<span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span> pos <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tr2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">+=</span> x <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 区间修改</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update2</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update2</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 前缀和 单点查询</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> n<span class="token punctuation">;</span> pos<span class="token punctuation">;</span> pos <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+=</span> tr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> n<span class="token punctuation">;</span> pos<span class="token punctuation">;</span> pos <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+=</span> tr2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 区间查询</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>r <span class="token operator">*</span> <span class="token function">query</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query2</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">query</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query2</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="应用逆序对"> 应用：逆序对</span></h2><blockquote><p><em>Def</em>: 逆序对：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>&lt;</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i&lt;j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span><span class="mrel">&lt;</span><span class="mord mathit" style="margin-right:0.05724em;">j</span></span></span></span> &amp;&amp; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>[</mo><mi>j</mi><mo>]</mo><mo>&gt;</mo><mi>a</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">a[j]&gt;a[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mrel">&gt;</span><span class="mord mathit">a</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span></span></span></span>，可用归并排序实现，此处用树状数组求解，其实求解的</p></blockquote><p>核心：离散化+树状数组求<strong>顺序对</strong></p><p>Step1: <strong>离散化</strong>：另开一个数组d，d[i]用来存放第i大的数在原序列的什么<strong>位置</strong>，ex: a={3, 8, 5, 4, 6} ==&gt; d={2, 3, 5, 4, 1}</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> tr<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x <span class="token operator">&gt;</span> y<span class="token punctuation">;</span> <span class="token comment">// 避免元素相同、重要</span><span class="token keyword">return</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 按原序列第几大排列</span><span class="token punctuation">}</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 初始化</span><span class="token function">sort</span><span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 离散化</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经简易证明可知，d数组的<strong>顺序对</strong>个数等于a数组的<strong>逆序对</strong>个数，故可使用树状数组进行求解。</p><p>Step2: <strong>求顺序对</strong>：每次把新的x放进去后，query(x-1)查找小于x的数的个数，统计答案</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void update(int i, int x) {for (int pos = i; pos &lt; maxn; pos += lowbit(pos)) {tr[pos] += x;}}int query(int n) { // 查询1-n有几个数存在int ret = 0;for (int pos = n; pos; pos -= lowbit(pos)) {ret += tr[pos];} return ret;} signed main() {cin &gt;&gt; n;rep(i, 1, n + 1) cin &gt;&gt; a[i], d[i] = i; // 初始化sort(d + 1, d + 1 + n, cmp); // 离散化int ans = 0;rep(i, 1, n + 1) {update(d[i], 1);ans += query(d[i] - 1); // 计数}cout &lt;&lt; ans;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>end.</p></blockquote>]]></content>
    
    
    <summary type="html">Binary Indexed Tree</summary>
    
    
    
    <category term="ALGORITHMS" scheme="https://maskros.top/categories/ALGORITHMS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="note" scheme="https://maskros.top/tags/note/"/>
    
    <category term="algorithm" scheme="https://maskros.top/tags/algorithm/"/>
    
    <category term="树状数组" scheme="https://maskros.top/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>字符串Hash 给我狠狠的哈希！</title>
    <link href="https://maskros.top/post/algorithm/learn/%E5%AD%97%E7%AC%A6%E4%B8%B2Hash.html"/>
    <id>https://maskros.top/post/algorithm/learn/%E5%AD%97%E7%AC%A6%E4%B8%B2Hash.html</id>
    <published>2022-04-13T10:55:00.000Z</published>
    <updated>2022-05-17T16:52:33.642Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="字符串hash"> 字符串Hash</span></h1><p>本质：<strong>把每个不同的字符串转化成不同的整数</strong></p><p>难点：如何构造一个合适的Hash函数</p><p>性质：Hash值不一样的两个字符串一定不一样，但Hash值一样的字符串不一定不一样 (但大概率一样)</p><h2><span id="单hash"> 单Hash</span></h2><blockquote><p>偷懒也可以 unsigned long long 自然溢出不用取mod，不过可能会被卡</p></blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mo>(</mo><mi>H</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo>[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>]</mo><mo>∗</mo><mi>B</mi><mo>+</mo><mi>i</mi><mi>d</mi><mi>x</mi><mo>(</mo><mi>s</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>)</mo><mo>)</mo><mi mathvariant="normal">%</mi><mi>m</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Hash[i] = (Hash[i - 1]*B + idx(s[i]))\%mod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mbin">+</span><span class="mord mathit">i</span><span class="mord mathit">d</span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord mathit">s</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord mathrm">%</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span></span></span></span></p><p>要求：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">mod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span></span></span></span> 均为质数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>&lt;</mo><mi>m</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">B &lt; mod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mrel">&lt;</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">mod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span></span></span></span> 取尽量大</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span></span> 可任取131,233…</p><h2><span id="双hash"> 双Hash</span></h2><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>a</mi><mi>s</mi><mi>h</mi><mn>1</mn><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mo>(</mo><mi>H</mi><mi>a</mi><mi>s</mi><mi>h</mi><mn>1</mn><mo>[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>]</mo><mo>∗</mo><mi>B</mi><mo>+</mo><mi>i</mi><mi>d</mi><mi>x</mi><mo>(</mo><mi>s</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>)</mo><mo>)</mo><mi mathvariant="normal">%</mi><mi>m</mi><mi>o</mi><mi>d</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">Hash1[i] = (Hash1[i - 1]*B + idx(s[i]))\%mod1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mord mathrm">1</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mord mathrm">1</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mbin">+</span><span class="mord mathit">i</span><span class="mord mathit">d</span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord mathit">s</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord mathrm">%</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mathrm">1</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>a</mi><mi>s</mi><mi>h</mi><mn>2</mn><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mo>(</mo><mi>H</mi><mi>a</mi><mi>s</mi><mi>h</mi><mn>2</mn><mo>[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>]</mo><mo>∗</mo><mi>B</mi><mo>+</mo><mi>i</mi><mi>d</mi><mi>x</mi><mo>(</mo><mi>s</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>)</mo><mo>)</mo><mi mathvariant="normal">%</mi><mi>m</mi><mi>o</mi><mi>d</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">Hash2[i] = (Hash2[i - 1]*B + idx(s[i]))\%mod2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mord mathrm">2</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mord mathrm">2</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mbin">+</span><span class="mord mathit">i</span><span class="mord mathit">d</span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord mathit">s</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord mathrm">%</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mathrm">2</span></span></span></span></p><h2><span id="子串hash"> ※子串Hash</span></h2><p>若已知 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">|S| = n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="mord mathrm">∣</span><span class="mrel">=</span><span class="mord mathit">n</span></span></span></span> 的字符串的Hash值，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.903ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3051 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(576,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1105,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(1574,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mo" transform="translate(2150,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(2428,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2773,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container>, 子串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>[</mo><mi>l</mi><mo>]</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>s</mi><mo>[</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">s[l],...,s[r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mpunct">,</span><span class="mord mathit">s</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span> 的Hash值就可以 O(1) 求解：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo>=</mo><mo>(</mo><mo>(</mo><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo>[</mo><mi>r</mi><mo>]</mo><mo>−</mo><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo>[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo>]</mo><mo>∗</mo><msup><mi>B</mi><mrow><mi>r</mi><mo>−</mo><mi>l</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>)</mo><mi mathvariant="normal">%</mi><mi>m</mi><mi>o</mi><mi>d</mi><mo>+</mo><mi>m</mi><mi>o</mi><mi>d</mi><mo>)</mo><mi mathvariant="normal">%</mi><mi>m</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">hash = ((hash[r] - hash[l - 1] * B^{r - l + 1}) \% mod + mod) \% mod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">h</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mrel">=</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathit">h</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mbin">−</span><span class="mord mathit">h</span><span class="mord mathit">a</span><span class="mord mathit">s</span><span class="mord mathit">h</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">∗</span><span class="mord"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mord mathrm">%</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mbin">+</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mclose">)</span><span class="mord mathrm">%</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span></span></span></span></p><p>如果需要反复求解子串Hash值，预处理 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>B</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">B^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 效果更佳</p><h2><span id="素数选择"> 素数选择</span></h2><p>上界和下界指的是离素数最近的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.664392em;"></span><span class="strut bottom" style="height:0.664392em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathrm">2</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 的值。</p><table><thead><tr><th>lwr</th><th>uBr</th><th>% err</th><th>prime</th></tr></thead><tbody><tr><td>2^5</td><td>2^6</td><td>10.416667</td><td>53</td></tr><tr><td>2^6</td><td>2^7</td><td>1.041667</td><td>97</td></tr><tr><td>2^7</td><td>2^8</td><td>0.520833</td><td>193</td></tr><tr><td>2^8</td><td>2^9</td><td>1.302083</td><td>389</td></tr><tr><td>2^9</td><td>2^10</td><td>0.130208</td><td>769</td></tr><tr><td>2^10</td><td>2^11</td><td>0.455729</td><td>1543</td></tr><tr><td>2^11</td><td>2^12</td><td>0.227865</td><td>3079</td></tr><tr><td>2^12</td><td>2^13</td><td>0.113932</td><td>6151</td></tr><tr><td>2^13</td><td>2^14</td><td>0.008138</td><td>12289</td></tr><tr><td>2^14</td><td>2^15</td><td>0.069173</td><td>24593</td></tr><tr><td>2^15</td><td>2^16</td><td>0.010173</td><td>49157</td></tr><tr><td>2^16</td><td>2^17</td><td>0.013224</td><td>98317</td></tr><tr><td>2^17</td><td>2^18</td><td>0.002543</td><td>196613</td></tr><tr><td>2^18</td><td>2^19</td><td>0.006358</td><td>393241</td></tr><tr><td>2^19</td><td>2^20</td><td>0.000127</td><td>786433</td></tr><tr><td>2^20</td><td>2^21</td><td>0.000318</td><td>1572869</td></tr><tr><td>2^21</td><td>2^22</td><td>0.000350</td><td>3145739</td></tr><tr><td>2^22</td><td>2^23</td><td>0.000207</td><td>6291469</td></tr><tr><td>2^23</td><td>2^24</td><td>0.000040</td><td>12582917</td></tr><tr><td>2^24</td><td>2^25</td><td>0.000075</td><td>25165843</td></tr><tr><td>2^25</td><td>2^26</td><td>0.000010</td><td>50331653</td></tr><tr><td>2^26</td><td>2^27</td><td>0.000023</td><td>100663319</td></tr><tr><td>2^27</td><td>2^28</td><td>0.000009</td><td>201326611</td></tr><tr><td>2^28</td><td>2^29</td><td>0.000001</td><td>402653189</td></tr><tr><td>2^29</td><td>2^30</td><td>0.000011</td><td>805306457</td></tr><tr><td>2^30</td><td>2^31</td><td>0.000000</td><td>1610612741</td></tr></tbody></table><h2><span id="题单"> 题单</span></h2><ul><li><p>0x00 <a href="https://www.luogu.org/problemnew/show/P3370">P3370 【模板】字符串哈希</a> 模板</p></li><li><p>0x01 <a href="https://www.luogu.org/problemnew/show/P2957">P2957 谷仓里的回声</a> 同上</p></li><li><p>0x02 <a href="https://www.luogu.org/problemnew/show/P1381">P1381 单词背诵</a> 尺取</p><blockquote><p>尺取(双指针)： 对给定的一个序列，在序列中寻找包含全部需求的，长度最小的一段子序列 O(n)</p><ul><li>初始化左右下标 l, r 到适当位置</li><li>不停向右移动r，直到 r 出界或者[l, r] 自区间已经满足要求</li><li>ans = min(ans, r - l + 1)</li><li>移动 l 到适当位置，重复第一个过程</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression">ll</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">p</span> <span class="token expression"><span class="token number">233</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mod</span> <span class="token expression"><span class="token number">1610612741</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">1000005</span></span></span><span class="token keyword">int</span> Hash1<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Hash2<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Hashtmp<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> Hash<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>Hash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Hash<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1e6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> p <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getHash</span><span class="token punctuation">(</span><span class="token keyword">int</span> Hash<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Hash<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> Hash<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token operator">+</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span><span class="token punctuation">}</span>map<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> words<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span> vis<span class="token punctuation">;</span>string ss<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>string s<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span> <span class="token function">add</span><span class="token punctuation">(</span>Hash1<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>words<span class="token punctuation">[</span>Hash1<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> m<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>Hashtmp<span class="token punctuation">,</span> ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Hash2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Hashtmp<span class="token punctuation">[</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span>Hash2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>Hash2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>vis<span class="token punctuation">[</span>Hash2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> tot<span class="token operator">++</span><span class="token punctuation">;</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span>Hash2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> tot <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tot<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> haved<span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> maxn<span class="token punctuation">;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span>Hash2<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>haved<span class="token punctuation">[</span>Hash2<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>tmp<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>haved<span class="token punctuation">[</span>Hash2<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> tot<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>haved<span class="token punctuation">[</span>Hash2<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span>words<span class="token punctuation">[</span>Hash2<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>haved<span class="token punctuation">[</span>Hash2<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> haved<span class="token punctuation">[</span>Hash2<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>0x03 <a href="https://acm.ecnu.edu.cn/problem/3486/">EOJ 3486 最大的子串</a> 二分 + Hash 求后缀的最长公共前缀</p></li><li><p>0x04 [JSOI2016]扭动的回文串</p></li></ul>]]></content>
    
    
    <summary type="html">String Hash</summary>
    
    
    
    <category term="ALGORITHMS" scheme="https://maskros.top/categories/ALGORITHMS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="string" scheme="https://maskros.top/tags/string/"/>
    
    <category term="二分" scheme="https://maskros.top/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="note" scheme="https://maskros.top/tags/note/"/>
    
    <category term="algorithm" scheme="https://maskros.top/tags/algorithm/"/>
    
    <category term="hash" scheme="https://maskros.top/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>Java Syntax in 算法竞赛</title>
    <link href="https://maskros.top/post/note/java%20syntax.html"/>
    <id>https://maskros.top/post/note/java%20syntax.html</id>
    <published>2022-04-06T17:07:28.000Z</published>
    <updated>2022-04-08T15:05:49.396Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="java-syntax-for-acm"> Java Syntax for ACM</span></h1><blockquote><p>临阵磨枪</p></blockquote><h2><span id="0x00-header"> 0x00 Header</span></h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// hot key : main</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="0x01-io"> 0x01 I/O</span></h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// more fast</span><span class="token comment">// most fast</span><span class="token comment">// main 函数要 throw IOException 每次输入前 cin.nextToken()</span><span class="token comment">// 数字输入cin.nval 字符串cin.sval</span><span class="token keyword">static</span> <span class="token class-name">StreamTokenizer</span> cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamTokenizer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意 sval 如果字符串纯数字会返回为null 应提前转义</span>cin<span class="token punctuation">.</span><span class="token function">ordinaryChars</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">wordChars</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> t <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读一整行</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 多行输入</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">StreamTokenizer</span><span class="token punctuation">.</span>TT_EOF<span class="token punctuation">)</span> <span class="token comment">// 文件末尾</span><span class="token comment">// 读入一行，分割字符串</span><span class="token class-name">String</span> s <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// more fast</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在代码的最后out.flush()</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//sout</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="0x02-common-api-vs-stl"> 0x02 Common API vs STL</span></h2><blockquote><p>三级标题括号内容即对应c++ STL内容</p></blockquote><h3><span id="0-进制转换"> 0. 进制转换</span></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把int型数据转换乘X进制数并转换成string型 x ∈ [2, 36]</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把字符串当作X进制数转换成int型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="1-sort"> 1. sort</span></h3><p>默认排序 (对基本类型如int char)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认排序 升序</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现<strong>Comparator</strong>接口自定义<strong>比较器</strong> (要使用基本类型所对应的<strong>类</strong>：(Integer, Character) )</p><p><em>@Override</em>  <code>public int compare(type x, type y)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 降序的简便写法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//注意，要想改变默认的排列顺序，不能使用基本类型（int,double,char）而要使用它们对应的类</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//定义一个自定义类Mycmp的对象</span>        <span class="token class-name">Comparator</span> cmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 放在Main类外面</span><span class="token comment">// Comparator是一个接口，所以这里我们自己定义的类MyComparator要implents该接口</span><span class="token keyword">class</span> <span class="token class-name">Mycmp</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token comment">//返回值为负则x排在y前面，反之在后面，为0则表示相等</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> x<span class="token punctuation">,</span> <span class="token class-name">Integer</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现<strong>Comparable</strong>接口自定义<strong>类</strong>排序</p><p><em>@Override</em> <code>public int compareTo(classname x)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token comment">//自定义的比较函数，跟2的语法类似，此例中先x后y从小到大排序</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Point</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x<span class="token operator">!=</span>o<span class="token punctuation">.</span>x<span class="token operator">?</span> x<span class="token operator">-</span>o<span class="token punctuation">.</span>x<span class="token operator">:</span> y<span class="token operator">-</span>o<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//Java里的数组要先new数组，再new每个元素，不是数组有了每个元素也就有了</span>        <span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//其实应该在Point里重载有参的构造函数，直接在new的时候初始化，这样代码简洁些</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不把每个元素new出来直接进行下面的赋值会空指针的</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先x后y从小到大排序</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-stringstringbuilder"> 2. String/StringBuilder</span></h3><p>String 是 final 类型，每一次拼接，都会构建一个新的String对象， 相加除外，但是 + 操作比较耗时</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s<span class="token punctuation">;</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">;</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串转换为字符数组</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回下标对应的字符</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 比较</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据str分割s, 返回String数组</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 截取子串</span>s<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在后面连接子串</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将x全部替换为y</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找第一次出现c的地方</span>s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找最后一次出现c的地方</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否以指定字符串开始和结束</span>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去除首尾空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StringBuilder 一般拼接时使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 末尾添加，任意数据类型都可以，都转换成string </span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可链式写法</span>sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 翻转字符串</span><span class="token class-name">String</span> s <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换成String</span><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// String转换成sb</span>sb<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sb2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 区间截取 [l, r)</span>sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-hashmaptreemap-map"> 3. HashMap/TreeMap (map)</span></h3><p>无序HashMap 对应 unordered_map</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存</span>mp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取，key不存在则返回null</span>mp<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删</span>mp<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment">// 改, key不存在则无事发生</span><span class="token comment">// 用迭代器遍历</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span> <span class="token punctuation">></span></span> it <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 用for-each循环遍历 更便捷</span><span class="token comment">// entry 使用 getKey() 和 getvalue() 方法来获得键值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> e <span class="token operator">:</span> mp<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 检查键值是否存在 返回boolean</span>mp<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>mp<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有序Treemap - map</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 基本操作同上，多了查找方法</span><span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回K 或 Map.Entry&lt;K,V></span>mp<span class="token punctuation">.</span><span class="token function">ceilingKey</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第一个大于等于key</span>mp<span class="token punctuation">.</span><span class="token function">floorKey</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第一个小于等于key</span>mp<span class="token punctuation">.</span><span class="token function">lowerKey</span><span class="token punctuation">(</span><span class="token class-name">K</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第一个小于key</span>mp<span class="token punctuation">.</span><span class="token function">higherKey</span><span class="token punctuation">(</span><span class="token class-name">K</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第一个大于key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-arraylist-vector"> 4. ArrayList (vector)</span></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 二维</span><span class="token class-name">ArrayList</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 增</span>v<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除</span>v<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除值为1的元素</span>v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 改</span>v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="5-arraydequepriorityqueue-queuestackdequepriority_queue"> 5. ArrayDeque/PriorityQueue ((queue/stack/deque)/priority_queue)</span></h3><p>ArrayDeque</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 无论如何都可以Foreach遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> x <span class="token operator">:</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">// queue</span>q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入队</span>q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 队头</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出队，同时返回值</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 弹出的同时可以返回队头元素，不像c++是void的</span><span class="token punctuation">&#125;</span><span class="token comment">// stack</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入栈</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈顶</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 弹出栈顶，同时返回值</span><span class="token comment">// deque</span>d<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> d<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入队</span>d<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> d<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 队头队尾</span>d<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> d<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PriorityQueue</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认从小到大 foreach遍历不报错 但乱序</span><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 增</span>q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获得第一个元素</span>q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取并移除第一个</span>q<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//移除指定元素</span><span class="token comment">// 自定义优先队列比较器：实现Comparator接口即可</span><span class="token keyword">class</span> <span class="token class-name">Mycmp</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> x<span class="token punctuation">,</span> <span class="token class-name">Integer</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> y <span class="token operator">-</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Mycmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="6-hashsettreeset-set"> 6. HashSet/TreeSet (set)</span></h3><p>HashSet无序 TreeSet有序 以下用TreeSet演示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回boolean是否存在</span>s<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">ceiling</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">higher</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">lower</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">headSet</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 小于x组成的set</span>s<span class="token punctuation">.</span><span class="token function">tailSet</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 大于x组成的set</span>s<span class="token punctuation">.</span><span class="token function">subset</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (x, y]组成的set</span><span class="token comment">// 遍历</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 遍历</span><span class="token keyword">int</span> x <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="7-biginterbigdemical"> 7. BigInter/BigDemical</span></h3><p>大整数/高精度 (直接根据自动补全名称使用对应方法即可)</p><h3><span id="8-math"> 8. Math</span></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 除基本的Math.max, min, abs, sqrt, pow外</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向上取整</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向下取整</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 四舍五入</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成[0, 1) 之间的double伪随机数</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">atan</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 三角函数</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> pi<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ok</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h1&gt;&lt;span id=&quot;java-synta</summary>
      
    
    
    
    <category term="NOTE" scheme="https://maskros.top/categories/NOTE/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="note" scheme="https://maskros.top/tags/note/"/>
    
    <category term="java" scheme="https://maskros.top/tags/java/"/>
    
    <category term="STL" scheme="https://maskros.top/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>Use Eclipse as a Coding IDE</title>
    <link href="https://maskros.top/post/note/Eclipse.html"/>
    <id>https://maskros.top/post/note/Eclipse.html</id>
    <published>2022-04-04T16:07:28.000Z</published>
    <updated>2022-04-06T16:58:09.881Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="eclipse-for-lanqiao"> Eclipse for Lanqiao</span></h1><blockquote><p>不咋用Eclipse 为了参加蓝桥记录一下</p></blockquote><h2><span id="eclipse-config"> Eclipse Config</span></h2><h3><span id="0x01-自动补全"> 0x01 自动补全</span></h3><p>Window --&gt; Preferences --&gt; Java --&gt; Editor --&gt; Content Assist</p><p><strong>Auto activation triggers for Java</strong> : <code>.qwertyuiopasdfghjklzxcvbnm</code></p><p><strong>Disable insertion triggers except ‘Enter’</strong>  <code>[Y]</code> // 表示只有回车时才触发自动补全</p><p>Project --&gt; Build Automatically 取消勾选 关闭自动编译</p><h3><span id="0x02-新建文件"> 0x02 新建文件</span></h3><p>New --&gt; Java Project --&gt; input your project name --&gt; new package --&gt; new Class --&gt; input your Class name --&gt; public static void main(String[] args) <code>[Y]</code></p><h3><span id="0x03-快捷键"> 0x03 快捷键</span></h3><table><thead><tr><th>Keys</th><th>Features</th></tr></thead><tbody><tr><td>Alt+↑/↓</td><td>将当前行内容往上/下移动</td></tr><tr><td>Ctrl+shift+F</td><td>格式化</td></tr><tr><td>Ctrl+D</td><td>删除当前行</td></tr><tr><td>Alt+/</td><td>代码助手</td></tr><tr><td>Ctrl+/</td><td>注释</td></tr><tr><td>Ctrl+F11</td><td>运行</td></tr><tr><td>Ctrl+Alt+↑/↓</td><td>复制当前行</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h1&gt;&lt;span id=&quot;eclipse-fo</summary>
      
    
    
    
    <category term="NOTE" scheme="https://maskros.top/categories/NOTE/"/>
    
    
    <category term="note" scheme="https://maskros.top/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>数位dp专题训练</title>
    <link href="https://maskros.top/post/algorithm/exercise/%E6%95%B0%E4%BD%8Ddp_problem.html"/>
    <id>https://maskros.top/post/algorithm/exercise/%E6%95%B0%E4%BD%8Ddp_problem.html</id>
    <published>2022-03-23T12:30:00.000Z</published>
    <updated>2022-03-24T03:57:11.955Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="数位dp专题训练"> 数位dp专题训练</span></h1><p>猛练！</p><h2><span id="0x00-digit"> 0x00 Digit</span></h2><blockquote><p><a href="https://www.luogu.com.cn/blog/virus2017/shuweidp">link</a> 洛谷板子题</p><p>题意：定义一个正整数的价值是把这个数的十进制写出来之后，最长的等差子串的长度。<br>求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span> 范围内数字价值的总和。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/*定义一个正整数的价值是把这个数的十进制写出来之后，最长的等差子串的长度。求[l,r]范围内数字价值的总和。*/#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int T, n, m, len, a[20];ll l, r, dp[20][15][25][25][20];ll dfs(int pos, int pre, ll st, ll sum, int d, int lead, int limit)//pos搜到的位置//pre前一位数//st当前公差最大差值//sum整个数字的最大价值//d共差//lead判断是否有前导0//limit判断是否有最高位限制{    if (pos &gt; len) return sum; //dp结束    //记录状态（计划搜索）    //注意d有负数，最小可以到-9，所以记录时数组下标是d+10    if ((dp[pos][pre][st][sum][d + 10] != -1 &amp;&amp; (!limit) &amp;&amp; (!lead))) return dp[pos][pre][st][sum][d + 10];    ll ret = 0;    int res = limit ? a[len - pos + 1] : 9; //最高位最大值    for (int i = 0; i &lt;= res; i++)    {        //有前导0且这位也是前导0，一切不变只有位数变化        if ((!i) &amp;&amp; lead) ret += dfs(pos + 1, 0, 0, 0, -38, 1, limit &amp;&amp; (i == res));        //有前导0但这位不是前导0（这位是数字的最高位）开始有前一位，一个数形成等差数列        else if (i &amp;&amp; lead) ret += dfs(pos + 1, i, 1, 1, -38, 0, limit &amp;&amp; (i == res));        //之前刚搜到1位还没有共差，两位数形成等差数列，记录共差        else if (d &lt; -9) ret += dfs(pos + 1, i, 2ll, 2ll, i - pre, 0, limit &amp;&amp; (i == res));        //搜到2位以后，共差若与前两位相同当前等差数列长度增加，若公差变化则更新整个数字的最大价值，等差数列长度又变为2        else if (d &gt;= -9) ret += dfs(pos + 1, i, (i - pre == d) ? st + 1 : 2, max(sum, (i - pre == d) ? st + 1 : 2), (i - pre == d) ? d : i - pre, 0, limit &amp;&amp; (i == res));    }    //没有前导0和最高限制时可以直接记录当前dp值以便下次搜到同样的情况可以直接使用。    return (!limit &amp;&amp; !lead) ? dp[pos][pre][st][sum][d + 10] = ret : ret;}ll part(ll x) {    len = 0;    while (x) a[++len] = x % 10, x /= 10;    memset(dp, -1, sizeof(dp));    return dfs(1, 0, 0, 0, -38, 1, 1); //-38是随便赋的其实赋成-10就行了……}int main() {    cin &gt;&gt; T;    while (T--) {        cin &gt;&gt; l &gt;&gt; r;        //l是0的时候要特别注意！        if(l) cout &lt;&lt; (part(r) - part(l - 1)) &lt;&lt; '\n';        else cout &lt;&lt; part(r) - part(l) + 1 &lt;&lt; '\n';    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="0x01-hdu2089-不要62"> 0x01 HDU2089 不要62</span></h2><blockquote><p><a href="https://ac.nowcoder.com/acm/problem/50520">link</a></p><p>题意：</p><p>入门题，统计区间内不含4或62的数字个数</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a[10], len;ll l, r;ll dp[15][15];ll dfs(int pos, int pre, int lead, int limit) {    if (pos &gt; len) return 1; //剪枝    if ((dp[pos][pre] != -1 &amp;&amp; (!limit) &amp;&amp; (!lead))) return dp[pos][pre]; //记录当前值    ll ret = 0; //暂时记录当前方案数    int res = limit ? a[len - pos + 1] : 9; //res当前位能取到的最大值    for (int i = 0; i &lt;= res; i++) {        if (i == 4) continue;        //有前导0并且当前位也是前导0        if ((!i) &amp;&amp; lead) ret += dfs(pos + 1, 0, 1, i == res &amp;&amp; limit);        //有前导0但当前位不是前导0，当前位就是最高位        else {            if (i == 2 &amp;&amp; pre == 6) continue;            ret += dfs(pos + 1, i, 0, i == res &amp;&amp; limit);        }    }    if (!limit &amp;&amp; !lead) dp[pos][pre] = ret; //当前状态方案数记录    return ret;}//把数按位拆分ll part(ll x) {    len = 0;    while (x) a[++len] = x % 10, x /= 10;    memset(dp, -1, sizeof dp); //初始化-1（因为有可能某些情况下的方案数是0）    return dfs(1, 0, 1, 1); //进入记搜}int main() {    while(cin &gt;&gt; l &gt;&gt; r) {        if(!l &amp;&amp; !r) break;        cout &lt;&lt; part(r) - part(max(0ll, l - 1)) &lt;&lt; '\n';    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="0x02-数位小孩"> 0x02 数位小孩</span></h2><blockquote><p><a href="https://ac.nowcoder.com/acm/contest/23480/D">link</a></p><p>题意：</p><p>给定区间，统计区间中有多少个数同时满足：每相邻两个数位和为素数，其中至少一个数位为1，且没有前导0</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a[20], len;ll l, r;bool prime[25];ll dp[20][20];ll dfs(int pos, int pre, bool one, int lead, int limit) //记搜{    if (pos &gt; len) if (one) return 1; else return 0; //剪枝    if ((dp[pos][pre] != -1 &amp;&amp; (!limit) &amp;&amp; (!lead) &amp;&amp; one)) return dp[pos][pre]; //记录当前值    ll ret = 0; //暂时记录当前方案数    int res = limit ? a[len - pos + 1] : 9; //res当前位能取到的最大值    for (int i = 0; i &lt;= res; i++) {        bool nextone = one;        if (i == 1 || pre == 1) nextone = 1;        //有前导0并且当前位也是前导0        if ((!i) &amp;&amp; lead) ret += dfs(pos + 1, 0, 0, 1, i == res &amp;&amp; limit);        //有前导0但当前位不是前导0，当前位就是最高位        if (i &amp;&amp; lead) ret += dfs(pos + 1, i, nextone, 0, i == res &amp;&amp; limit);        // else        else {            if (!prime[i + pre]) continue;            ret += dfs(pos + 1, i, nextone, 0, i == res &amp;&amp; limit);        }    }    if (!limit &amp;&amp; !lead &amp;&amp; one) dp[pos][pre] = ret; //当前状态方案数记录    return ret;}//把数按位拆分ll part(ll x) {    len = 0;    while (x) a[++len] = x % 10, x /= 10;    memset(dp, -1, sizeof dp); //初始化-1（因为有可能某些情况下的方案数是0）    return dfs(1, 0, 0, 1, 1); //进入记搜}void pr(int x) { prime[x] = 1; }void init() {    pr(2), pr(3), pr(5), pr(7), pr(11), pr(13), pr(17), pr(19);}int main() {    init();    cin &gt;&gt; l &gt;&gt; r;    cout &lt;&lt; part(r) - part(max(0ll, l - 1)) &lt;&lt; '\n';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="0x03-at4540-digit-sum"> 0x03 AT4540 Digit Sum</span></h2><blockquote><p><a href="https://www.luogu.com.cn/problem/AT4540">link</a></p><p>题意：</p><p>区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>1</mn><mo separator="true">,</mo><mi>K</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[1, K]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="mclose">]</span></span></span></span>​ 内有多少个数，使得十进制表示的数字之和是 D 的倍数？ 答案对 1e9 + 7 取模，K &lt; 1e10000. D &lt; 1e2</p><p>题解：只需维护前缀和num即可，pre都用不到，注意输入数字较大，爆longlong要用string翻转处理，(开始没翻转过来wa了半天…)</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a[maxn], len;ll l, r, D;ll dp[maxn][115];ll dfs(int pos, int num, int lead, int limit) {    if (pos &gt; len) return num == 0; //剪枝    if ((dp[pos][num] != -1 &amp;&amp; (!limit) &amp;&amp; (!lead))) return dp[pos][num] % mod; //记录当前值    ll ret = 0; //暂时记录当前方案数    int res = limit ? a[len - pos + 1] : 9; //res当前位能取到的最大值    for (int i = 0; i &lt;= res; i++) {        int num_ = (num + i) % D;        //有前导0并且当前位也是前导0        if ((!i) &amp;&amp; lead) ret = (ret + dfs(pos + 1, num_, 1, i == res &amp;&amp; limit) % mod) % mod;        //有前导0但当前位不是前导0，当前位就是最高位        else if (i &amp;&amp; lead) ret = (ret + dfs(pos + 1, num_, 0, i == res &amp;&amp; limit) % mod) % mod;        else {            ret = (ret + dfs(pos + 1, num_, 0, i == res &amp;&amp; limit) % mod) % mod;        }    }    if (!limit &amp;&amp; !lead) dp[pos][num] = ret % mod; //当前状态方案数记录    return ret % mod;}ll part(string x) {    len = x.size();    // reverse    for (int i = 0; i &lt; x.size(); i++) {        a[len - i] = x[i] - '0';    }    memset(dp, -1, sizeof dp); //初始化-1（因为有可能某些情况下的方案数是0）    return dfs(1, 0, 1, 1); //进入记搜}int main() {    string s;     cin &gt;&gt; s; cin &gt;&gt; D;    cout &lt;&lt; (part(s) - part("0") + mod) % mod &lt;&lt; '\n';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="0x04-sac1-萌数"> 0x04 SAC#1 - 萌数</span></h2><blockquote><p><a href="https://www.luogu.com.cn/problem/P3413">link</a></p><p>题意：</p><p>只有满足“存在长度至少为2的回文子串”的数是萌的，求区间内萌数的个数。</p><p>题解：</p><p><strong>正难则反</strong>，<strong>当一个数的任意一位都不和前两位的数字相同时，这个数就不含回文串</strong></p><p>故<code>dp[pos][pre][ppre]</code>，pre表示上一位，ppre表示上二位的数字。</p><p>但是由于输入范围超过ll，所以需读入string，并且用总长度减去dp求得的方案数。</p><p>在这里没有更加简洁优化自己的代码，写了个丑陋的大数减法，虽然AC了但是待优化、、</p></blockquote><p><strong>优化细节</strong>：</p><ul><li><p>由于答案是 <code>sum[r] - sum[l - 1]</code> 那么对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">l - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span>：需要写高精度减法吗？</p><p>不用。直接求<code>sum[r]</code> 和 <code>sum[l]</code> 然后特判一下 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">l - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span> 这个左边界是否合法就行。</p></li><li><p>由于正难则反，取补集，需要使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>−</mo><mi>l</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">r - l + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span> 再减去答案，需要写高精度吗？</p><p>不用。直接对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span></span></span></span> 取模然后相减，得出的结果与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo>)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mo>(</mo><mn>1</mn><mi>e</mi><mn>9</mn><mo>+</mo><mn>7</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">(r-l) mod (1e9+7)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mclose">)</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mord mathit">e</span><span class="mord mathrm">9</span><span class="mbin">+</span><span class="mord mathrm">7</span><span class="mclose">)</span></span></span></span> 一致。</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string l, r;int len, a[maxn];int dp[maxn][15][15];// pos pre pprell dfs(int pos, int pre, int ppre, int lead, int limit) {    if (pos &gt; len) return 1; //剪枝    if ((dp[pos][pre][ppre] != -1 &amp;&amp; (!limit) &amp;&amp; (!lead))) return dp[pos][pre][ppre] % mod; //记录当前值    ll ret = 0; //暂时记录当前方案数    int res = limit ? a[len - pos + 1] : 9; //res当前位能取到的最大值    for (int i = 0; i &lt;= res; i++) {        if ((!i) &amp;&amp; lead) ret = (ret + dfs(pos + 1, 0, -1, 1, i == res &amp;&amp; limit) % mod) % mod;        else if (i &amp;&amp; lead) ret = (ret + dfs(pos + 1, i, -1, 0, i == res &amp;&amp; limit) % mod) % mod;        else {        if (pre == ppre || i == pre || i == ppre) continue;        ret = (ret + dfs(pos + 1, i, pre, 0, i == res &amp;&amp; limit) % mod) % mod;        }    }    if (!limit &amp;&amp; !lead) dp[pos][pre][ppre] = ret % mod; //当前状态方案数记录    return ret % mod;}ll part(string x, bool flag) {    len = x.size();    rep(i, 0, len) {    a[len - i] = x[i] - '0';    }    if(flag) {    if(len == 1 &amp;&amp; a[1] == 0) { a[1] = 0; }    else {    int idx = 1;    while (idx &lt;= len) {    if(a[idx] &gt; 0) { a[idx]--; break; }    else a[idx] = 9, idx++;    }    }    }    memset(dp, -1, sizeof dp); //初始化-1（因为有可能某些情况下的方案数是0）    return dfs(1, 0, -1, 1, 1); //进入记搜}// y - x + 1int ret[maxn];ll calc(string x, string y) {int lead = 1;int leny = y.size(), lenx = x.size();if(lenx == 1 &amp;&amp; x[0] == '0') lead = 0;rep(i, 1, lenx + 1) {int tmp = y[leny - i] - '0' - (x[lenx - i] - '0') + lead;if(tmp &gt;= 10) { lead = 1; tmp = tmp % 10; }else if(tmp &lt; 0)  { lead = -1; tmp = tmp + 10; }else lead = 0;ret[i] = tmp;}rep(i, lenx + 1, leny + 1) {int tmp = y[leny - i] - '0' + lead;if(tmp &gt;= 10) { lead = 1; tmp = tmp % 10; }else if(tmp &lt; 0)  { lead = -1; tmp = tmp + 10; }ret[i] = tmp;}ll ans = 0;red(i, leny + 1, 1) {ans = (ans * 10 % mod + ret[i]) % mod;}return ans;}signed main() {cin &gt;&gt; l &gt;&gt; r;    cout &lt;&lt; (calc(l, r) - (part(r, 0) - part(l, 1) + mod) % mod + mod) % mod &lt;&lt; '\n';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="0x05-zjoi2010数字计数"> 0x05 [ZJOI2010]数字计数</span></h2><blockquote><p><a href="https://ac.nowcoder.com/acm/problem/20491">link</a></p><p>题意：给定区间，统计区间内每个数各位数字出现的次数</p><p>思路：对0~9每个数字单独记搜</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define int llll l, r;int len, a[20];int dp[20][20];// posint num = 0;ll dfs(int pos, int cnt, int lead, int limit) {    if (pos &gt; len) return cnt;//剪枝    if ((dp[pos][cnt] != -1 &amp;&amp; (!limit) &amp;&amp; (!lead))) return dp[pos][cnt]; //记录当前值    ll ret = 0; //暂时记录当前方案数    int res = limit ? a[len - pos + 1] : 9; //res当前位能取到的最大值    for (int i = 0; i &lt;= res; i++) {    // ret += dfs(pos + 1, cnt + ((i == num) &amp;&amp; (i || !lead)), lead &amp;&amp; (i == 0), i == res &amp;&amp; limit);    int cnt_ = (i == num) ? cnt + 1 : cnt;        if ((!i) &amp;&amp; lead) ret += dfs(pos + 1, 0, 1, i == res &amp;&amp; limit);        else if (i &amp;&amp; lead) ret += dfs(pos + 1, cnt_, 0, i == res &amp;&amp; limit);        else ret += dfs(pos + 1, cnt_, 0, i == res &amp;&amp; limit);    }    if (!limit &amp;&amp; !lead) dp[pos][cnt] = ret; //当前状态方案数记录    return ret;}ll part(ll x) {    len = 0;    while (x) a[++len] = x % 10, x /= 10;    memset(dp, -1, sizeof dp); //初始化-1（因为有可能某些情况下的方案数是0）    return dfs(1, 0, 1, 1); //进入记搜}signed main() {cin &gt;&gt; l &gt;&gt; r;while(num &lt;= 9)    cout &lt;&lt; part(r) - part(max(0ll, l - 1)) &lt;&lt; ' ', num++;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="0x06-ahoi2009-同类分布"> 0x06 [AHOI2009] 同类分布</span></h2><blockquote><p><a href="https://ac.nowcoder.com/acm/problem/19888">link</a></p><p>题意：统计区间内每个数各位数字之和能整除原数的数的个数，l, r &lt; 1e18</p><p>思路：<br>模数就是各位数字之和。所以我们可以先确定这个值再搜。可以枚举各位数字之和。那么最坏的情况就是10^18-1，各位数字和为17 * 9=153，所以我们枚举153次即可。</p><p>dp数组维护各位数字之和<code>d</code>, 以及数字对mod取模的值<code>sum</code>即可，剪枝条件为 <code>d == mod &amp;&amp; sum == 0</code></p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define int llll l, r;int len, a[25];int dp[25][180][180];// pos sum dint mod;ll dfs(int pos, int sum, int d, int lead, int limit) {    if (pos &gt; len) return d == mod &amp;&amp; sum == 0;//剪枝    if ((dp[pos][sum][d] != -1 &amp;&amp; (!limit) &amp;&amp; (!lead))) return dp[pos][sum][d]; //记录当前值    ll ret = 0; //暂时记录当前方案数    int res = limit ? a[len - pos + 1] : 9; //res当前位能取到的最大值    for (int i = 0; i &lt;= res; i++) {    if(d + i &gt; mod) break;        if ((!i) &amp;&amp; lead) ret += dfs(pos + 1, 0, 0, 1, i == res &amp;&amp; limit);        else if (i &amp;&amp; lead) ret += dfs(pos + 1, i % mod, i, 0, i == res &amp;&amp; limit);        else ret += dfs(pos + 1, (sum * 10 + i) % mod, d + i, 0, i == res &amp;&amp; limit);    }    if (!limit &amp;&amp; !lead) dp[pos][sum][d] = ret; //当前状态方案数记录    return ret;}ll part(ll x) {    len = 0;    while (x) a[++len] = x % 10, x /= 10;    ll ans = 0;    rep(i, 1, 9 * len + 1) {    memset(dp, -1, sizeof dp);     mod = i;    ans += dfs(1, 0, 0, 1, 1);    }    return ans;}signed main() {cin &gt;&gt; l &gt;&gt; r;cout &lt;&lt; part(r) - part(max(0ll, l - 1));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="0x07-p4317-花神的数论题"> 0x07 P4317 花神的数论题</span></h2><blockquote><p><a href="https://www.luogu.com.cn/problem/P4317">link</a></p><p>题意：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo>(</mo><mi>i</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">sum(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span> 表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.65952em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span> 的二进制中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span> 的个数，给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span></span></span></span>, 求从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span></span></span></span> , <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo>(</mo><mi>i</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">sum(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit">m</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span></span></span></span> 的乘积。对 1e7 + 7 取模，N &lt; 1e15</p><p>思路：</p><p>将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span></span></span></span> 按照二进制存储，根据范围1e15可知，一个数的二进制有50位1，于是我们枚举1的个数，<code>dp[pos][cnt]</code> 维护1的个数<code>cnt</code>，剪枝时cnt=枚举个数即可返回计数。对枚举的每种情况进行计数用ksm乘即可。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ll qpow(ll a, ll b) {    ll ans = 1;    for (; b; b &gt;&gt;= 1) {        if (b &amp; 1)            ans = ans * a % mod;        a = a * a % mod;    }    return ans;}ll l, r;int len, a[70], tmp;int dp[70][70];// pos cntll dfs(int pos, int cnt, int lead, int limit) {if (pos &gt; len) return cnt == tmp;if ((dp[pos][cnt] != -1 &amp;&amp; (!limit) &amp;&amp; (!lead))) return dp[pos][cnt];ll ret = 0; int res = limit ? a[len - pos + 1] : 1; for (int i = 0; i &lt;= res; i++) {if ((!i) &amp;&amp; lead) ret += dfs(pos + 1, 0, 1, i == res &amp;&amp; limit);else if (i &amp;&amp; lead) ret += dfs(pos + 1, i == 1, 0, i == res &amp;&amp; limit);else ret += dfs(pos + 1, (i == 1) + cnt, 0, i == res &amp;&amp; limit);}if (!limit &amp;&amp; !lead) dp[pos][cnt] = ret;return ret;}ll part(ll x) {len = 0;while (x) a[++len] = x &amp; 1 ? 1 : 0, x /= 2;ll ans = 1;rep(i, 1, 70) {tmp = i;memset(dp, -1, sizeof dp);int fuck = dfs(1, 0, 1, 1);ans = ans * qpow(i, fuck) % mod;}return ans;}signed main() {cin &gt;&gt; r;cout &lt;&lt; part(r);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h1&gt;&lt;span id=&quot;数位dp专题训练&quot;&gt;</summary>
      
    
    
    
    <category term="ALGORITHM TRAINING" scheme="https://maskros.top/categories/ALGORITHM-TRAINING/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="dp" scheme="https://maskros.top/tags/dp/"/>
    
    <category term="algorithm" scheme="https://maskros.top/tags/algorithm/"/>
    
    <category term="dfs" scheme="https://maskros.top/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>数位dp</title>
    <link href="https://maskros.top/post/algorithm/learn/%E6%95%B0%E4%BD%8Ddp.html"/>
    <id>https://maskros.top/post/algorithm/learn/%E6%95%B0%E4%BD%8Ddp.html</id>
    <published>2022-03-17T15:00:00.000Z</published>
    <updated>2022-03-24T03:54:04.578Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="数位dp"> 数位dp</span></h1><p>数位dp是在范围内按位递推出最大值的快捷算法，由于是按位dp，所以数的大小对复杂度影响很小</p><p>ref: <a href="https://www.luogu.com.cn/blog/virus2017/shuweidp">blog in luogu</a></p><h2><span id="导"> 导</span></h2><blockquote><p>经典题面： 求出一段区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[l, r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span> 中，满足某一特殊条件的数有多少个，条件一般与数的大小无关而与数字的组成有关</p></blockquote><p>数位dp较普通dp比较冷门，但是不会写就只能暴力骗分 = =</p><p>注：L, R 巨大爆longlong时要用字符串处理</p><p>注：由于搜索的速度很快，所以可以根据题意考虑<strong>枚举每种情况</strong>后分别进行记搜计数，最后再汇总。</p><h2><span id="基本原理"> 基本原理</span></h2><blockquote><p>通过<strong>记忆化搜索</strong>来实现动态规划，相比正面递推在大多数情况下更简洁。</p></blockquote><h3><span id="0x01-记忆化搜索"> 0X01 记忆化搜索</span></h3><p>从起点向下搜索，到最底层得到方案数，一层一层向上返回答案累加，最终从搜索起点得到最终答案。</p><p>对于区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>L</mi><mo separator="true">,</mo><mi>R</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[L,R]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathit">L</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mclose">]</span></span></span></span> , 一般转化成两次数位dp，即找 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator="true">,</mo><mi>R</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[0, R]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mclose">]</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator="true">,</mo><mi>L</mi><mo>−</mo><mn>1</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[0, L-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathit">L</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">]</span></span></span></span> 两段，结果相减即可。</p><h3><span id="0x02-状态设计"> 0x02 状态设计</span></h3><blockquote><p>考虑在哪一层，判断当前的状态</p><p><em>数位dp的状态能记录的最好都记录上</em></p></blockquote><p><code>dfs()</code>函数的一些参量：</p><ul><li><p>数字位数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">pos</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="mord mathit">o</span><span class="mord mathit">s</span></span></span></span>, 记录答案的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">st</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.61508em;"></span><span class="strut bottom" style="height:0.61508em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">t</span></span></span></span>, 最高位限制 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">limit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span></p></li><li><p>判断前导0的标记 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">lead</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">a</span><span class="mord mathit">d</span></span></span></span></p></li><li><p>由于数位dp解决的大多是数字组成问题，所以经常要比较当前位和前一位或前几位的关系，所以一般在 <code>dfs()</code> 中也要记录前一位或前几位数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">pre</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span></span></span></span>​</p></li></ul><p><strong>参量解释</strong>：</p><ol><li><p>前导0标记 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">lead</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">a</span><span class="mord mathit">d</span></span></span></span></p><blockquote><p>有的时候前导0不需要判断，根据题意即可</p></blockquote><p>由于我们要搜的数可能很长，所以我们的直接最高位搜起</p><p>举个例子：假如我们要从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mn>0</mn><mn>0</mn><mn>0</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[0,1000]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mclose">]</span></span></span></span>找任意相邻两数相等的数</p><p>显然<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>1</mn><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mn>2</mn><mn>2</mn><mo separator="true">,</mo><mn>8</mn><mn>8</mn><mn>8</mn></mrow><annotation encoding="application/x-tex">111,222,888</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mord mathrm">2</span><span class="mord mathrm">2</span><span class="mpunct">,</span><span class="mord mathrm">8</span><span class="mord mathrm">8</span><span class="mord mathrm">8</span></span></span></span>等等是符合题意的数</p><p>但是我们发现右端点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>0</mn><mn>0</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span></span></span></span>是四位数</p><p>因此我们搜索的起点是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">0000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span></span></span></span>，而三位数的记录都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mn>1</mn><mn>1</mn><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mn>2</mn><mn>2</mn><mn>2</mn><mo separator="true">,</mo><mn>0</mn><mn>8</mn><mn>8</mn><mn>8</mn></mrow><annotation encoding="application/x-tex">0111,0222,0888</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">0</span><span class="mord mathrm">2</span><span class="mord mathrm">2</span><span class="mord mathrm">2</span><span class="mpunct">,</span><span class="mord mathrm">0</span><span class="mord mathrm">8</span><span class="mord mathrm">8</span><span class="mord mathrm">8</span></span></span></span>等等</p><p>而这种情况下如果我们直接找相邻位相等则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mn>0</mn><mn>0</mn><mn>0</mn></mrow><annotation encoding="application/x-tex">0000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span></span></span></span>符合题意而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mn>1</mn><mn>1</mn><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mn>2</mn><mn>2</mn><mn>2</mn><mo separator="true">,</mo><mn>0</mn><mn>8</mn><mn>8</mn><mn>8</mn></mrow><annotation encoding="application/x-tex">0111,0222,0888</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">0</span><span class="mord mathrm">2</span><span class="mord mathrm">2</span><span class="mord mathrm">2</span><span class="mpunct">,</span><span class="mord mathrm">0</span><span class="mord mathrm">8</span><span class="mord mathrm">8</span><span class="mord mathrm">8</span></span></span></span>都不符合题意了</p><p>所以我们要加一个前导0标记：</p><ul><li>当前位 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">lead</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">a</span><span class="mord mathit">d</span></span></span></span> = 1 且当前位置为0，那么当前位置也是前导0，使 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="3.296ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 1457 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(988,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g></g></g></svg></mjx-container> + 1 继续搜</li><li>当前位 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">lead</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">a</span><span class="mord mathit">d</span></span></span></span> = 1 但当前位不是0，那么本位为当前数字的最高位，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">pos</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">p</span><span class="mord mathit">o</span><span class="mord mathit">s</span></span></span></span> + 1 继续搜</li></ul></li><li><p>最高位标记 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">limit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span></p><p>我们知道在搜索的数位搜索范围可能发生变化；</p><p>举个例子：我们在搜索 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator="true">,</mo><mn>5</mn><mn>5</mn><mn>5</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[0,555]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">5</span><span class="mord mathrm">5</span><span class="mord mathrm">5</span><span class="mclose">]</span></span></span></span> 的数时，显然最高位搜索范围是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">5</span></span></span></span>，而后面的位数的取值范围会根据上一位发生变化：当最高位是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">4</span></span></span></span> 时，第二位取值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator="true">,</mo><mn>9</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[0,9]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">9</span><span class="mclose">]</span></span></span></span>; 当最高位是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">5</span></span></span></span> 时，第二位取值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator="true">,</mo><mn>5</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[0,5]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">5</span><span class="mclose">]</span></span></span></span>（再往上取就超出右端点范围了）</p><p>为了分清这两种情况，我们引入了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">limit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span> 标记：</p><ol><li>当前位 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">limit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span> = 1 而且已经取到了能取到的最高位时，下一位 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">limit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span> = 1；</li><li>当前位 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">limit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span> = 1 但是没有取到能取到的最高位时，下一位 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">limit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span> = 0；</li><li>当前位 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">limit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span> = 0 则下一位也为0。</li></ol><p>我们设这一位的标记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">limit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span>，这一位能取到的最大值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit">s</span></span></span></span>，则下一位的标记就是<code>i == res &amp;&amp; limit</code> ( <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.65952em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span>​ 枚举这一位填的数)</p></li></ol><h3><span id="0x03-dp"> 0x03 dp</span></h3><p>数位dp在<strong>记忆化搜索</strong>的框架下进行，每找到一种情况我们就将这种情况记录下来，等到后面搜到相同情况时直接使用当前记录的值即可。</p><p>dp数组的<strong>下标</strong>：表示一种<strong>状态</strong>。只要当前状态和之前搜过的某个状态<strong>完全一样</strong>，就可以直接返回原来已经记录下的dp值。</p><blockquote><p>重要的例子：</p><p>区间：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mn>2</mn><mn>3</mn><mn>4</mn><mn>5</mn><mn>6</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[0, 123456]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mord mathrm">2</span><span class="mord mathrm">3</span><span class="mord mathrm">4</span><span class="mord mathrm">5</span><span class="mord mathrm">6</span><span class="mclose">]</span></span></span></span></p><p>搜到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>0</mn><mn>0</mn><mn>0</mn><mo>?</mo><mo>?</mo></mrow><annotation encoding="application/x-tex">1000??</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mclose">?</span><span class="mclose">?</span></span></span></span> 时，dfs从下返回上来的数值就是 <strong>当前位是第5位，前一位是0的方案数</strong>，搜完之后记录方案数字。</p><p>当搜到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>0</mn><mn>1</mn><mn>0</mn><mo>?</mo><mo>?</mo></mrow><annotation encoding="application/x-tex">1010??</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mclose">?</span><span class="mclose">?</span></span></span></span> 时，就发现当前状态一样是 <strong>搜到第5位，且前一位是0</strong>，与之前记录情况完全相同，所以就不用向下搜，直接返回上次dp值即可。</p><p>如果搜到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mn>2</mn><mn>3</mn><mn>4</mn><mo>?</mo><mo>?</mo></mrow><annotation encoding="application/x-tex">1234??</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">2</span><span class="mord mathrm">3</span><span class="mord mathrm">4</span><span class="mclose">?</span><span class="mclose">?</span></span></span></span>，<strong>不能直接返回当前位是第5位，前一位是4的dp值</strong>。 因为这个状态的dp值被记录时，当前位也就是第5位的取值是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator="true">,</mo><mn>9</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[0,9]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">9</span><span class="mclose">]</span></span></span></span>，而这次当前位的取值是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator="true">,</mo><mn>5</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[0,5]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathrm">5</span><span class="mclose">]</span></span></span></span>​，方案数一定比之前记录的dp值要小。当前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">limit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span> = 1, 最高位有取值的<strong>限制</strong>。</p></blockquote><p><strong>结论</strong>： 当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">limit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">t</span></span></span></span> = 1时，不能记录和取用dp值，同理 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">lead</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">e</span><span class="mord mathit">a</span><span class="mord mathit">d</span></span></span></span> = 1 时也不行。</p><h2><span id="板子"> 板子</span></h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ll dfs(int pos, int pre, int st, ……, int lead, int limit) //记搜{    if (pos &gt; len) return st; //剪枝    if ((dp[pos][pre][st]……[……] != -1 &amp;&amp; (!limit) &amp;&amp; (!lead))) return dp[pos][pre][st]……[……]; //记录当前值    ll ret = 0; //暂时记录当前方案数    int res = limit ? a[len - pos + 1] : 9; //res当前位能取到的最大值    for (int i = 0; i &lt;= res; i++)    {        //有前导0并且当前位也是前导0        if ((!i) &amp;&amp; lead) ret += dfs(pos + 1, 0, ……, 1, i == res &amp;&amp; limit);        //有前导0但当前位不是前导0，当前位就是最高位        else if (i &amp;&amp; lead) ret += dfs(pos + 1, i, ……, 0, i == res &amp;&amp; limit);        else if (根据题意而定的判断) ret += dfs(……, ……, 0, i == res &amp;&amp; limit);    }    if (!limit &amp;&amp; !lead) dp[pos][pre][st]……[……] = ret; //当前状态方案数记录    return ret;}ll part(ll x)//把数按位拆分{    len = 0;    while (x) a[++len] = x % 10, x /= 10;    memset(dp, -1, sizeof dp); //初始化-1（因为有可能某些情况下的方案数是0）    return dfs(1, 0, ……, ……, 1, 1); //进入记搜}int main(){cin &gt;&gt; l &gt;&gt; r;    cout &lt;&lt; part(r) - part(max(0ll, l - 1)) &lt;&lt; '\n';    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="题单"> 题单</span></h2><p><a href="http://maskros.top/post/algorithm%2Fexercise%2F%E6%95%B0%E4%BD%8Ddp_problem">solution</a></p><ul><li><p>0x00 Digit <a href="https://www.luogu.com.cn/blog/virus2017/shuweidp">link</a></p></li><li><p>0x01 HDU2089 不要62 <a href="https://ac.nowcoder.com/acm/problem/50520">link</a></p></li><li><p>0x02 数位小孩 <a href="https://ac.nowcoder.com/acm/contest/23480/D">link</a></p></li><li><p>0x03 AT4540 Digit Sum <a href="https://www.luogu.com.cn/problem/AT4540">link</a></p></li><li><p>0x04 SAC#1 - 萌数 <a href="https://www.luogu.com.cn/problem/P3413">link</a></p></li><li><p>0x05 [ZJOI2010]数字计数 <a href="https://ac.nowcoder.com/acm/problem/20491">link</a></p></li><li><p>0x06 [AHOI2009] 同类分布 <a href="https://ac.nowcoder.com/acm/problem/19888">link</a></p></li><li><p>0x07 P4317 花神的数论题 <a href="https://www.luogu.com.cn/problem/P4317">link</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h1&gt;&lt;span id=&quot;数位dp&quot;&gt; 数位d</summary>
      
    
    
    
    <category term="ALGORITHMS" scheme="https://maskros.top/categories/ALGORITHMS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="dp" scheme="https://maskros.top/tags/dp/"/>
    
    <category term="note" scheme="https://maskros.top/tags/note/"/>
    
    <category term="algorithm" scheme="https://maskros.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>2022牛客寒假算法基础集训营5</title>
    <link href="https://maskros.top/post/nowcoder/2022winter/round5.html"/>
    <id>https://maskros.top/post/nowcoder/2022winter/round5.html</id>
    <published>2022-03-16T15:30:50.000Z</published>
    <updated>2022-03-24T06:42:24.884Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="2022牛客寒假算法基础集训营5"> 2022牛客寒假算法基础集训营5</span></h1><blockquote><p>补一下打的最烂的一场</p></blockquote><h2><span id="a-疫苗小孩-二分"> A 疫苗小孩 (二分)</span></h2><blockquote><p>题意：</p><p>给定长为 n 的01串，0表示可以打疫苗，最多可以打三针，每两针相差k天时可以贡献w，每多相差x天或者少相差x天，贡献都会减少为 w-q*x，问最大贡献是多少</p><p>思路：</p><p>可以发现1针和0针的贡献都为0，所以直接考虑2针及以上的情况<br>枚举第二针所在的位置pos，二分找到离 pos+k 和 pos-k 最近的两个点计算最大贡献即可</p><p>使用 <code>lower_bound</code> 函数， 复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nlog_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span></p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define int llint a[maxn];void solve() {int n; cin &gt;&gt; n;int cnt = 0;rep(i, 1, n + 1) {char t; cin &gt;&gt; t;if(t == '0') a[++cnt] = i;} int k, w, q; cin &gt;&gt; k &gt;&gt; w &gt;&gt; q;int ans = 0;rep(i, 2, cnt + 1) {// first &gt;=int pos1 = lower_bound(a + 1, a + cnt + 1, a[i] - k) - a;int pos2 = lower_bound(a + 1, a + cnt + 1, a[i] + k) - a;int mn1 = min(abs(a[i] - k - a[pos1]), abs(a[i] - k - a[max(1ll, pos1 - 1)]));int mn2 = min(abs(a[i] + k - a[pos2]), abs(a[i] + k - a[max(1ll, pos2 - 1)]));int tmp1 = max(0ll, w - q * mn1), tmp2 = max(0ll, w - q * mn2);if(i == cnt) tmp2 = 0;ans = max(ans, tmp1 + tmp2);}cout &lt;&lt; ans;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="c-战旗小孩-二进制枚举"> *C 战旗小孩 (二进制枚举)</span></h2><blockquote><p>题意：</p><p>n, k, s 表示游戏局数，可以获得额外机会的次数和起始分数，随后一行 n 个数 pi 为每一局结束后的一个特定分数，如果该局结束后分数大于等于该特定分数，就高兴一次，pi 顺序不能改变。接下来 n 行为每局结束后分数的变化delta和如果是用额外机会分数的变化delta。可以变换 n 局游戏的顺序，问最多能高兴几次。 0= &lt; k &lt; n &lt;= 20</p><p>思路：</p><p>由于 n 很小，采用二进制枚举，1的个数为使用额外机会的次数，处理一下每局可能获得的最大值，每次选择最大值计算即可。</p><p><code>__builtin_popcount(n)</code> 表示 n 内二进制位为1的个数</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n, k, s;int p[maxn], v[maxn], w[maxn];int h[maxn];int cal(int x) {rep(i, 0, n) {if((x &gt;&gt; i) &amp; 1) h[i + 1] = w[i + 1];else h[i + 1] = v[i + 1];}sort(h + 1, h + n + 1, greater&lt;int&gt;() );int tmp = s;int ret = 0;rep(i, 1, n + 1) {tmp += h[i];if(tmp &gt;= p[i]) ret++;}return ret;}void solve() {cin &gt;&gt; n &gt;&gt; k &gt;&gt; s;int ans = 0;rep(i, 1, n + 1) cin &gt;&gt; p[i];rep(i, 1, n + 1) {int a, b, c, d; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;v[i] = max(a, b);w[i] = max({v[i], c, d});}int mx = 1 &lt;&lt; n;rep(i, 0, mx) {if (__builtin_popcount(i) == k) ans = max(ans, cal(i));}cout &lt;&lt; ans;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="d-数位小孩-数位dp"> D 数位小孩 (数位dp)</span></h2><blockquote><p>题意：</p><p>给定区间，统计区间中有多少个数同时满足：每相邻两个数位和为素数，其中至少一个数位为1，且没有前导0</p><p>思路：</p><p>套数位dp板子即可</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a[20], len;ll l, r;bool prime[25];ll dp[20][20];ll dfs(int pos, int pre, bool one, int lead, int limit) //记搜{    if (pos &gt; len) if (one) return 1; else return 0; //剪枝    if ((dp[pos][pre] != -1 &amp;&amp; (!limit) &amp;&amp; (!lead) &amp;&amp; one)) return dp[pos][pre]; //记录当前值    ll ret = 0; //暂时记录当前方案数    int res = limit ? a[len - pos + 1] : 9; //res当前位能取到的最大值    for (int i = 0; i &lt;= res; i++) {        bool nextone = one;        if (i == 1 || pre == 1) nextone = 1;        //有前导0并且当前位也是前导0        if ((!i) &amp;&amp; lead) ret += dfs(pos + 1, 0, 0, 1, i == res &amp;&amp; limit);        //有前导0但当前位不是前导0，当前位就是最高位        if (i &amp;&amp; lead) ret += dfs(pos + 1, i, nextone, 0, i == res &amp;&amp; limit);        // else        else {            if (!prime[i + pre]) continue;            ret += dfs(pos + 1, i, nextone, 0, i == res &amp;&amp; limit);        }    }    if (!limit &amp;&amp; !lead &amp;&amp; one) dp[pos][pre] = ret; //当前状态方案数记录    return ret;}//把数按位拆分ll part(ll x) {    len = 0;    while (x) a[++len] = x % 10, x /= 10;    memset(dp, -1, sizeof dp); //初始化-1（因为有可能某些情况下的方案数是0）    return dfs(1, 0, 0, 1, 1); //进入记搜}void pr(int x) { prime[x] = 1; }void init() {    pr(2), pr(3), pr(5), pr(7), pr(11), pr(13), pr(17), pr(19);}int main() {    init();    cin &gt;&gt; l &gt;&gt; r;    cout &lt;&lt; part(r) - part(max(0ll, l - 1)) &lt;&lt; '\n';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="g-163小孩"> G 163小孩</span></h2><blockquote><p>排列组合</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int ans = C(13, 2) * 2 + C(13, 3) * 3 + C(13, 2) + C(13, 3) * 6 + C(13, 4) * 4 + C(13, 3) + C(13, 4) * C(4, 2) +  C(13, 5) * 5 + C(13, 6);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="i-兔崽小孩-前缀和二分"> I 兔崽小孩 (前缀和/二分)</span></h2><blockquote><p>题意：</p><p>n条说说，q次询问，每条说说有固定的发送时间t，每次询问k, p;  k表示入睡时间，p表示要求的总睡眠时间，如果最后总睡眠时间小于p则输出NO， 否则YES</p><p>思路：</p><p>对时间差值排序，维护前缀和，对每次询问二分查找到大于k的下标，利用前缀和数组区间求和进行计算即可。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int t[maxn];int a[maxn], pre[maxn];void solve() {    int n, q;    cin &gt;&gt; n &gt;&gt; q;    int len = 0;    rep(i, 0, n) {        cin &gt;&gt; t[i];        if (i)            a[++len] = t[i] - t[i - 1];    }    sort(a + 1, a + len + 1, greater&lt;int&gt;());    pre[1] = a[1];    rep(i, 2, len + 1) {        pre[i] = pre[i - 1] + a[i];    }    rep(i, 0, q) {        int k, p;        cin &gt;&gt; k &gt;&gt; p;        int idx = lower_bound(a + 1, a + 1 + len, k, greater&lt;int&gt;()) - a;        int tmp = pre[idx - 1] - (idx - 1) * k;        tmp &gt;= p ? puts("Yes") : puts("No");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="j-三国小孩"> J 三国小孩</span></h2><p>沙比题，略了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h1&gt;&lt;span id=&quot;2022牛客寒假算法</summary>
      
    
    
    
    <category term="SOLUTIONS" scheme="https://maskros.top/categories/SOLUTIONS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="solutions" scheme="https://maskros.top/tags/solutions/"/>
    
    <category term="二分" scheme="https://maskros.top/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="dp" scheme="https://maskros.top/tags/dp/"/>
    
    <category term="前缀和" scheme="https://maskros.top/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
    <category term="nowcoder" scheme="https://maskros.top/tags/nowcoder/"/>
    
    <category term="二进制枚举" scheme="https://maskros.top/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>Codeforce Edu 124 &amp; Round 777 Problem D</title>
    <link href="https://maskros.top/post/codeforces/cf%20Edu%20124%20&amp;%20777%20D.html"/>
    <id>https://maskros.top/post/codeforces/cf%20Edu%20124%20&amp;%20777%20D.html</id>
    <published>2022-03-13T13:20:00.000Z</published>
    <updated>2022-03-14T15:04:58.363Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="codeforce-edu-124-amp-round-777-problem-d"> Codeforce Edu 124 &amp; Round 777 Problem D</span></h1><h2><span id="edu-124-d-nearest_excluded_points-bfs"> Edu 124 D Nearest_Excluded_Points (BFS)</span></h2><blockquote><p>题意：</p><p>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 个点的坐标，对于每个点，打印哈密顿距离最近且不包含在该 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 个点中的点的坐标。</p><p>思路：</p><p>从外往里bfs。如果一个点没被围死，那么总有一个相邻的点为答案，被围死了则外围的点也有答案。</p><p>首先，我们可以为所有与至少一个不属于这个集合的点相邻的点找到答案。这些点的距离显然是1（这是我们能得到的最小的答案）。在下一次迭代中，我们可以为所有与找到答案的点相邻的点设定答案（因为它们没有不属于集合的邻居，所以它们的距离至少是2）。哪一个点并不重要，所以如果点i与答案为1的点j相邻，我们可以将点i的答案设置为点j的答案。就代码而言，这可以通过广度优先搜索（BFS）来完成。换句话说，我们为距离为1的点设置答案，然后将这些答案按距离增加的顺序推给所有相邻的点，直到我们找到所有答案。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n;int dx[] = {0, 0, -1, 1};int dy[] = {-1, 1, 0, 0};void solve() {    cin &gt;&gt; n;      vector&lt;pii&gt; v;    rep(i, 0, n) {        int x, y; cin &gt;&gt; x &gt;&gt; y;        v.pb({x, y});    }    set&lt;pii&gt; st(v.begin(), v.end());    map&lt;pii, pii&gt; ans;    queue&lt;pii&gt; q;    for(auto [x, y] : v) {        rep(i, 0, 4) {            int nx = x + dx[i], ny = y + dy[i];            if(st.count({nx, ny})) continue;            ans[{x, y}] = {nx, ny};            q.push({x, y});            break;        }    }    while(!q.empty()) {        auto it = q.front();        int x = it.fst, y = it.sec;        q.pop();        rep(i, 0, 4) {            int nx = x + dx[i], ny = y + dy[i];            if(!st.count({nx, ny}) || ans.count({nx, ny})) continue;            ans[{nx, ny}] = ans[{x, y}];            q.push({nx, ny});         }    }    for(auto [x, y] : v) {        auto it = ans[{x, y}];        cout &lt;&lt; it.fst &lt;&lt; " " &lt;&lt; it.sec &lt;&lt; '\n';    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="cf-777-d-madoka_and_the_best_school_in_russia"> cf 777 D Madoka_and_the_Best_School_in_Russia</span></h2><blockquote><p>题意：</p><p>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span> , <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span></span></span></span> , 判断是否至少有两种方法可以把 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span> 任意拆成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> (1 ~ n)个数，使得拆出来的每个数都可以整除 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span></span></span></span> ，但不能整除 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>d</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">d^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> (n &gt;= 2) ，能则输出YES，否则输出NO</p><p>思路：</p><p>分类讨论：</p><p>① 如果 x 不能整除 d*d ，则铁定为NO</p><p>对 x 不断除 d，共分解成 <code>div</code> 个 d (div &gt;= 2)  和剩余的因子 <code>x</code></p><p>② 如果 x 不为质数，则至少有两种分解方式，一定能凑出两种情况，为YES</p><p>③ 如果 x 为质数，且 d 被唯一分解为 x * x，当且仅当 div = 3 时，为NO</p><p>④ 如果 x 为质数，d 不为质数且 div &gt; 2，为YES</p><p>⑤ 其余情况为NO</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> d<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> d<span class="token punctuation">;</span>    <span class="token keyword">int</span> dd <span class="token operator">=</span> d <span class="token operator">*</span> d<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> dd <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">int</span> div <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">%</span> d <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">/=</span> d<span class="token punctuation">,</span> div<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">prime</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">prime</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> d <span class="token operator">==</span> <span class="token function">prime</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">prime</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token function">prime</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> div <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>div <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">prime</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h1&gt;&lt;span id=&quot;codeforce-</summary>
      
    
    
    
    <category term="SOLUTIONS" scheme="https://maskros.top/categories/SOLUTIONS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="solutions" scheme="https://maskros.top/tags/solutions/"/>
    
    <category term="codeforces" scheme="https://maskros.top/tags/codeforces/"/>
    
    <category term="思维" scheme="https://maskros.top/tags/%E6%80%9D%E7%BB%B4/"/>
    
    <category term="bfs" scheme="https://maskros.top/tags/bfs/"/>
    
    <category term="讨论" scheme="https://maskros.top/tags/%E8%AE%A8%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>CSP202109-2 非零段划分</title>
    <link href="https://maskros.top/post/probs/CSP%E9%9D%9E%E9%9B%B6%E6%AE%B5%E5%88%92%E5%88%86.html"/>
    <id>https://maskros.top/post/probs/CSP%E9%9D%9E%E9%9B%B6%E6%AE%B5%E5%88%92%E5%88%86.html</id>
    <published>2022-03-01T14:30:50.000Z</published>
    <updated>2022-03-01T15:41:17.264Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="csp-202109-2-非零段划分-差分"> CSP 202109-2 非零段划分 (差分)</span></h1><blockquote><p><a href="http://118.190.20.162/view.page?gpid=T130">link</a></p><p>赛时没想明白，写了个暴力70分，一直惦记着这个题，故在此重做</p></blockquote><h2><span id="题面"> 题面</span></h2><p>A1,A2,⋯,An 是一个由 n 个自然数（非负整数）组成的数组。我们称其中 Ai,⋯,Aj 是一个非零段，当且仅当以下条件同时满足：</p><ul><li>1≤i≤j≤n；</li><li>对于任意的整数 k，若 i≤k≤j，则 Ak&gt;0；</li><li>i=1 或 Ai−1=0；</li><li>j=n 或 Aj+1=0。</li></ul><p>下面展示了几个简单的例子：</p><ul><li>A=[3,1,2,0,0,2,0,4,5,0,2] 中的 4 个非零段依次为 [3,1,2]、[2]、[4,5] 和 [2]；</li><li>A=[2,3,1,4,5] 仅有 1 个非零段；</li><li>A=[0,0,0] 则不含非零段（即非零段个数为 0）。</li></ul><p>现在我们可以对数组 A 进行如下操作：任选一个正整数 p，然后将 A 中所有小于 p 的数都变为 0。试选取一个合适的 p，使得数组 A 中的非零段个数达到最大。若输入的 A 所含非零段数已达最大值，可取 p=1，即不对 A 做任何修改。</p><p>规定： 全部的测试数据满足 n≤5e5，且数组 A 中的每一个数均不超过 1e4</p><h2><span id="题解"> 题解</span></h2><p>非零段可以理解为孤立的岛屿，不同的岛屿之间用 0 分隔开。<br>选择一个正整数 p ，将所有小于 p 的数都变为 0 ，可以理解为海平面上涨到 p 的位置，p  以下的部分都被淹没，求孤立岛屿数最大是多少。<br>可以先考虑 p = 10001 的情况：所有数字都被海水淹没了，显然只有 0 00 个岛屿。然后海平面逐渐下降，观察岛屿数量的变化。可以看出：每当一个凸峰出现，岛屿数就多了一个；而每当一个凹谷出现，原本相邻的两个岛屿就被这个凹谷连接在了一起，岛屿数减少一个。<br>凸峰点和凹谷点的判断需要注意平面（如 1 2 2 1 ）的存在：若连续一段数字相同，可以把他们合并成一个点（1 2 1），这样对答案不会产生影响，可以使用 std::unique() 函数来去掉相邻重复元素。</p><h2><span id> 🐴</span></h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; v;int high[100005], low[100005], cnt[100005];void solve(){    int n; cin &gt;&gt; n;    v.pb(0);    rep(i, 0, n) {        int t; cin &gt;&gt; t;        if(i &amp;&amp; t != v[v.size() - 1] || i == 0) v.pb(t);     }    v.pb(0);    rep(i, 1, v.size() - 1) {        if(v[i] &gt; v[i - 1] &amp;&amp; v[i] &gt; v[i + 1]) high[v[i]]++;        if(v[i] &lt; v[i - 1] &amp;&amp; v[i] &lt; v[i + 1]) low[v[i]]++;    }    cnt[100001] = 0;    int ans = 0;    red(i, 100001, 0) {        cnt[i] = cnt[i + 1] + high[i] - low[i];        ans = max(ans, cnt[i]);    }    cout &lt;&lt; ans &lt;&lt; '\n';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h1&gt;&lt;span id=&quot;csp-202109</summary>
      
    
    
    
    <category term="SOLUTIONS" scheme="https://maskros.top/categories/SOLUTIONS/"/>
    
    
    <category term="思维" scheme="https://maskros.top/tags/%E6%80%9D%E7%BB%B4/"/>
    
    <category term="差分" scheme="https://maskros.top/tags/%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 773 (Div.2)</title>
    <link href="https://maskros.top/post/codeforces/cf%20773.html"/>
    <id>https://maskros.top/post/codeforces/cf%20773.html</id>
    <published>2022-02-23T14:30:00.000Z</published>
    <updated>2022-02-23T14:45:35.740Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="codeforces-round-773-div2"> Codeforces Round #773 (Div.2)</span></h1><blockquote><p>rk 293 AB各自白给了一发，但是上大分，嘻嘻</p></blockquote><h2><span id="a_hard_way"> A_Hard_Way</span></h2><blockquote><p>水题，一开始没读懂题直接猜答案猜错了WA1，急了大火</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> y3<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> x1 <span class="token operator">&gt;&gt;</span> y1 <span class="token operator">&gt;&gt;</span> x2 <span class="token operator">&gt;&gt;</span> y2 <span class="token operator">&gt;&gt;</span> x3 <span class="token operator">&gt;&gt;</span> y3<span class="token punctuation">;</span>    <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">==</span> y2<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>y3 <span class="token operator">&lt;</span> y2<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">abs</span><span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">eif</span><span class="token punctuation">(</span>y2 <span class="token operator">==</span> y3<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>y1 <span class="token operator">&lt;</span> y3<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">abs</span><span class="token punctuation">(</span>x3 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">eif</span><span class="token punctuation">(</span>y1 <span class="token operator">==</span> y3<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span>y2 <span class="token operator">&lt;</span> y3<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">abs</span><span class="token punctuation">(</span>x3 <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.9f\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="b_power_walking"> B_Power_Walking</span></h2><blockquote><p>水题，忘记 <code>map.clear()</code>了，白wa1发，纯丢人</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> mp<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mx <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mx<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>    en<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="c_great_sequence"> C_Great_Sequence</span></h2><blockquote><p>题意：</p><p>给定长为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 的数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span>，给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span>，你可以向数组中添加一些数，使得数组中的数两两一组，并且满足 a_i × x = a_j，询问至少添加多少个数。</p><p>思路：</p><p>暴力贪心即可，满足的直接扬了，用 <code>multiset</code> 维护一下，😃</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">multiset<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    multiset<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ll tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="d_repetitions_decoding-构造"> D_Repetitions_Decoding (构造)</span></h2><blockquote><p>题意：</p><p>给定一个数组，你可以对它进行操作：在某一位置连续插入两个相同数字。最终使得该数组按顺序变成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> 对重复序列 (∀k ≥ 1)​ 。(tandem repeats: <strong>串联重复序列</strong>，如：1 2 3 1 2 3 | 4 7 5 4 7 5 | 6 6 )</p><p>最终指定格式分别打印：操作数、操作内容、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>、最终序列的组成结构。如果不能构造输出 -1.</p><p>思路：</p><p>由于题干说只要构造成功就可以，不追求最小操作数，所以我们直接贪心即可。</p><p>首先由于每次操作插入的都是两个相同数字，故如果原序列中某个数只有奇数个，是不能构成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>​ 对重复序列的，特判一下；</p><p>构造时使用 <code>vector</code> 维护，双指针 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.65952em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span></span></span></span> 扫描序列。从头开始，在序列中找到下一个与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 一样的数的位置，标记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>b</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">rbg</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">b</span><span class="mord mathit" style="margin-right:0.03588em;">g</span></span></span></span> (right_begin)，随后同时向右扫描，如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">a_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> ，则跳过，如果不等，则在下标为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span></span></span></span> 的位置插入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 。当左侧序列指针 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.65952em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span> 扫描到右侧序列起点处 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>b</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">rbg</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">b</span><span class="mord mathit" style="margin-right:0.03588em;">g</span></span></span></span> 时 ，则构成了一对重复序列，记录一下答案后，使 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.65952em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span> = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span></span></span></span> 继续向后扫描即可。</p><p>写的时候由于对下标的混淆结果卡了一会，最后过的时候居然div2全场只过了200人，开心嗨了 😃</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> op<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> ans<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> mp<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator pos<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    en<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token function">de</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> en<span class="token punctuation">;</span> en<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> op<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>        v<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>it <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>sec <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> bg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rbg<span class="token punctuation">,</span> r<span class="token punctuation">;</span>        <span class="token keyword">bool</span> is <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>is<span class="token punctuation">)</span> <span class="token punctuation">{</span>                pos <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bg <span class="token operator">=</span> i<span class="token punctuation">;</span>                rbg <span class="token operator">=</span> pos <span class="token operator">-</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                r <span class="token operator">=</span> rbg<span class="token punctuation">;</span>                is <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> rbg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    i <span class="token operator">=</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                    ans<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>r <span class="token operator">-</span> bg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    is <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">&gt;=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    v<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    v<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    op<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span><span class="token function">mpr</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    op<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span><span class="token function">mpr</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> op<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> op<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span>fst <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span>sec <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> en<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> ans<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span> en<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>这场因为div1, div2同时进行分了波流，偷了个上分机会，变色！</p></blockquote>]]></content>
    
    
    <summary type="html">Codeforces Round 773 (Div.2)</summary>
    
    
    
    <category term="SOLUTIONS" scheme="https://maskros.top/categories/SOLUTIONS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="solutions" scheme="https://maskros.top/tags/solutions/"/>
    
    <category term="codeforces" scheme="https://maskros.top/tags/codeforces/"/>
    
    <category term="构造" scheme="https://maskros.top/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>LCA板子</title>
    <link href="https://maskros.top/post/algorithm/learn/LCA.html"/>
    <id>https://maskros.top/post/algorithm/learn/LCA.html</id>
    <published>2022-02-08T16:00:00.000Z</published>
    <updated>2022-02-10T13:51:45.351Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="lca"> LCA</span></h1><p>Lowest Common Ancestor 最近公共祖先</p><h2><span id="定义"> 定义</span></h2><p>一般指图论中有向无环图DAG或<strong>树</strong>中的<strong>最近公共祖先</strong>，两个节点的LCA在两点间的路径上</p><h2><span id="四种求解板子"> 四种求解板子</span></h2><blockquote><p>在线算法：问一次回答一次</p><p>离线算法：问完了一次性回答</p></blockquote><h3><span id="0x01-树剖-在线"> 0x01 树剖 在线</span></h3><blockquote><p>树链剖分求解LCA的过程就是轻重链的跳转，跟树剖求任意两点间的距离一样的操作，只不过不用线段树去维护dis了</p></blockquote><pre class="line-numbers language-none"><code class="language-none">#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N = 1e6 + 10;int head[N], to[N &lt;&lt; 1], nex[N &lt;&lt; 1], cnt = 1;int sz[N], dep[N], fa[N], son[N], top[N];int n, m;inline int read() {    int f = 1, x = 0;    char c = getchar();    while(c &gt; '9' || c &lt; '0') {        if(c == '-')    f = -1;        c = getchar();    }    while(c &gt;= '0' &amp;&amp; c &lt;= '9') {        x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c ^ 48);        c = getchar();    }    return f * x;}void add(int x, int y) {    to[cnt] = y;    nex[cnt] = head[x];    head[x] = cnt++;}void dfs1(int rt, int f) {    dep[rt] = dep[f] + 1;    sz[rt] = 1, fa[rt] = f;    for(int i = head[rt]; i; i = nex[i]) {        if(to[i] == f)  continue;        dfs1(to[i], rt);        if(!son[rt] || sz[to[i]] &gt; sz[son[rt]])            son[rt] = to[i];        sz[rt] += sz[to[i]];    }}void dfs2(int rt, int t) {    top[rt] = t;    if(!son[rt])    return ;    dfs2(son[rt], t);    for(int i = head[rt]; i; i = nex[i]) {        if(to[i] == fa[rt] || to[i] == son[rt]) continue;        dfs2(to[i], to[i]);    }}int solve(int x, int y) {    while(top[x] != top[y]) {        if(dep[top[x]] &lt; dep[top[y]]) swap(x, y);        x = fa[top[x]];    }    return dep[x] &lt; dep[y] ? x : y;}int main() {    n = read(), m = read();    int rt = read();    int x, y;    for(int i = 1; i &lt; n; i++) {        x = read(), y = read();        add(x, y);        add(y, x);    }    dfs1(rt, 0);    dfs2(rt, rt);    for(int i = 1; i &lt;= m; i++) {        x = read(), y = read();        printf("%d\n", solve(x, y));    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="0x02-tarjan-离线"> 0x02 Tarjan 离线</span></h3><blockquote><p>后序DFS+并查集</p><p>本质就是利用了dfs的节点顺序，当我们正在递归两个节点的最近公共祖先时，显然这两个点是属于其子树的节点，那么当我们第一次遍历完两个需要求解的两个点时，其最近的尚未被完全遍历完子节点的节点就是他们两个的最近公共祖先</p></blockquote><pre class="line-numbers language-none"><code class="language-none">#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int N = 5e5 + 10;int head[N], to[N &lt;&lt; 1], nex[N &lt;&lt; 1], cnt = 1;int visit[N], fa[N], n, m;int qhead[N], qto[N &lt;&lt; 1], qnex[N &lt;&lt; 1], qcnt = 1, qid[N &lt;&lt; 1], ans[N];inline int read() {    int f = 1, x = 0;    char c = getchar();    while(c &gt; '9' || c &lt; '0') {        if(c == '-')    f = -1;        c = getchar();    }    while(c &gt;= '0' &amp;&amp; c &lt;= '9') {        x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c ^ 48);        c = getchar();    }    return f * x;}void add_edge(int x, int y) {    to[cnt] = y;    nex[cnt] = head[x];    head[x] = cnt++;}void add_query(int x, int y, int w) {    qto[qcnt] = y;    qnex[qcnt] = qhead[x];    qid[qcnt] = w;    qhead[x] = qcnt++;}int find(int rt) {    return rt == fa[rt] ? rt : fa[rt] = find(fa[rt]);}void tarjan(int rt, int f) {    for(int i = head[rt]; i; i = nex[i]) {        if(to[i] == f)  continue;        tarjan(to[i], rt);        fa[to[i]] = rt;    }    visit[rt] = 1;    for(int i = qhead[rt]; i; i = qnex[i]) {        if(!visit[qto[i]])  continue;        ans[qid[i]] = find(qto[i]);    }}int main() {    // freopen("in.txt", "r", stdin);    n = read(), m = read();    int rt = read();    for(int i = 1; i &lt; n; i++) {        int x = read(), y = read();        add_edge(x, y);        add_edge(y, x);    }    for(int i = 1; i &lt;= n; i++) fa[i] = i;    for(int i = 1; i &lt;= m; i++) {        int x = read(), y = read();        add_query(x, y, i);        add_query(y, x, i);    }    tarjan(rt, 0);    for(int i = 1; i &lt;= m; i++)        printf("%d\n", ans[i]);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="0x03-st表rmq-在线"> 0x03 ST表+RMQ 在线</span></h3><blockquote><p>先序DFS+ST</p><p>RMQ(Range Mini/Maximum Query) 区间最值查询</p><p>利用dfs的遍历，在遍历两个点的时候，一定会在中间返回到其最近公共祖先，这个时候的公共祖先也就是这两个点的遍历中的最小值</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read() {    ll f = 1, x = 0;    char c = getchar();    while(c &gt; '9' || c &lt; '0') {        if(c == '-')    f = -1;        c = getchar();    }    while(c &gt;= '0' &amp;&amp; c &lt;= '9') {        x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c ^ 48);        c = getchar();    }    return f * x;}const int N = 5e5 + 10;int head[N], to[N &lt;&lt; 1], nex[N &lt;&lt; 1], cnt = 1;int id[N], tot, last;int st[N &lt;&lt; 2][30];void add(int x, int y) {    to[cnt] = y;    nex[cnt] = head[x];    head[x] = cnt++;}void dfs(int rt, int fa) {    id[rt] = last = ++tot;    st[tot][0] = rt;    for(int i = head[rt]; i; i = nex[i]) {        if(to[i] == fa) continue;        dfs(to[i], rt);        st[++tot][0] = rt;    }}int MIN(int a, int b) {    return id[a] &lt; id[b] ? a : b;}int main() {    // freopen("in.txt", "r", stdin);    int n = read(), m = read(), rt = read();    for(int i = 1; i &lt; n; i++) {        int x = read(), y = read();        add(x, y);        add(y, x);    }    dfs(rt, 0);    int k = log(last) / log(2);    for(int j = 1; j &lt;= k; j++)        for(int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= last; i++)            st[i][j] = MIN(st[i][j - 1], st[i + (1 &lt;&lt; (j - 1))][j - 1]);    for(int i = 1; i &lt;= m; i++) {        int x = read(), y = read();        x = id[x], y = id[y];        if(x &gt; y)   swap(x, y);        int k = log(y - x + 1) / log(2);        printf("%d\n", MIN(st[x][k], st[y - (1 &lt;&lt; k) + 1][k]));    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="0x04-倍增"> 0x04 倍增</span></h3><blockquote><p>类似于快速幂，通过二进制数的组合来达到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">log2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathrm">2</span></span></span></span> 级别的优化，但是需要注意其中进制的枚举大小顺序</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read() {    ll f = 1, x = 0;    char c = getchar();    while(c &gt; '9' || c &lt; '0') {        if(c == '-')    f = -1;        c = getchar();    }    while(c &gt;= '0' &amp;&amp; c &lt;= '9') {        x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c ^ 48);        c = getchar();    }    return f * x;}const int N = 5e5 + 10;int head[N], to[N &lt;&lt; 1], nex[N &lt;&lt; 1], cnt = 1;int fa[N][21], dep[N], n, m;void add(int x, int y) {    to[cnt] = y;    nex[cnt] = head[x];    head[x] = cnt++;}void dfs(int rt, int f) {    dep[rt] = dep[f] + 1;    fa[rt][0] = f;    for(int i = 1; 1 &lt;&lt; i &lt;= dep[rt]; i++)//进制由小到大递推        fa[rt][i] = fa[fa[rt][i - 1]][i - 1];    for(int i = head[rt]; i; i = nex[i]) {        if(to[i] == f)  continue;        dfs(to[i], rt);    }}int LCA(int x, int y) {    if(dep[x] &lt; dep[y]) swap(x, y);    for(int i = 20; i &gt;= 0; i--)//进制由大到小开始组合，        if(dep[fa[x][i]] &gt;= dep[y])            x = fa[x][i];    if(x == y)  return x;//注意特判    for(int i = 20; i &gt;= 0; i--)//进制从小到大开始组合，        if(fa[x][i] != fa[y][i])            x = fa[x][i], y = fa[y][i];    return fa[x][0];//这一步尤其考虑，为什么x, y不知LCA,而其父节点就一定是LCA，}int main() {    // freopen("in.txt", "r", stdin);    int n = read(), m = read(), rt = read();    for(int i = 1; i &lt; n; i++) {        int x = read(), y = read();        add(x, y);        add(y, x);    }    dfs(rt, 0);    for(int i = 1; i &lt;= m; i++) {        int x = read(), y = read();        printf("%d\n", LCA(x, y));    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">Lowest Common Ancestor</summary>
    
    
    
    <category term="ALGORITHMS" scheme="https://maskros.top/categories/ALGORITHMS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="note" scheme="https://maskros.top/tags/note/"/>
    
    <category term="algorithm" scheme="https://maskros.top/tags/algorithm/"/>
    
    <category term="LCA" scheme="https://maskros.top/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>2022牛客寒假算法基础集训营4</title>
    <link href="https://maskros.top/post/nowcoder/2022winter/round4.html"/>
    <id>https://maskros.top/post/nowcoder/2022winter/round4.html</id>
    <published>2022-02-08T13:30:50.000Z</published>
    <updated>2022-03-02T13:46:31.541Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="2022牛客寒假算法基础集训营4"> 2022牛客寒假算法基础集训营4</span></h1><blockquote><p>AC  11 / 12</p></blockquote><h2><span id="a-r-二分前缀和"> A R (二分/前缀和)</span></h2><blockquote><p>题意：</p><p>给定长为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 的字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span></span></span></span>, 给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>, 求字符串中含 ‘R’ 个数大于等于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> 且不含字符 ‘P’ 的子串个数</p><p>思路：</p><p>前缀和储存 R 和 P 的个数，枚举左端点，二分查找符合条件的最近右端点长度和最远右端点，作差即为贡献值。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n, k; char s[maxn];int R[maxn], P[maxn];bool checkR(int l, int r) {    int cnt_R = R[r] - R[l - 1];     if(cnt_R &gt;= k) return 1;    else return 0;}bool checkP(int l, int r) {     int cnt_P = P[r] - P[l - 1];    if(cnt_P == 0) return 1;    else return 0;}void solve() {    cin &gt;&gt; n &gt;&gt; k;    R[0] = 0, P[0] = 0;    rep(i, 1, n + 1) {        cin &gt;&gt; s[i];        R[i] = R[i - 1], P[i] = P[i - 1];        if(s[i] == 'R') R[i]++;        eif(s[i] == 'P') P[i]++;    }    ll ans = 0;    rep(i, 1, n + 1) {        int l = i, r = n;        int rmx = 0, lmn = 0;        while(l &lt;= r) {            int mid = (l + r) / 2;            if(checkP(i, mid)) {                rmx = mid;                l = mid + 1;            } else r = mid - 1;        }         if(rmx == 0) continue;        l = i, r = rmx;        while(l &lt;= r) {            int mid = (l + r) / 2;            if(checkR(i, mid)) {                lmn = mid;                r = mid - 1;            } else l = mid + 1;        }        if(lmn == 0) continue;        int len = rmx - lmn + 1;        ans += len;    }     cout &lt;&lt; ans &lt;&lt; '\n';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="b-进制-线段树"> *B 进制 (线段树)</span></h2><blockquote><p>题意：</p><p>长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 的字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span></span></span></span> (only include ‘0’ ~ ‘9’)，有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">q</span></span></span></span> 次以下两种操作：</p><ol><li>输入 1 x y, 修改第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span> 个字符为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span> ，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>x</mi></msub><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">s_x = y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">s</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span></li><li>输出 2 x y, 代表查询区间 [<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span>]，该区间子串能表示的某进制的最小值 (二进制到十进制之间)，对 1e9 + 7 取模</li></ol><p>思路：</p><p>区间最大数字为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>​ 则对应 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span>​ 进制即为所求，用线段树维护区间最大值，同时维护在 2 ~ 10 进制下每个区间的值。 一个区间的值 = 左区间的值 * pow(进制, 右区间长度) * 右区间的值</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n, q;int s[maxn];ll qpow(ll a, ll b) {    ll res = 1;    for(; b; b &gt;&gt;= 1) {        if(b &amp; 1) res = res * a % mod;        a = a * a % mod;    }    return res;}struct SegTree {    int l, r;    ll a[15];    int m;}tree[maxn &lt;&lt; 2];void build(int u, int l, int r) {    if(l == r) {        tree[u].l = tree[u].r = l;        int tmp = s[l];        tree[u].m = tmp;        rep(i, max(2, tmp + 1), 11) {            tree[u].a[i] = tmp;        }            } else {        int mid = l + r &gt;&gt; 1;        build(u * 2, l, mid);        build(u * 2 + 1, mid + 1, r);        tree[u].m = max(tree[u * 2].m, tree[u * 2 + 1].m);        rep(i, max(2, tree[u].m + 1), 11) {            tree[u].a[i] = (tree[u * 2].a[i] * qpow(i, r - mid) % mod + tree[u * 2 + 1].a[i]) % mod;        }    }}void update(int u, int l, int r, int x, int y) {    if(l == r) {        tree[u].m = y;        rep(i, max(2, y + 1), 11) {            tree[u].a[i] = y;        }    } else {        int mid = l + r &gt;&gt; 1;        if(x &lt;= mid) update(u * 2, l, mid, x, y);        else update(u * 2 + 1, mid + 1, r, x, y);        tree[u].m = max(tree[u * 2].m, tree[u * 2 + 1].m);        rep(i, max(2, tree[u].m + 1), 11) {            tree[u].a[i] = (tree[u * 2].a[i] * qpow(i, r - mid) % mod + tree[u * 2 + 1].a[i]) % mod;        }    }   }int querymax(int u, int l, int r, int x, int y) {    if(x &lt;= l &amp;&amp; r &lt;= y) return tree[u].m;    int mid = l + r &gt;&gt; 1;    if(y &lt;= mid) return querymax(u * 2, l, mid, x, y);    eif(x &gt; mid) return querymax(u * 2 + 1, mid + 1, r, x, y);    else return max(querymax(u * 2, l, mid, x, y), querymax(u * 2 + 1, mid + 1, r, x, y));}ll query(int u, int l, int r, int x, int y, int z) {    if(x &lt;= l &amp;&amp; r &lt;= y) return tree[u].a[z];    int mid = l + r &gt;&gt; 1;    if(y &lt;= mid) return query(u * 2, l, mid, x, y, z);    eif(x &gt; mid) return query(u * 2 + 1, mid + 1, r, x, y, z);    else return (query(u * 2, l, mid, x, mid, z) * qpow(z, y - mid) % mod + query(u * 2 + 1, mid + 1, r, mid + 1, y, z)) % mod;}void solve() {    cin &gt;&gt; n &gt;&gt; q;    rep(i, 1, n + 1) {        char t; cin &gt;&gt; t;        s[i] = t - '0';    }    build(1, 1, n);    rep(i, 0, q) {        int op, x, y;        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;        if(op == 1) update(1, 1, n, x, y);        else {            int z = querymax(1, 1, n, x, y);            cout &lt;&lt; query(1, 1, n, x, y, z + 1) &lt;&lt; '\n';        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="c-蓝彗星-差分"> C 蓝彗星 (差分)</span></h2><blockquote><p>题意：</p><p>输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.61508em;"></span><span class="strut bottom" style="height:0.61508em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span></span></span></span> 表示彗星的数量和每个彗星的持续时间，输出一个长 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 的只有 ‘B’ 和 ‘R’ 组成的字符串，表示彗星颜色，B为蓝色R为红色。</p><p>输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 个整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>，表示每颗彗星的开始时刻，求能看到蓝彗星且看不到红彗星的总秒数。</p><p>1 &lt;= <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>t</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">n, t, a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.61508em;"></span><span class="strut bottom" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mpunct">,</span><span class="mord mathit">t</span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> &lt;= 1e5</p><p>思路：</p><p>维护两个差分数组表示蓝彗星和红彗星的持续时间，按时间顺序开始遍历，分别计算两个数组的前缀和来看当前时间是否符合条件，符合则计数。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define N 100005char s[N];int a[N], red[2 * N], blue[2 * N];void solve(){    int n, t;    cin &gt;&gt; n &gt;&gt; t;    rep(i, 1, n + 1) {        cin &gt;&gt; s[i];    }    rep(i, 1, n + 1) {        cin &gt;&gt; a[i];        if(s[i] == 'B') blue[a[i]]++, blue[a[i] + t]--;        else red[a[i]]++, red[a[i] + t]--;    }    int ans = 0;    int redcnt = 0, bluecnt = 0;    rep(i, 1, 2 * N) {        redcnt += red[i];        bluecnt += blue[i];        if(bluecnt &amp;&amp; !redcnt) ans++;    }    cout &lt;&lt; ans &lt;&lt; '\n';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="d-雪色光晕-二维几何"> D 雪色光晕 (二维几何)</span></h2><blockquote><p>计算点到线段的最短距离，套板子</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//square of a doubleinline double sqr(double x){return x*x;}int sgn(double x){    if(fabs(x) &lt; eps)return 0;    if(x &lt; 0)return -1;    else return 1;}struct Point{    double x,y;    Point(){}    Point(double _x,double _y){        x = _x;        y = _y;    }    bool operator==(Point b) const {        return sgn(x - b.x) == 0 &amp;&amp; sgn(y - b.y) == 0;    }    bool operator&lt;(Point b) const {        return sgn(x - b.x) == 0 ? sgn(y - b.y) &lt; 0 : x &lt; b.x;    }    Point operator-(const Point&amp; b) const {        return Point(x - b.x, y - b.y);    }    //叉积    double operator^(const Point&amp; b) const {        return x * b.y - y * b.x;    }    //点积    double operator*(const Point&amp; b) const {        return x * b.x + y * b.y;    }    //返回长度    double len() {        return hypot(x, y);  //库函数    }    //返回长度的平方    double len2() {        return x * x + y * y;    }    //返回两点的距离    double distance(Point p) {        return hypot(x - p.x, y - p.y);    }};struct Line{    Point s,e;    Line(){}    Line(Point _s,Point _e){        s = _s;        e = _e;    }    //求线段长度    double length() {        return s.distance(e);    }    //点到直线的距离    double dispointtoline(Point p) {        return fabs((p - s) ^ (e - s)) / length();    }    //点到线段的距离    double dispointtoseg(Point p) {        if (sgn((p - s) * (e - s)) &lt; 0 || sgn((p - e) * (s - e)) &lt; 0)            return min(p.distance(s), p.distance(e));        return dispointtoline(p);    }};void solve() {    int n; double x0,y0,x,y; cin&gt;&gt;n&gt;&gt;x0&gt;&gt;y0&gt;&gt;x&gt;&gt;y;    Point p0=Point(x,y),p=Point(x0,y0);    double dis=p0.distance(p);    double xx,yy;    rep(i,0,n){        cin&gt;&gt;xx&gt;&gt;yy;        Point p1=Point(x0+xx,y0+yy);        Line l1=Line(p,p1);        dis=min(l1.dispointtoseg(p0),dis);        x0+=xx; y0+=yy;        p=Point(x0,y0);    }    printf("%.8lf",dis);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="g-子序列权值乘积-快速幂欧拉降幂"> G 子序列权值乘积 (快速幂/欧拉降幂)</span></h2><blockquote><p>题意：</p><p>小红定义一个数组的权值为该数组的最大值乘以最小值。例如数组 [4,1,3] 的权值是 4*1=4。<br>小红拿到了一个数组。她想知道，这个数组的所有 <strong>非空子序列</strong> 的权值的乘积是多少？由于该数过大，请对 1e9+7 取模。</p><p>子序列的定理：对于一个数组，删除其中某些数之后（也可以不删）得到的数组。子序列中的数的相对顺序必须和原数组中的顺序相同</p><p>exp: 数组 [1,3,2] 的非空子序列有 [1] [3] [2] [1,3] [1,2] [3,2] [1,3,2] 共7个。</p><p>思路：</p><p>先排序，随后遍历数组，从当前位置与后面所有序列组成的序列的最小值都是他，与前面所有序列组成的序列的最大值都是他，用快速幂计算贡献即可，注意指数部分取模要采用欧拉降幂，即 <code>% mod - 1</code></p><p>计算贡献：<code>qpow(a[i], qpow(2, n - i, mod - 1), mod) % mod * qpow(a[i], qpow(2, i - 1, mod - 1), mod);</code></p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n, a[maxn];ll qpow(ll a, ll b, ll _mod) {    ll ans = 1;    while (b) {        if (b &amp; 1)            ans = ans * a % _mod;        a = a * a % _mod;        b &gt;&gt;= 1;    }    return ans;}void solve() {    cin &gt;&gt; n;    rep(i, 1, n + 1) {        cin &gt;&gt; a[i];    }    sort(a + 1, a + n + 1);    ll ans = 1;    rep(i, 1, n + 1) {        ans = ans * qpow(a[i], qpow(2, n - i, mod - 1), mod) % mod * qpow(a[i], qpow(2, i - 1, mod - 1), mod) % mod;    }    cout &lt;&lt; ans &lt;&lt; '\n';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="i-爆炸的符卡洋洋洒洒-dp"> I 爆炸的符卡洋洋洒洒 (dp)</span></h2><blockquote><p>题意：</p><p>小红正在研究如何把符卡组合出尽可能大威力的组合魔法。</p><p>小红共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>​ 种符卡可以选择，每种符卡最多只能选择一次，每个符卡的魔力消耗为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>​，威力为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>​。如果将多个符卡进行组合，则可以发动一个组合魔法。组合魔法的魔力消耗为选择的符卡的魔力消耗的总和，其威力为选择的符卡的威力的总和。小红必须保证最终符卡的魔力消耗总和为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>​​ 的倍数。小红想知道，自己能发动的组合魔法最大的威力是多少？<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> &lt; 1e3;  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> &lt; 1e9</p><p>思路：</p><p>01背包，<code>dp[i][j]</code> 表示为前 <code>i</code> 张卡魔力消耗模 <code>k</code> 为 <code>j</code> 的符卡威力的最大值。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a[1005], b[1005];ll dp[1005][1005];void solve() {    int n, k; cin &gt;&gt; n &gt;&gt; k;    rep(i, 1, n + 1) {        cin &gt;&gt; a[i] &gt;&gt; b[i];        a[i] %= k;    }    rep(i, 1, n + 1) {        dp[i][a[i]] = b[i];        rep(j, 0, k) {            dp[i][j] = max(dp[i - 1][j], dp[i][j]);            if(dp[i - 1][(j - a[i] + k) % k]) dp[i][j] = max(dp[i][j], dp[i - 1][(j - a[i] + k) % k] + b[i]);         }    }    if(dp[n][0]) cout &lt;&lt; dp[n][0];    else cout &lt;&lt; -1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="j-区间合数的最小公倍数-数学"> J 区间合数的最小公倍数 (数学)</span></h2><blockquote><p>题意：</p><p>求区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span> 中所有合数的最小公倍数对 1e9 + 7 取模, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span></span></span></span> &lt; 3e5</p><p>思路：</p><p>预处理所有的素数，根据唯一分解定理可知所有的合数可以分解成素数的幂的乘积，求最小公倍数 <em>lcm</em> 只需要维护一个map，对每个素因子取最高次幂即可，快速幂计算最小公倍数。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ll qpow(int a, int b) {    ll ans = 1;    for(; b; b &gt;&gt;= 1) {        if(b &amp; 1) ans = ans * a % mod;        a = a * a % mod;     }    return ans;}vector&lt;int&gt; prime;bool notprime[maxn];void getprime() {    notprime[1] = 1;    rep(i, 2, maxn) {        if(!notprime[i]) {            prime.pb(i);            for(int j = i * i; j &lt;= maxn; j += i) notprime[j] = 1;        }    }  }map&lt;int, int&gt; mp;void solve() {    int l, r;    cin &gt;&gt; l &gt;&gt; r;    ll ans = 1;    getprime();    rep(i, l, r + 1) {        if(!notprime[i]) continue;        int tmp = i;        for(auto x : prime) {            int cnt = 0;            while(tmp % x == 0) {                tmp /= x;                cnt++;            }            mp[x] = max(mp[x], cnt);            if(tmp == 1) break;        }    }    for(auto &amp;it : mp) {        ans = ans * qpow(it.fst, it.sec) % mod;    }    if(ans == 1) cout &lt;&lt; -1 &lt;&lt; '\n';    else cout &lt;&lt; ans &lt;&lt; '\n';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h1&gt;&lt;span id=&quot;2022牛客寒假算法</summary>
      
    
    
    
    <category term="SOLUTIONS" scheme="https://maskros.top/categories/SOLUTIONS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="solutions" scheme="https://maskros.top/tags/solutions/"/>
    
    <category term="二分" scheme="https://maskros.top/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="dp" scheme="https://maskros.top/tags/dp/"/>
    
    <category term="数学" scheme="https://maskros.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="前缀和" scheme="https://maskros.top/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
    <category term="nowcoder" scheme="https://maskros.top/tags/nowcoder/"/>
    
    <category term="线段树" scheme="https://maskros.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="欧拉降幂" scheme="https://maskros.top/tags/%E6%AC%A7%E6%8B%89%E9%99%8D%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 770 (Div.2)</title>
    <link href="https://maskros.top/post/codeforces/cf%20770.html"/>
    <id>https://maskros.top/post/codeforces/cf%20770.html</id>
    <published>2022-02-08T10:30:00.000Z</published>
    <updated>2022-02-15T11:14:34.482Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="codeforces-round-770-div2"> Codeforces Round #770 (Div.2)</span></h1><blockquote><p>被交互题干碎，hack真好玩</p></blockquote><h2><span id="a_reverse_and_concatenate"> A_Reverse_and_Concatenate</span></h2><blockquote><p>水题</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>    string s<span class="token punctuation">,</span> ss<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span> ss <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ss <span class="token operator">==</span> s <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="b_fortune_telling-xor"> B_Fortune_Telling (xor)</span></h2><blockquote><p>题意：</p><p>给定一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> 数组，可以对一个非负整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> 遍历数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> (从 1 到 n) 做如下操作: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>d</mi><mo>+</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d=d+a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mrel">=</span><span class="mord mathit">d</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 或者 d=d ⊕a_i 。</p><p>Alice 从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">d=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mrel">=</span><span class="mord mathit">x</span></span></span></span> 开始，Bob 从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">d=x+3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mrel">=</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathrm">3</span></span></span></span> 开始，已知输入数据一定合法，询问 Alice 和 Bob 谁能遍历数组后得到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span></p><p>思路：</p><p><strong>重要性质</strong>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mbin">+</span><span class="mord mathit">b</span></span></span></span> 和 a⊕b 的<strong>奇偶性不会改变</strong></p><p>根据题意，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">x+3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathrm">3</span></span></span></span> 的奇偶性固然不同，遍历判断奇偶性即可。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>    x <span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">rep</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> t<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>         x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> t<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="c_okea-构造"> C_OKEA (构造)</span></h2><blockquote><p>题意：</p><p>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>，构造这样一个从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n*k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> 的矩阵，要求每行的相邻 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> 个数的和要被 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> 整除，不能构造输出 NO，否则输出 YES 和构造方案。</p><p>思路：嗯构造，注意一下为NO的条件为 <code>(n * k) % (2 * k) != 0 &amp;&amp; k != 1</code> 即可</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">rep</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> j <span class="token operator">*</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> en<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="d_finding_zero"> D_Finding_Zero</span></h2><blockquote><p>题意：</p><p>交互题, 待补</p></blockquote><blockquote><p>这场因为交互题卡的人还挺多，结果去hack了别人的A，hack的挺爽，上了一波小分</p></blockquote>]]></content>
    
    
    <summary type="html">Codeforces Round 770 (Div.2)</summary>
    
    
    
    <category term="SOLUTIONS" scheme="https://maskros.top/categories/SOLUTIONS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="solutions" scheme="https://maskros.top/tags/solutions/"/>
    
    <category term="codeforces" scheme="https://maskros.top/tags/codeforces/"/>
    
    <category term="构造" scheme="https://maskros.top/tags/%E6%9E%84%E9%80%A0/"/>
    
    <category term="位运算" scheme="https://maskros.top/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>牛客2022年除夕AK场- E 春联(博弈)</title>
    <link href="https://maskros.top/post/probs/%E6%98%A5%E8%81%94sg.html"/>
    <id>https://maskros.top/post/probs/%E6%98%A5%E8%81%94sg.html</id>
    <published>2022-02-04T15:30:50.000Z</published>
    <updated>2022-02-15T10:12:21.826Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="牛客2022年除夕ak场-e-春联博弈"> 牛客2022年除夕AK场- E 春联(博弈)</span></h1><blockquote><p><a href="https://ac.nowcoder.com/acm/contest/28335/E">link</a></p></blockquote><h2><span id="题面"> 题面</span></h2><p>小红和紫准备玩一个游戏。她们拿到了一个只包含小写字母的字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span></span></span></span>。两人轮流将一个小写字母添加到一个新串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.61508em;"></span><span class="strut bottom" style="height:0.61508em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span></span></span></span> 的结尾，必须保证t时刻都是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">s</span></span></span></span> 的一个子序列。谁先无法操作则输掉游戏。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.61508em;"></span><span class="strut bottom" style="height:0.61508em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span></span></span></span> 初始是一个空串。小红先手添加，假设两人都足够聪明，请问谁最终能获得胜利？</p><p>子序列 <em>Def</em>’：若一个字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> 删除部分字符（也可以不删）后得到字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span></span></span></span>，那么称 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> 的子序列。</p><p>如果小红获得胜利，则输出 “kou”，否则输出 “yukari”</p><h2><span id="题解"> 题解</span></h2><p>首先，最后一个字母是<strong>必胜位置</strong>，那么与最后一个字母相同的位置到最后一个字母之间都是<strong>必败区间</strong>，因为在这中间选，那么接下来对手至需要选最后一个字母即可获胜。</p><p>那么，就会形成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>a</mi><mi>b</mi><mi>c</mi><mo>)</mo><mo>{</mo><mi>a</mi><mo>}</mo><mo>(</mo><mi>b</mi><mi>c</mi><mi>d</mi><mo>)</mo><mo>{</mo><mi>b</mi><mo>}</mo></mrow><annotation encoding="application/x-tex">(abc)\{a\}(bcd)\{b\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mord mathit">c</span><span class="mclose">)</span><span class="mopen">{</span><span class="mord mathit">a</span><span class="mclose">}</span><span class="mopen">(</span><span class="mord mathit">b</span><span class="mord mathit">c</span><span class="mord mathit">d</span><span class="mclose">)</span><span class="mopen">{</span><span class="mord mathit">b</span><span class="mclose">}</span></span></span></span> , <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mclose">)</span></span></span></span> 代表必败区间，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="0.036ex" height="0.036ex" role="img" focusable="false" viewbox="0 0 16 16"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"/></g></g></svg></mjx-container> 代表必胜区间</p><p>那么考虑由必胜作为第一个点，那么小红只需要先手在第一个位置，那么就会将对手逼入必败</p><p>不完整的必败区间作为开头，小红也可以选择第一个必胜点，转为情况1</p><p>只有当完整的必败区间（找到了与之后第一个必败区间相同的字母）作为开头，那么这时候小红只能在必败区间选取，则无法取胜</p><h2><span id> 🐴</span></h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void solve(){    string s;    cin&gt;&gt;s;    int i,j=s.length()-1;    for(i=j-1;i&gt;=0;i--){        if(s[i]==s[j])j=i-1,i=j;    }    if(j==-1) puts("yukari");    else puts("kou");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果要求每次添加的时候t都是s的子串，解法是后缀自动机next指针dag图上求sg函数 &gt;~&lt;</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h1&gt;&lt;span id=&quot;牛客2022年除夕a</summary>
      
    
    
    
    <category term="SOLUTIONS" scheme="https://maskros.top/categories/SOLUTIONS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="博弈" scheme="https://maskros.top/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>2022牛客寒假算法基础集训营3</title>
    <link href="https://maskros.top/post/nowcoder/2022winter/round3.html"/>
    <id>https://maskros.top/post/nowcoder/2022winter/round3.html</id>
    <published>2022-02-03T13:30:50.000Z</published>
    <updated>2022-02-24T06:41:19.480Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="2022牛客寒假算法基础集训营3"> 2022牛客寒假算法基础集训营3</span></h1><blockquote><p>AC  7 / 12 越打越菜</p></blockquote><h2><span id="b-智乃买瓜-背包"> B 智乃买瓜 (背包)</span></h2><blockquote><p>题意：</p><p>智乃来到水果摊前买瓜，水果摊上贩卖着 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span></span></span></span> 个不同的西瓜，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.65952em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span> 个西瓜的重量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02691em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>。智乃对于每个瓜都可以选择买一个整瓜或者把瓜劈开买半个瓜，半个瓜的重量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">w_i/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.02691em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathrm">/</span><span class="mord mathrm">2</span></span></span></span> 。保证所有瓜的重量都是一个正偶数。如果他想要购买西瓜的重量和分别为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">k=1,2,3...M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mrel">=</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mpunct">,</span><span class="mord mathrm">3</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathit" style="margin-right:0.10903em;">M</span></span></span></span> 时，有多少种购买西瓜的方案，答案对1e9+7取模</p><p>题解：</p><p><strong>分组背包</strong>，每个瓜有三种决策：买一个/半个/不买，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">d</span><span class="mord mathit">p</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 表示前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.65952em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span> 个瓜，重量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.05724em;">j</span></span></span></span> 的方案数，故可列出转移方程： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo><mo>=</mo><mo>(</mo><mi>f</mi><mo>[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>]</mo><mo>[</mo><mi>j</mi><mo>]</mo><mo>+</mo><mi>f</mi><mo>[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>]</mo><mo>[</mo><mi>j</mi><mo>−</mo><mi>w</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>]</mo><mo>+</mo><mi>f</mi><mo>[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>]</mo><mo>[</mo><mi>j</mi><mo>−</mo><mfrac><mrow><mi>w</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><mrow><mn>2</mn></mrow></mfrac><mo>]</mo><mo>)</mo><mi mathvariant="normal">%</mi><mi>m</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">f[i][j]=(f[i-1][j]+f[i-1][j-w[i]]+f[i-1][j-\dfrac{w[i]}{2}]) \% mod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.427em;"></span><span class="strut bottom" style="height:2.113em;vertical-align:-0.686em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mbin">−</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">2</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">]</span><span class="mclose">)</span><span class="mord mathrm">%</span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span></span></span></span></p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// dp[1005][2005]int dp[1005][2005];int w[1005];void solve() {    int N, M; cin &gt;&gt; N &gt;&gt; M;    rep(i, 1, N + 1) cin &gt;&gt; w[i];     rep(i, 1, N + 1) {        dp[i][w[i]]++;        dp[i][w[i] / 2]++;        rep(j, 1, M + 1) {            dp[i][j] += dp[i - 1][j];            if(j - w[i] &gt;= 0) dp[i][j] = (dp[i - 1][j - w[i]] + dp[i][j]) % mod;            if(j - w[i] / 2 &gt;= 0) dp[i][j] = (dp[i - 1][j - w[i]/2] + dp[i][j]) % mod;         }    }    rep(i, 1, M + 1) {        cout &lt;&lt; dp[N][i] &lt;&lt; ' ';    }}// dp[2005] another versionint dp[2005];int w[1005];void solve() {    int N, M; cin &gt;&gt; N &gt;&gt; M;    rep(i, 1, N + 1) cin &gt;&gt; w[i];     rep(i, 1, N + 1) {        red(j, M + 1, 1) {            if(j - w[i] &gt;= 0) dp[j] = (dp[j - w[i]] + dp[j]) % mod;            if(j - w[i] / 2 &gt;= 0) dp[j] = (dp[j - w[i] / 2] + dp[j]) % mod;         }        dp[w[i]]++;        dp[w[i] / 2]++;    }    rep(i, 1, M + 1) {        cout &lt;&lt; dp[i] &lt;&lt; ' ';    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="c-智乃买瓜-v2-dp"> *C 智乃买瓜 v2 (dp)</span></h2><blockquote><p>题意：</p><p>B题的反转，给定质量从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">M</span></span></span></span> 的买瓜方案数，让你还原西瓜的个数和质量。</p><p>思路：</p><p>首先容易知道 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span></span></span></span> 的个数是确定的。不放倒着考虑，在B题中<code>dp[i, j]</code>的方案数是怎么得到的，这里就怎么减去。思路就是在把一个个dp方案数变为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span></span></span></span>​ 的过程中不断将使用的重量放到答案<code>vector</code>中。从前往后遍历dp数组，如果一个位置的值不为0，说明这些剩下的这个重量i对应的方案数只能由 <code>i*2</code> 这个西瓜/2来提供。此时就把一个<code>i*2</code>放入<code>ans</code>，然后更新后面的dp数组部分</p><p>TIPS: <code>i==j</code> 时就是处理 <code>dp[i]</code>，剩下的方案数由<code>dp[i]</code>个<code>i*2</code>的瓜提供，因此<code>dp[0]</code>要设置为1，即每次都要减1。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int dp[2005];vector&lt;int&gt; w;void solve() {    int M; cin &gt;&gt; M;    rep(i, 1, M + 1) cin &gt;&gt; dp[i];    dp[0] = 1; // important    rep(i, 1, M + 1) {        while(dp[i]) {            w.pb(2 * i);            rep(j, i, M + 1) {                dp[j] = (dp[j] - dp[j - i] + mod) % mod;                if(j - 2 * i &gt;= 0) dp[j] = (dp[j] - dp[j - i * 2] + mod) % mod;             }         }    }    cout &lt;&lt; w.size() &lt;&lt; "\n";    for (auto v : w) cout &lt;&lt; v &lt;&lt; ' ';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="d-智乃的01串打乱"> D 智乃的01串打乱</span></h2><blockquote><p>水题</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void solve() {    int n; cin &gt;&gt; n;    string s; cin &gt;&gt; s;    rep(i, 1, s.size()){        if(s[i] != s[0]) { swap(s[0], s[i]); break;}    }     cout &lt;&lt; s; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="e-智乃的数字积木-ezv"> E 智乃的数字积木 ezv</span></h2><blockquote><p>贪心暴力即可</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n, m, k;char s[100005];int a[100005];ll cal() {    ll ret = s[0] - '0';    rep(i, 1, n) {        ret = (ret * 10 + s[i] - '0') % mod;    }    return ret;}void op() {    int idx = 0;    rep(i, 1, n) {        if (a[i] != a[idx]) {            sort(s + idx, s + i, greater&lt;char&gt;() );            idx = i;        }    }    sort(s + idx, s + n, greater&lt;char&gt;() );    cout &lt;&lt; cal() &lt;&lt; '\n'; }void solve() {    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; s;    a[0] = 0;    rep(i, 0, n) cin &gt;&gt; a[i];    op();    rep(i, 0, k) {        int x, y; cin &gt;&gt; x &gt;&gt; y;        rep(i, 0, n) {            if(a[i] == x) a[i] = y;        }        op();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="g-智乃的树旋转-ezv"> G 智乃的树旋转 ezv</span></h2><blockquote><p>简单的树的性质</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int fa[1005];void solve() {    int n; cin &gt;&gt; n;    rep(i, 1, n + 1) fa[i] = i;    int x1, x2;    rep(i, 1, n + 1) {        cin &gt;&gt; x1 &gt;&gt; x2;        if (x1) fa[x1] = i;        if (x2) fa[x2] = i;    }    int ans = 0;    rep(i, 1, n + 1) {        cin &gt;&gt; x1 &gt;&gt; x2;        if (x1 &amp;&amp; fa[i] == x1) ans = x1;        if (x2 &amp;&amp; fa[i] == x2) ans = x2;    }    if(ans) cout &lt;&lt; 1 &lt;&lt; '\n' &lt;&lt; ans;    else cout &lt;&lt; 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="i-智乃的密码-二分前缀和"> I 智乃的密码 (二分/前缀和)</span></h2><blockquote><p>题意：</p><p>密码是仅包含大小写英文字母、数字、特殊符号的字符串；密码的长度不少于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">L</span></span></span></span> 个字符，并且不多于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span></span> 个字符。密码中应该至少包括①大写英文字母、②小写英文字母、③数字、④特殊符号这四类字符中的三种。</p><p>现在智乃有一个长度大小为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span></span></span></span> 的字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span></span></span></span> ，她想知道 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span></span></span></span>​ 串中有多少个子串是一个符合条件的密码，请你帮助智乃统计符合条件的密码数目</p><p>思路：</p><p>前缀和处理字符串，遍历枚举左端点，二分找符合条件最近距离的右端点，计算贡献值。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int n, l, r;char s[100005];int pre[100005][5];bool check(int ll, int rr) {    int checksum = min(pre[rr][0] - pre[ll - 1][0], 1) +                 min(pre[rr][1] - pre[ll - 1][1], 1) +                  min(pre[rr][2] - pre[ll - 1][2], 1) +                 min(pre[rr][3] - pre[ll - 1][3], 1);    if(checksum &gt;= 3) return 1;    return 0;}void solve() {    cin &gt;&gt; n &gt;&gt; l &gt;&gt; r;    rep(i, 1, n + 1) cin &gt;&gt; s[i];    pre[0][0] = pre[0][1] = pre[0][2] = pre[0][3] = 0;    rep(i, 1, n + 1) {        rep(j, 0, 4) pre[i][j] = pre[i - 1][j];        if(s[i] &lt;= '9' &amp;&amp; s[i] &gt;= '0') pre[i][0]++;        eif(s[i] &lt;= 'Z' &amp;&amp; s[i] &gt;= 'A') pre[i][1]++;        eif(s[i] &lt;= 'z' &amp;&amp; s[i] &gt;= 'a') pre[i][2]++;        else pre[i][3]++;    }    ll ans = 0;    rep(i, 1, n + 1) {        if(i + l - 1 &gt; n) break;        int mnpos = 0;        int L = l - 1, R = min(r - 1, n - i);          while(L &lt;= R) {            int mid = (L + R) / 2;            if(check(i, i + mid)) {                R = mid - 1;                mnpos = min(r - 1, n - i) - mid + 1;            }else L = mid + 1;        }        ans += mnpos;    }    cout &lt;&lt; ans &lt;&lt; '\n';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="j-智乃的c语言模除方程-分类讨论"> J 智乃的C语言模除方程 (分类讨论)</span></h2><blockquote><p>题意：</p><p>模除是一种不具交换性的二元运算。模除（又称模数、取模操作、取模运算等，英语：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>o</mi></mrow><annotation encoding="application/x-tex">modulo</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mathit">u</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>u</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">modulus</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord mathit">u</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">u</span><span class="mord mathit">s</span></span></span></span>。得到的是一个数除以另一个数的余数，给定两个正整数：被除数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> 和除数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>，得到的是使用欧几里德除法时 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi mathvariant="normal">/</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">a/n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathrm">/</span><span class="mord mathit">n</span></span></span></span> 的余数。<br>而当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 出现负数时，通常的定义就不适用了，c/c++语言中，当被除数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 出现负数时，运算的过程中首先将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 作为非负整数进行运算，然后得出结果时符号与被除数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> 保持一致。举个例子，比如 (−5)\%3 =−2 而 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mi mathvariant="normal">%</mi><mo>(</mo><mo>−</mo><mn>3</mn><mo>)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">5\%(-3)=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">5</span><span class="mord mathrm">%</span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathrm">3</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathrm">2</span></span></span></span>。</p><p>现在智乃有一个模除方程：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi mathvariant="normal">%</mi><mi>P</mi><mo>=</mo><mi>Q</mi><mo>(</mo><mi>Q</mi><mo>∈</mo><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">x\%P=Q(Q\in[l,r])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span><span class="mord mathrm">%</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mrel">=</span><span class="mord mathit">Q</span><span class="mopen">(</span><span class="mord mathit">Q</span><span class="mrel">∈</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> ， 其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span> 为未知数, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span></span></span></span> 为给定常数, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">Q</span></span></span></span> 可为区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span> 内的任意整数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">%</span></span></span></span>运算遵循c/c++中模除运算的运算法则。</p><p>显然这个方程的解并不为一，所以智乃现在给你划定了一个整数答案区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>L</mi><mo separator="true">,</mo><mi>R</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[L,R]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathit">L</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mclose">]</span></span></span></span>，询问答案区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>L</mi><mo separator="true">,</mo><mi>R</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[L,R]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathit">L</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mclose">]</span></span></span></span> 内有多少符合条件的整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span> 能使得等式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi mathvariant="normal">%</mi><mi>P</mi><mo>=</mo><mi>Q</mi><mo>(</mo><mi>Q</mi><mo>∈</mo><mo>[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo>]</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">x\%P=Q(Q\in[l,r])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span><span class="mord mathrm">%</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mrel">=</span><span class="mord mathit">Q</span><span class="mopen">(</span><span class="mord mathit">Q</span><span class="mrel">∈</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>​ 成立。</p><p>思路：分类讨论</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits/stdc++.h&gt;using namespace std;int P, l, r, L, R;typedef long long ll;ll ans;ll calc(ll a, ll b, ll c, ll d) {  //计算符合条件的区间长    if (b &lt; c || d &lt; a)        return 0ll;    ll r = min(b, d), l = max(a, c);    return r - l + 1;}ll query(ll u) {  //[0,u]中符合条件的个数    // u/p份 每份所在总区间为[0,P-1]    // u%p 余数为[1,u%p] 0%p=0 总区间[0,p]    if (u &gt;= 0)        return 1ll * (u / P) * calc(0, P - 1, l, r) + 1ll * calc(0, u % P, l, r);    else        return 1ll * abs(u) / P * calc(1 - P, 0, l, r) + 1ll * calc(u % P, 0, l, r);}int main() {    cin &gt;&gt; P &gt;&gt; l &gt;&gt; r &gt;&gt; L &gt;&gt; R;    P = abs(P);    if (L &gt;= 0 &amp;&amp; R &gt;= 0)        ans = query(R) - query(L - 1);    else if (L &lt;= 0 &amp;&amp; R &gt;= 0)        ans = query(R) + query(L) - query(0);    else        ans = query(L) - query(R + 1);    cout &lt;&lt; ans &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="l-智乃的数据库-模拟"> L 智乃的数据库 (模拟)</span></h2><blockquote><p>题意：</p><p>模拟SQL语句: <code>SELECT COUNT(*) FROM Table GROUP BY ...;</code></p><p>思路：</p><p>模拟即可，注意细心不要写错</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int N, M;map&lt;string, int&gt; mp;vector&lt;int&gt; order;struct node {    int data[maxn];} a[maxn];bool cmp(node x, node y){    rep(i, 0, order.size()) {        int idx = order[i];        if(x.data[idx] == y.data[idx]) continue;        else return x.data[idx] &lt; y.data[idx];    }    return x.data[0] &lt; y.data[0];}void solve() {    cin &gt;&gt; N &gt;&gt; M;    string s;    rep(i, 0, M) { cin &gt;&gt; s; mp[s] = i;}    rep(i, 0, N) {        rep(j, 0, M) {            cin &gt;&gt; a[i].data[j];         }    }    rep(i, 0, 7) cin &gt;&gt; s;    int bg = 0;    rep(i, 0, s.size()) {        if(s[i] == ',' || s[i] == ';') {            string key = s.substr(bg, i - bg);            bg = i + 1;            order.pb(mp[key]);        }    }    sort(a, a + N, cmp);    int cnt = 1;    vector&lt;int&gt; ret;    rep(i, 1, N) {        rep(j, 0, order.size()) {            int idx = order[j];            if(a[i].data[idx] != a[i - 1].data[idx]) {                ret.pb(cnt);                cnt = 0;                break;            }        }        cnt++;    }    ret.pb(cnt);    cout &lt;&lt; ret.size() &lt;&lt; '\n';    for (auto x : ret) cout &lt;&lt; x &lt;&lt; ' ';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h1&gt;&lt;span id=&quot;2022牛客寒假算法</summary>
      
    
    
    
    <category term="SOLUTIONS" scheme="https://maskros.top/categories/SOLUTIONS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="solutions" scheme="https://maskros.top/tags/solutions/"/>
    
    <category term="思维" scheme="https://maskros.top/tags/%E6%80%9D%E7%BB%B4/"/>
    
    <category term="二分" scheme="https://maskros.top/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="dp" scheme="https://maskros.top/tags/dp/"/>
    
    <category term="模拟" scheme="https://maskros.top/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="前缀和" scheme="https://maskros.top/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
    <category term="nowcoder" scheme="https://maskros.top/tags/nowcoder/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 769 (Div.2)</title>
    <link href="https://maskros.top/post/codeforces/cf%20769.html"/>
    <id>https://maskros.top/post/codeforces/cf%20769.html</id>
    <published>2022-02-02T10:30:00.000Z</published>
    <updated>2022-02-14T11:50:34.731Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="codeforces-round-769-div2"> Codeforces Round #769 (Div.2)</span></h1><blockquote><p>virtual participant</p></blockquote><h2><span id="a_abc"> A_ABC</span></h2><blockquote><p>水题</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span> cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span> cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&gt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">eif</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="b_fun_with_even_subarrays-构造xor"> B_Fun_with_Even_Subarrays (构造/xor)</span></h2><blockquote><p>题意：</p><p>从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span> 代表 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 个连续柱子的高度，现在需要构造一个排列，构建的成本为相邻柱子异或的最大值，即 max\{p_i ⊕p_{i+1}\}，现在要使成本最小。</p><p>思路：</p><p>无论如何异或的最大值都由最高位决定，注意把他和低位的全1数错开即可</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span> cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> mx<span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>mx<span class="token operator">=</span>p<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token function">eif</span><span class="token punctuation">(</span>p<span class="token operator">&gt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>mx<span class="token operator">=</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>mx<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>mx<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    en<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="c_strange_test-or"> C_Strange_Test (or)</span></h2><blockquote><p>题意：</p><p>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span></span></span></span> (a&lt;b)，可以做任意次操作：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>:</mo><mo>=</mo><mi>a</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a:=a+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mrel">:</span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>:</mo><mo>=</mo><mi>b</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">b:=b+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span><span class="mrel">:</span><span class="mrel">=</span><span class="mord mathit">b</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span>​</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>:</mo><mo>=</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">a:=a|b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mrel">:</span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mord mathrm">∣</span><span class="mord mathit">b</span></span></span></span></li></ul><p>询问至少需要多少次操作才能使 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a=b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mrel">=</span><span class="mord mathit">b</span></span></span></span> ?</p><p>思路：</p><p>由于<strong>or</strong>操作的性质，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi mathvariant="normal">∣</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">a|b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathrm">∣</span><span class="mord mathit">b</span></span></span></span> 一定大于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span></span></span></span>，故<strong>或操作最多执行一次</strong>。所以只需判断是先 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> 自加再 or 还是先 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span></span></span></span> 自加再 or 即可。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 只可能先a++再or，或者先b++再or</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">,</span> y <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ans2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">|</span>y<span class="token punctuation">)</span> <span class="token operator">!=</span> y <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span> x<span class="token operator">++</span><span class="token punctuation">,</span> ans1<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> ans1<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">|</span>b<span class="token punctuation">)</span> <span class="token operator">!=</span> b<span class="token punctuation">)</span> b<span class="token operator">++</span><span class="token punctuation">,</span> ans2<span class="token operator">++</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">min</span><span class="token punctuation">(</span>ans1<span class="token punctuation">,</span> ans2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="d_new_year_concert-st表二分"> D_New_Year_Concert (ST表/二分)</span></h2><blockquote><p>题意：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 个学校从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 编号，第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.65952em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span> 个班级准备了时长为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 的节目，对于前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> 个节目，如果存在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span></span></span></span> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>l</mi><mo>≤</mo><mi>r</mi><mo>≤</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">1\leq l\leq r\leq k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mrel">≤</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mrel">≤</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mrel">≤</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>) 且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo>(</mo><msub><mi>b</mi><mi>l</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mrow><mi>l</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>b</mi><mi>r</mi></msub><mo>)</mo><mo>=</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">gcd(b_l,b_{l+1},...,b_r)=r-l+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">c</span><span class="mord mathit">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span> ，观众就会感觉无聊，为了避免这种情况，你可以修改任意节目的时长为任意正整数。</p><p>规定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>t</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">f(a_1,a_2,...,a_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">t</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span> 为前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.61508em;"></span><span class="strut bottom" style="height:0.61508em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span></span></span></span> 个节目需要修改的最小次数，打印 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>)</mo><mo separator="true">,</mo><mi>f</mi><mo>(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo>)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>f</mi><mo>(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">f(a_1),f(a_1,a_2),...,f(a_1,...,a_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></p><p>思路：</p><p>注意到，<strong>a个数的GCD一定不小于a+1个数的GCD</strong>，因此其具有单调性（满足二分条件）。且每次操作的那个数可以替换为任意值，那么就可以取一个大素数。且f值具有承袭性。那么考虑这样一个做法：</p><p>遍历1到n，设当前为i，lst为上一次进行操作的位置+1。如果当前a[i] = 1，必然要进行更改；否则基于上面提到的n个数GCD的性质，二分找[lst, i]这段区间是否存在某个字区间[x, i]满足gcd(a_x,a_{x+1}...a_i)=i−x+1。如果有的话则让 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mi>f</mi><mo>[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f[i] = f[i - 1] + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span>，同时 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">lst</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">s</span><span class="mord mathit">t</span></span></span></span> 更新为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span> ；如果没有则让 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mi>f</mi><mo>[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">f[i] = f[i - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mclose">]</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">]</span></span></span></span> 即可，二分check使用ST表查询区间GCD。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;bits/stdc++.h&gt;using namespace std;int a[200009], st[200009][30];int gcd(int a, int b) {    if(b == 0) return a;    return gcd(b, a % b);}int query(int l, int r) {    int k = log2(r - l + 1);    return gcd(st[l][k], st[r-(1&lt;&lt;k)+1][k]);}int main() {    int n;    cin &gt;&gt; n;    for(int i = 1; i &lt;= n; i++) {        scanf("%d", &amp;a[i]);        st[i][0] = a[i];    }    for(int j = 1; j &lt;= 20; j++) {        for(int i = 1; i &lt;= n; i++) {            if(i + (1 &lt;&lt; j) - 1 &gt; n) continue;            st[i][j] = gcd(st[i][j-1], st[i+(1&lt;&lt;(j-1))][j-1]);        }    }    int pos = 1, ans = 0;    for(int i = 1; i &lt;= n; i++) {        int l = pos, r = i;        while(l &lt; r) {            int mid = (l + r) / 2;            if(query(mid, i) &gt;= i - mid + 1) r = mid;            else l = mid + 1;        }        if(query(l, i) == i - l + 1) {            ans++;            pos = i + 1;        }        printf("%d ", ans);    }    cout &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">Codeforces Round 769 (Div.2)</summary>
    
    
    
    <category term="SOLUTIONS" scheme="https://maskros.top/categories/SOLUTIONS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="solutions" scheme="https://maskros.top/tags/solutions/"/>
    
    <category term="codeforces" scheme="https://maskros.top/tags/codeforces/"/>
    
    <category term="思维" scheme="https://maskros.top/tags/%E6%80%9D%E7%BB%B4/"/>
    
    <category term="构造" scheme="https://maskros.top/tags/%E6%9E%84%E9%80%A0/"/>
    
    <category term="二分" scheme="https://maskros.top/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="位运算" scheme="https://maskros.top/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    <category term="ST表" scheme="https://maskros.top/tags/ST%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>记念二〇二一</title>
    <link href="https://maskros.top/post/life/Summary_2021.html"/>
    <id>https://maskros.top/post/life/Summary_2021.html</id>
    <published>2022-02-01T15:50:00.000Z</published>
    <updated>2022-02-01T16:07:08.837Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="记念二〇二一"> 记念二〇二一</span></h1><blockquote><p>以下 Q&amp;A：</p><p>Q：为什么是“记念”？</p><p>A：这个词对于我来说最早出自高中学过的一篇课文，鲁迅的《记念刘和珍君》，关于这一篇为啥我记得比较清楚，这里按下不表。当时就在想为什么是“记念”而非“纪念”，然后查了查，我觉得最靠谱的理由就是他写这篇文章的时候文白混杂、简繁混用才写的“记念”。什么诸如细细品味在《线代汉语词典》中词性和用法的微微差异，我觉得这种瞎JB猜的都是扯淡。但是说回正题，我在这里为什么要用”记念“呢，就是因为<strong>想用了</strong>。</p><p>Q：为什么大年初一才发年终总结，而不是1月1号？</p><p>A：这个有很多原因。我还是更倾向于1月1号代表新的一年，日历也得换本新的，虽然👴🏻不用台历。那天晚上想写来着又因为感觉有些作业没处理，比较忙，就没写。实际情况是当天晚上摆了，啥正事没干，过了那天又觉得写有没啥意思，就拖下来了。总结：<strong>摆了，没来得及写</strong>。</p></blockquote><p>OK，接下来进入正题。</p><p>本文贯彻总-分-总的行文结构，以下叙事按时间轴进行，无图（其实图挺多的要放图也行但是懒得放），最后来个总结，over.</p><p>（以下为目录，如果你是PC的话右边儿👉🏻也有、排版部分借鉴了coin哥哥🥰的风格）</p><!-- toc --><ul><li><a href="#%E4%B8%80%E6%9C%88">一月</a><ul><li><a href="#%E4%B8%80%E4%BA%9B%E6%96%B0%E9%B2%9C%E4%BA%8B">一些新鲜事</a></li><li><a href="#%E7%94%9F%E6%97%A5">生日</a></li><li><a href="#%E8%80%83%E8%AF%95%E5%91%A8">考试周</a></li></ul></li><li><a href="#%E4%BA%8C%E6%9C%88">二月</a><ul><li><a href="#mcmsup1sup">MCM<sup>[1]</sup></a></li><li><a href="#%E6%98%A5%E6%99%9A">春晚</a></li></ul></li><li><a href="#%E4%B8%89%E6%9C%88">三月</a></li><li><a href="#%E5%9B%9B%E6%9C%88">四月</a><ul><li><a href="#%E8%93%9D%E8%8E%B2%E8%8A%B1">蓝莲花</a></li><li><a href="#take-on-me">Take On me</a></li><li><a href="#the-dawn">The Dawn</a></li><li><a href="#1%E4%B8%B6%E6%83%8A%E5%96%9C">1丶惊喜</a></li></ul></li><li><a href="#%E4%BA%94%E6%9C%88">五月</a><ul><li><a href="#%E8%B4%A5%E8%B5%B0%E9%93%B6%E5%B7%9D">败走银川</a></li><li><a href="#%E6%91%87%E6%BB%9A%E4%B9%8B%E5%A4%9C">摇滚之夜</a></li></ul></li><li><a href="#%E5%85%AD%E6%9C%88">六月</a><ul><li><a href="#%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6%E5%85%AD%E6%9C%88%E7%9A%84%E9%A3%8E">山东大学“六月的风”</a></li><li><a href="#livehouse">Livehouse</a></li><li><a href="#%E6%AC%A7%E6%B4%B2%E6%9D%AF">欧洲杯</a></li><li><a href="#%E8%80%83%E8%AF%95%E6%9C%88">考试月</a></li></ul></li><li><a href="#%E4%B8%83%E6%9C%88">七月</a><ul><li><a href="#%E4%BD%93%E9%AA%8C%E7%94%9F%E6%B4%BB">体验生活</a></li><li><a href="#nba-final">NBA Final</a></li><li><a href="#%E8%AE%AD%E7%BB%83">训练</a></li></ul></li><li><a href="#%E5%85%AB%E6%9C%88">八月</a><ul><li><a href="#%E4%B8%9C%E4%BA%AC%E5%A5%A5%E8%BF%90">东京奥运</a></li><li><a href="#s-birthday">👩’s Birthday</a></li><li><a href="#cr7">CR7</a></li></ul></li><li><a href="#%E4%B9%9D%E6%9C%88">九月</a><ul><li><a href="#web%E6%A1%86%E6%9E%B6%E7%BC%96%E7%A8%8B">Web框架编程</a></li><li><a href="#%E5%9B%BD%E8%B5%9B">国赛</a></li><li><a href="#%E8%97%8F%E4%B9%A6%E7%A5%A8">藏书票</a></li></ul></li><li><a href="#%E5%8D%81%E6%9C%88">十月</a><ul><li><a href="#%E6%97%A7%E6%89%8B%E6%9C%BA">👋，旧手机</a></li><li><a href="#vlog%E6%A8%AA%E7%A9%BA%E5%87%BA%E4%B8%96">Vlog👶🏻横空出世</a></li></ul></li><li><a href="#%E5%8D%81%E4%B8%80%E6%9C%88">十一月</a><ul><li><a href="#edg">EDG</a></li><li><a href="#%E6%B5%B7%E8%B6%85sup2sup">海超<sup>[2]</sup></a></li><li><a href="#%E8%B4%A5%E8%B5%B0%E4%B8%8A%E6%B5%B7">败走上海</a></li></ul></li><li><a href="#%E5%8D%81%E4%BA%8C%E6%9C%88">十二月</a><ul><li><a href="#ccsp">CCSP</a></li><li><a href="#%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B">软件工程</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a><ul><li><a href="#%E8%BF%B7%E8%8C%AB">迷茫</a></li><li><a href="#%E8%BD%AE%E5%BB%93">轮廓</a></li><li><a href="#%E5%B1%95%E6%9C%9B">展望</a></li></ul></li></ul><!-- tocstop --><h2><span id="一月"> 一月</span></h2><blockquote><p>近年的一月都如此般经典，不过今年新鲜一点</p></blockquote><h3><span id="一些新鲜事"> 一些新鲜事</span></h3><p>来自bilibili年终报告：<strong>吟游大司人</strong>可能是你今年最喜欢的UP主，你一共看了TA的视频 <strong>718</strong> 次，这或许证明了我对金轮的爱，但是也侧面证明了把很多时间浪费到了短视频上。</p><p>来自👩<sup>[1]</sup>：不同以往的是，我在2020年底因为诸多因素收获了一个👩，所以给朴素的一月增添了许多活力。</p><hr><p>[1]👩: 指👩</p><h3><span id="生日"> 生日</span></h3><blockquote><p>2021/1/10</p></blockquote><p>每年一趟的生日如期而至，有了👩的我在👩的带领下出去恰饭，由于有👩之前我一向是不咋离校的，一是因为没啥人和我出去，自己出去也没啥意思；二是出去要么就经典石老人，这个我不好评价；所以不得不评价出去恰饭的感觉还挺嗨的。</p><h3><span id="考试周"> 考试周</span></h3><p>一如既往的考试周，今年我换了策略，在熟练运用markdown技术后我心血来潮用markdown结合课件开始猛整复习资料，结论是<strong>吊用没有</strong>。有些cv的东西你cv了也没啥印象，打印了之后排版大量的空余也让我懒得翻页，所以不出意外的考寄了，让疫情给高分后重新带给我的信心又瓦了<sup>[2]</sup>。</p><hr><p>[2] <strong>瓦了</strong>：指无了</p><h2><span id="二月"> 二月</span></h2><blockquote><p>今年的寒假比往年的寒假充实一点、、</p></blockquote><h3><span id="mcm1"> MCM<sup>[1]</sup></span></h3><blockquote><p>[1] <strong>MCM</strong>:  The Mathematical Contest in Modeling，指美国大学生数学建模竞赛，又名水赛</p></blockquote><p>往年的寒假对于我来说确实是纯纯的假期，但是总有人利用这段时间偷偷学习。正如山东省实验中学校长，党委书记韩相河在开学典礼上的重要讲话：“<em>不怕同学是学霸，就怕学霸放书架<sup>[2]</sup></em> ”，我深感赞同。但是今年心血来潮，决定碰碰运气，于是开始进行建模速成<sup>[3]</sup>。赛前，我做好了充分的时间规划，假装自己是个高手。</p><p>最终赛时在两位👴的带领下按照计划，完成了由(&gt;60%)Google翻译构成的、图文并茂的《论真菌》<sup>[4]</sup>，通篇看起来极为唬人。当晚按时上交，直接倒头就睡，寒假学习之旅告一段落，实际上学了也没啥用。</p><hr><p>[2] <strong>书架</strong>：通”暑假“，韩相河校长精通山东某地口音，故其讲话声调抑扬顿挫</p><p>[3] <strong>建模速成</strong>：指观看Blibili《美赛速成》等培训视频(&lt;=2)；一方面配置SumatraPDF+WinEdt的LaTex论文环境、学习LaTex语法；一方面知乎研读往年O奖论文(&lt;=3)，并深感震撼于笔者出色的排版、绘图和美工技术；一方面观看动画片《<strong>喜羊羊与灰太狼之筐出胜利</strong>》，太精彩了属于是</p><p>[4] <strong>《论真菌》</strong>：赛时笔者队伍所选的A题为真菌相关的建模，论文具体标题为《XXXX模型：XXXXXX》，文采藻饰，臭词乱拽，看起来很JB高级实则都是屁话</p><h3><span id="春晚"> 春晚</span></h3><p>春晚小品就是个寄，不予评价。</p><h2><span id="三月"> 三月</span></h2><blockquote><p>开学，再见👩，动物园之旅，第一次感受海底捞</p></blockquote><p>海底捞确实服务比较嗨，但是那个生日歌尬也是尬</p><h2><span id="四月"> 四月</span></h2><blockquote><p>一些演出</p></blockquote><h3><span id="蓝莲花"> 蓝莲花</span></h3><p>Bass康复训练的曲目，没啥难度，全是loop😅，但是好久没上过台了，还是起到了丶热身的作用</p><h3><span id="take-on-me"> Take On me</span></h3><blockquote><p>大艺团合唱团最后的谢幕，只能说有点遗憾吧，几首阿卡到最后也没过一次bass solo</p></blockquote><p>6人的阿卡贝拉，排练了很久的一首快歌，从一开始的进度缓慢、产生的一些争执、再到最终演出时舞台的一些设施原因，整个过程并没有那么顺利，但是也是一次美好的经历，演出的效果也还不错</p><p><a href="https://www.bilibili.com/video/av9775509/">《Take On Me》</a></p><h3><span id="the-dawn"> The Dawn</span></h3><p>仍记得小时候听过亡灵序曲的钢琴版，当时深感震撼，如今复刻了一下也可以说是一种致敬</p><h3><span id="1丶惊喜"> 1丶惊喜</span></h3><p>Meritorious Winner，一个普通的早上醒来，闲的没事干查了查MCM结果，直接从床上坐了起来</p><p>只能说是参赛即退役，但没想到这竟是今年所有竞赛的绝唱😅</p><h2><span id="五月"> 五月</span></h2><blockquote><p>至今仍在后悔，悔于自己的废物，但后悔又有什么用呢？</p></blockquote><h3><span id="败走银川"> 败走银川</span></h3><blockquote><p>众所周知，ACPC<sup>[1]</sup>银川站就是个笑话<sup>[2]</sup>。在2021年之前，银川的牌子是公认含金量最低，也是最好拿牌的赛站，但是👴在这里打铁了</p></blockquote><p>”<em>金川银川，不如👴的铁川</em>。“</p><blockquote><p>2021/5/14</p></blockquote><p>青岛的晚上大雨滂沱，我匆匆从打印店打好最后的板子，登上了离开的出租车，与指环王，杰宝<sup>[3]</sup>踏上了离开的旅程。</p><p>由于一大早的飞机，所以我们在机场附近找个了私❤️人❤️影❤️院❤️勉强度过一夜，在那里第一次邂逅了情趣礼盒，三个血气方刚的年轻人表示十分的好奇。然后就是一顿瞎JB吹水，这毕竟是我们带学生涯的第一场现场赛，确实比较激动。</p><blockquote><p>2021/5/15</p></blockquote><p>飞机起飞，降落。</p><p>终于来到了一个新的城市，一出机门就能看到冒着红光的枸杞宣传板，城市文化了属于是。</p><p>随后就坐上了前往石嘴山(即宁理所在城市)的面包车，一路上的景色并不能算得上是什么景色，听说还有什么沙湖游的安排，比较激动，但是后面给取消了😅，现在搜了一下居然是AAAAA级景区，🐴的，亏了。</p><p>中午去学校报道，有两个个小改改<sup>[4]</sup>带着我们简单参观了一下，不得不说，确实挺大，学校就像在一个小岛上一样，周围被不知道是湖还是河的东西围起来，比较空旷加上风还挺大，所以感觉穿的还有点少，挺冷。后来领了个礼袋，里面除了参赛服就是一盒包装还算可以的枸杞，想了想我也用不上这玩意，正好带回家去。临走的时候看见有广播站的在那里拿着个麦克采访，心血来潮和个楞b一样就上去了，说了几句尬话加了个宁理之声广播站的vx润了。</p><p>下午热身赛，四道题全给A了，结果判题机炸了，一直不给判，榜也卡着，然后待了一会就润了，想着回去溜达溜达吃顿好的🤡。</p><p>晚上🔒棒子骨，恰羊蝎子，有点辣但属实嗨🤡，随后采购了点本地特产，提了一大兜子回了宾馆，静待第二天的正赛。</p><blockquote><p>2021/5/16</p></blockquote><p>早上满怀ak的斗志去了，坐下凳子，发现昨天热身赛榜上“<em>中国海洋大学 没有显卡能打ACM吗 rk7</em><sup>[5]</sup>”，有点激动，随后悄么声地把页面关掉，静静等待比赛开始。</p><p>比赛过程不想说了，大量的无用思考，全场最签到的一道题三个人九牛二虎之力读了无数遍都读清楚题意WA<sup>[6]</sup>32也没过，然后有道题卡了行末空格白WA了6，最后时间走完，都没来得及看字典树的简单题，铁了。</p><p><strong>我们达成了了几乎很难达成的银川打铁的成就</strong>，灰头土脸地逃回了青岛。</p><p><strong>除了自己菜，没什么好说的</strong>、距今已260天，警钟长鸣。</p><hr><p>[1] <strong>ACPC</strong>：指ACM-ICPC亚洲区域赛，ACM-ACPC为本场开幕式上发言人的逆天口语表达</p><p>[2] <strong>笑话</strong>：主办方<strong>宁夏理工学院</strong>乃我国西部枢纽，<a href="https://www.zhihu.com/question/459857672/answer/1891333630">如何看待 2021 年 ICPC 银川赛区主办方宁夏理工学院获得一金一银？</a>，有三人三机（比赛中应三人一机），更有沈阳站撤硕过题（<a href="https://www.zhihu.com/question/472409705/answer/2005883601">如何评价宁夏理工学院TS1队参加ICPC沈阳站，并在上厕所后做出了H题？</a>）, 不好评价</p><p>[3] <strong>指环王</strong>、<strong>杰宝</strong>：指两名队友，指环王网名脂环，小名我爹，杰宝取自于真名的尾字</p><p>[4] <strong>小改改</strong>：值小姐姐</p><p>[5] <strong>没有显卡能打ACM吗 rk7</strong>：前者指鄙队队名，后者指排名即rank</p><p>[6] <strong>WA</strong>：指Wrong Answer，对题目的错误提交，后跟数字表示错误提交的次数</p><h3><span id="摇滚之夜"> 摇滚之夜</span></h3><p>月末，乐队参加了我校吉他社的摇滚之夜，也算是为下个月的各大演出做了提前的一次彩排，效果不错，在这里不多赘述。</p><h2><span id="六月"> 六月</span></h2><blockquote><p>演出月、考试月、欧洲杯</p></blockquote><h3><span id="山东大学六月的风"> 山东大学“六月的风”</span></h3><blockquote><p>2021/06/06</p></blockquote><p>应邀参加山带（青岛）“六月的风”毕业歌会，整了个蓝莲花和 It’s my life，坐了五十分钟地铁终于到了山带，虽然在更偏远的郊区但是不得不说建的真是气派，宿舍条件也比我校好（基本没有比我住的地方烂的），里面整了个三层小商圈，卖的东西应有尽有属实看的眼馋。</p><p>这次歌会在一块小足球场举行，草皮也是真好，也可能是新建的但是确实好，比得上省体的那个足球公园刚建好的时候那草皮质量，那些设备确实弄的也挺高级，还有两块投屏，和网上直播显示的画面是同步的。下面也的场地也布置的挺好的，只能说是见了世面，毕竟咱也没来过这种露天的演出😅</p><p>演出开始。因为接设备需要时间，所以👴即兴发表了一段演讲，大有两校情谊长存之意，实属全是屁话。但是这段宣言全被直播出去了，实属被当场逮捕，现在搜一下录像看还是觉得很尬😅，演完了领了点饭钱润了。</p><p>演出效果还行，就是导播不大懂乐队可能，看别人演加州旅馆吉他solo的时候一直给节奏镜头😅😅😅</p><h3><span id="livehouse"> Livehouse</span></h3><blockquote><p>2021/06/12  DMC</p></blockquote><p>本来想的是个So Downtown<sup>[1]</sup>一样的带Livehouse，去了才发现是个小酒吧，但是那个音箱确实蛮好的，现场来了很多很好的朋友，气氛也挺嗨的，感受到了大合唱环节，在台上会进入一种忘我的境界，我很享受。在这个账号上我们发布了当天的<a href="https://space.bilibili.com/1655193427?from=search&amp;seid=9041123553554779016&amp;spm_id_from=333.337.0.0">录像</a>，再体味一遍还是不错的，这算是今年乐队正式演出的完美谢幕吧。(下半年因为大家的时间赶不到一起去，所以暂时停排)</p><hr><p>[1] <strong>So Downtown</strong>：青岛某知名Livehouse</p><h3><span id="欧洲杯"> 欧洲杯</span></h3><p>葡萄牙的比赛一场不落的看完，确实场面不太好看，踢德国那场也确实被干碎了，淘汰也是情理之中，没想到的是死亡之组法德葡八强全寄了😅</p><h3><span id="考试月"> 考试月</span></h3><p>经历了上次考试的惨痛教训，这次我又恢复了手写提纲的方法，修习了三大数学(即离散数学、线性代数、概率统计)的我最后从结果来看整体差强人意，就是课有点多，有几门摆烂了，复习的很少或者是没复习，果然寄了😅，但是整体而言较于上学期还是有了一定的进步</p><h2><span id="七月"> 七月</span></h2><blockquote><p>一些生活碎片</p></blockquote><h3><span id="体验生活"> 体验生活</span></h3><p>回家了一阵后在青岛体验生活，如题，不详述。</p><h3><span id="nba-final"> NBA Final</span></h3><p>伴随cp3和Suns一路走来，打到总决赛已经非常惊喜，虽然最后不敌，虽然有一些裁判和球员的其他原因，但是还是比较满足的，毕竟不可能有这么一帆风顺的旅程，<strong>失败永远是人生的主旋律</strong>，重头再来吧。</p><h3><span id="训练"> 训练</span></h3><p>在找到稳定的生活节奏前，按时打了Nowcoder多校的训练赛还有HDU的多校联赛，中间打了两三场百度⭐⭐，最后止步复赛。虽然每次都是一个受到打击的过程，但是这也帮助我更有效的认知自己的水平，但是回头来看，做题不补题相当于白打😅</p><h2><span id="八月"> 八月</span></h2><blockquote><p>一些锐评</p></blockquote><h3><span id="东京奥运"> 东京奥运</span></h3><p>虽然奥运会确实是那种让大家都能乐呵起来的大会，带🔥互相聊聊也是没啥毛病的，但是诸如朋友圈、微博等等社交平台上某些啥都不懂就在那乱评头论足蹭热度的我的评价是纯属啥b、、</p><h3><span id="s-birthday"> 👩’s Birthday</span></h3><blockquote><p>2021/08/14</p></blockquote><p>准备了挺久的👩生日如期而至，我只能说我准备的礼物确实是纯纯的别出心裁。</p><h3><span id="cr7"> CR7</span></h3><p>老特拉福德的宠儿重新回到了梦剧场，主队从JUV换到了MNU，虽然热血沸腾，但下半年的曼联似乎是纯纯的🤡。</p><h2><span id="九月"> 九月</span></h2><blockquote><p>开学啦、、</p></blockquote><h3><span id="web框架编程"> Web框架编程</span></h3><p>让我知道了不少高分低能神人的存在，确实不能理解😅😅，不会又不学就开始当乞丐我真笑嘻了😅</p><h3><span id="国赛"> 国赛</span></h3><p>建模国赛，狗都不打。本就不想参加但还是打扰了三天的作息😅😅</p><h3><span id="藏书票"> 藏书票</span></h3><p>修了一门叫做 大学美术鉴赏 的通识课，里面有一项作业是每周手画一张藏书票，我觉得还蛮有意思的，花上三个小时静心完成一幅作品确实已经很久没干过了，让我找回了小学初中的那种感觉。</p><h2><span id="十月"> 十月</span></h2><blockquote><p>旧的不去，新的不来</p></blockquote><h3><span id="旧手机"> 👋，旧手机</span></h3><blockquote><p>2021/10/10</p></blockquote><p>打了场CCPC网络赛，打完发现旧手机寄了。</p><p>这里谈一下我的旧手机，它是高考结束后来到的我的身边。仅仅7天，一次出门在外，追赶公交车的时候，眼见着我就要到公交车门前，发生了以下的默剧：</p><p>​<em>“！！！”（师傅开门，让我上车！）</em></p><p>​<em>“…”  (手指地面)</em></p><p>​<em>“？？！！” （开门啊？我要上车啊！）</em></p><p>​<em>“…”</em></p><p>​<em>“…！” （发现手机倒扣在地上）</em></p><p>​<em>“！！！&quot; (woc！正面碎烂了！)</em></p><p>​<em>“…” （公交车驶向远方）</em></p><p>大致的过程就是手机干碎了，公交车也跑了，达成双赢。由于手机是刚买的，问了一下修个屏要五伯，修两三次就够我再买一个了，于是我决定节俭下去不修，这就导致了一些和我共事的人见到我的手机都要啧啧称奇，这一用就是两年。</p><p>终于，在这天下午，我发现它的屏幕解锁后，只需要五秒，就会逐渐变黄，再过五秒，整个屏幕就变成了一些明暗交织的条带，如同<strong>天上的银河</strong>。</p><p>于是，我告别了它。</p><h3><span id="vlog横空出世"> Vlog👶🏻横空出世</span></h3><p>换了录像设备的我如题，剪了一个还不错的Vlog并且深深陶醉其中。</p><h2><span id="十一月"> 十一月</span></h2><blockquote><p>憧憬就是用来打破的</p></blockquote><h3><span id="edg"> EDG</span></h3><blockquote><p>2021/10/07</p></blockquote><p>EDG 3-2 战胜了DK，夺得了s11的冠军。</p><p>带着👩去操场感受线下观赛的热血，第一把赢了已经出乎意料，现场气氛来到了高潮，但是二三局的失利又让我有些失去信心，结果EDG居然没让淀粉失望，最终翻盘夺冠。</p><p>从s5开始当淀粉<sup>[1]</sup>，六年了，终于爽了一把，晚上刷了半天新闻才睡，纯嗨。</p><hr><p>[1] <strong>淀粉</strong>：指EDG的粉丝，EDG又被戏称“中国电竞”，故粉丝群体被称为淀粉即“电粉”</p><h3><span id="海超2"> 海超<sup>[2]</sup></span></h3><blockquote><p>[2] <strong>海超</strong>：海超，全称“中国海洋大学足球超级联赛”</p></blockquote><p>继刚打一场就胎死腹中的新生杯完成的帽子戏法给予我信心之后，我加入了院队，迎来了海超联赛。</p><p>作为从信院租借到管院的球员第一场面对旧主被干了个7-0😅，有点无力又深深忏悔于自己的失误。</p><p>紧接着在冷风吹着的小雨中迎来了第二场面对法学院的比赛，这场我改变了一些打法，想通过减少带球来增加一脚出球和无球跑动来扰乱对手的后防线，效果还是有一些的。最终4-2有惊无险，没有收获进球但是有一脚助攻，不过也是浪费了三次近在咫尺的良机，前两次是没有把握准第二点，中场前的一脚抽射也是因为左脚没有站稳导致力道不足，比较遗憾，但是那种享受比赛的过程还是令我热血澎湃，没想到的是在雨里懂了俩小时回去居然没有感冒，彳亍。</p><h3><span id="败走上海"> 败走上海</span></h3><blockquote><p>2021/11/28</p></blockquote><p>ICPC亚洲区预赛上海站，线上赛，就在信院打，最终打铁，没什么好说的，能力不足就是能力不足。</p><p>准备了很久的字符串没有派上用场，最终被两道DP<sup>[3]</sup>卡了，事实证明，做出这两道DP也没有什么用，毕竟上海站已经卷到了五题铜牌，还是需要努力，希望下次不留遗憾吧。</p><hr><p>[3] <strong>DP</strong>：Dynamic Programming，动态规划，一种算法</p><h2><span id="十二月"> 十二月</span></h2><blockquote><p>急</p></blockquote><h3><span id="ccsp"> CCSP</span></h3><p>参加了CCSP的分赛，最后10分钟过了B题30分，最后拿了个华东赛区rk71铜首<sup>[1]</sup>，校排第5。</p><p>虽然结果确实令我血压升高，这种铜首的事也能轮到我头上😅，但是整体而言对结果已经较为满意，毕竟卡了这么久，没啥毛病，继续努力吧。</p><hr><p>[1] <strong>铜首</strong>：指铜牌第一名，rk70银但rk71铜</p><h3><span id="软件工程"> 软件工程</span></h3><blockquote><p>永远不要和废物组队。</p></blockquote><p>这门课就像他的名字一样，平时是要进行小组分工完成一个项目作为评分指标，我们的项目是完成对图片的20种目标检测。</p><p>鄙组由5名成员组成，实则由两名成员组成，我和阿昊，他来完成模型的训练，我来完成GUI界面，说来也惭愧，我这部分的分工明显简单于他，他为这个项目确实付出了最多。</p><p>因为我最熟悉C++，于是就想把用pytorch训练的模型移植到通过 libtorch+opencv+msvc+qt 来实现GUI的编写，结果配了好几天的环境，发现模型部分功能的实现libtorch是不支持的，只能卷土重来。时间流逝，当我重新配好pyqt的环境开始动手编写时，距离考试周已经时日不多。</p><p>剩下几位b用没有，一边说着不会，“我也知道，我要是会我肯定干点什么”之类的屁话，一遍p也不学，开始了自己的期末复习。</p><p>这令我十分烦躁，我是不是不复习啊，我他吗是不是就是纯雷锋非得做好事啊，最后项目我们俩干了半天，到头来最后一个个的都比我们分高或者和我们一样，凭什么呢，他们配吗？于是就剩一天的时候，我们甩了脸，让他们学着干一些事情，比如配置服务器这种简单的事情。虽然心里想着他们肯定干不完，但是至少也得出点力，于是把任务布置了下去，还抱有一丝念想。结果是：——<strong>在一整天的时间，有人配了一个小时没配明白就放弃了，有的人根本没怎么看</strong>。</p><p>在这个过程中，要么是像巨婴一样问低级问题，要么就是开摆，连搜都懒得搜。不想再做评价了。</p><p>最后项目的结果是：我俩完成了分内的工作，但是项目的完成度比目标来说只达成了60%，勉强及格罢。</p><blockquote><p>引用 <em>Eric Steven Raymond</em> 在《提问的智慧》中的话结尾：</p><p><em>我们只是毫无歉意地鄙视那些提问前不愿思考、不做功课的人。这种人就像时间黑洞一样，只知道索取，不愿意付出，他们在浪费我们时间，而这些时间我们本可用于其他更有趣的问题或更值得回答的人身上。我们将这种人叫做 <strong>loser</strong>。</em></p></blockquote><h2><span id="总结"> 总结</span></h2><blockquote><p>非常简略的总结</p></blockquote><h3><span id="迷茫"> 迷茫</span></h3><p>迷茫于自己的未来，迷茫于自己的当下，迷茫于自己的选择，迷茫于对错。</p><h3><span id="轮廓"> 轮廓</span></h3><p>我似乎渐渐摸清了不远的未来的轮廓，对自己轮廓的描绘也越来越清晰，跟不同人之间的轮廓的区分。</p><h3><span id="展望"> 展望</span></h3><p>克制，规律的作息，扎实地前进。</p><blockquote><p>很荣幸你能够忍受着我抽象的文字、像怨妇一样的抱怨、和一些难听的诋毁看到这里，谢谢你我的朋友，2022新年快乐。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h1&gt;&lt;span id=&quot;记念二〇二一&quot;&gt; 记</summary>
      
    
    
    
    <category term="LIFE" scheme="https://maskros.top/categories/LIFE/"/>
    
    
    <category term="Life" scheme="https://maskros.top/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 122 (Div.2)</title>
    <link href="https://maskros.top/post/codeforces/cf%20Edu%20122.html"/>
    <id>https://maskros.top/post/codeforces/cf%20Edu%20122.html</id>
    <published>2022-01-31T10:00:00.000Z</published>
    <updated>2022-02-15T10:05:03.753Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="educational-codeforces-round-122-rated-for-div-2"> Educational Codeforces Round 122 (Rated for Div. 2)</span></h1><blockquote><p>vp</p></blockquote><h2><span id="a_div_7"> A_Div_7</span></h2><blockquote><p>签</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void solve() {    int n; cin &gt;&gt; n;    if(n % 7 == 0) cout &lt;&lt; n &lt;&lt; '\n';    else{        if(n &gt;= 990) cout &lt;&lt; 994 &lt;&lt; '\n';        else {            n -= n%10;            while(n % 7 != 0) n++;            cout &lt;&lt; n &lt;&lt; '\n';        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="b_minority"> B_Minority</span></h2><blockquote><p>签</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void solve() {    string s; cin &gt;&gt; s;    int one = 0, zero = 0, ans = 0;    rep(i, 0, s.size()){        if(s[i] == '0') zero ++; else one ++;        ans = (one == zero)? ans :  min(one, zero);     }    cout &lt;&lt; ans &lt;&lt; '\n';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="c_kill_-the_monster"> C_Kill_ the_Monster</span></h2><blockquote><p>枚举k的分配种类即可</p><p><code>ceil(double x)</code> ：double 类型向上取整</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void solve() {    double hc, dc, hm, dm, k, w, a;    cin &gt;&gt; hc &gt;&gt; dc &gt;&gt; hm &gt;&gt; dm &gt;&gt; k &gt;&gt; w &gt;&gt; a;    rep(i, 0, k+1){        double hhc = 1.0 * i * a + hc;        double ddc = 1.0 * (k - i) * w + dc;        if(ceil(hm / ddc) &lt;= ceil(hhc / dm)){            cout &lt;&lt; "YES\n";            return ;         }    }    cout &lt;&lt; "NO\n";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="d_make_them_equal-dp"> D_Make_Them_Equal (dp)</span></h2><blockquote><p>题意：</p><p>给定一个长为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 的数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span>，初值全为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span> ，你可以做这样的操作：选择 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.65952em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">i</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">x</span></span></span></span> (x&gt;0) ，然后使 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mo>⌊</mo><mfrac><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><mrow><mi>x</mi></mrow></mfrac><mo>⌋</mo></mrow><annotation encoding="application/x-tex">a_i = a_i + \lfloor\frac{a_i}{x}\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.095em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mopen">⌊</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">x</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.4149999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></p><p>如果操作后 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i = b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> ，你将得到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">c</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 的奖金，你需要在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> 次操作内使得奖金最大化，输出奖金的最大值。规定  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>b</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><mi>e</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">1 \leq b_i\leq 1e3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mrel">≤</span><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">≤</span><span class="mord mathrm">1</span><span class="mord mathit">e</span><span class="mord mathrm">3</span></span></span></span> , <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>c</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><mi>e</mi><mn>6</mn></mrow><annotation encoding="application/x-tex">1\leq c_i \leq 1e6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span><span class="mrel">≤</span><span class="mord"><span class="mord mathit">c</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">≤</span><span class="mord mathrm">1</span><span class="mord mathit">e</span><span class="mord mathrm">6</span></span></span></span></p><p>思路：</p><p>从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">1</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 的次数是固定的，根据 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 的范围，我们可以打表预处理每个数的操作次数，然后考虑01背包，<code>dp[i][j]</code>表示前 i 个耗费为 j 的最大奖金，但是开1e6肯定会T，观察打表结果发现最大值为 12，这样可以优化一下dp的范围。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> pre<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 1 -&gt; 1000 打表 max = 12</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rep</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> i <span class="token operator">+</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span> pre<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token function">min</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">,</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">12005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&gt;=</span> <span class="token number">12</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">rep</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">red</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ans <span class="token operator">=</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">Educational Codeforces Round 122 (Div.2)</summary>
    
    
    
    <category term="SOLUTIONS" scheme="https://maskros.top/categories/SOLUTIONS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="solutions" scheme="https://maskros.top/tags/solutions/"/>
    
    <category term="codeforces" scheme="https://maskros.top/tags/codeforces/"/>
    
    <category term="dp" scheme="https://maskros.top/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>2022牛客寒假算法基础集训营2</title>
    <link href="https://maskros.top/post/nowcoder/2022winter/round2.html"/>
    <id>https://maskros.top/post/nowcoder/2022winter/round2.html</id>
    <published>2022-01-30T13:30:50.000Z</published>
    <updated>2022-02-24T06:40:23.350Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="2022牛客寒假算法基础集训营2"> 2022牛客寒假算法基础集训营2</span></h1><blockquote><p>AC  6 / 12 我是纯废物</p></blockquote><h2><span id="a-小沙的炉石二分结论"> *A 小沙的炉石(二分/结论)</span></h2><blockquote><p>题意：</p><p>小沙当前的手上有n张法术进攻牌，每张牌都会消耗一点法力，造成一点基础伤害，有m张法术回复牌，不需要消耗法力值，每次可以恢复一点法力。小沙一开始有一点法力，法力没有上限。法术进攻牌的伤害值=当前出的是第几张牌。k次询问，每次询问一个血量x，问能否做到伤害刚好等于血量值，即刚好斩杀。</p><p>题解：二分是朴素写法，结论也很好证明，证明如下：</p><p>首先我们要证明一个点，对于使用攻击牌是一个定值的话，我们的<strong>攻击范围是一个区间上的任意的伤害值</strong>：当我们的攻击牌使用次数为a，蓝量使用牌为b时，对于a&lt;=b+1，我们的最小攻击一定为<br>攻，回复，攻，回复……直到用完所以攻击后补全回复。可得等差数列∑_1^a2∗i−1，求和可得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">a^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 。在最小攻击的基础上，我们可以将任意一个攻击牌的位置和他后面的回复牌的位置交换，使得伤害+1。最后可得最大伤害为：回复，回复……攻，攻，攻……最大，<br>可得等差数列∑_1^ab+i ,求和可得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>b</mi><mo>+</mo><mfrac><mrow><mi>a</mi><mo>(</mo><mi>a</mi><mo>+</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">ab+\dfrac{a(a+1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.427em;"></span><span class="strut bottom" style="height:2.113em;vertical-align:-0.686em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit">b</span><span class="mbin">+</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">2</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">a</span><span class="mopen">(</span><span class="mord mathit">a</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void solve() {    ll n, m, k, x, q;    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;    n = min(n, m + 1);    for (int i = 0; i &lt; k; i++) {        cin &gt;&gt; x;        q = sqrt(x);        if (q &gt; n) q = n;        if (x &lt;= q * (2 * m + q + 1) / 2) puts("YES");        else puts("NO");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="c-小沙的杀球"> C 小沙的杀球</span></h2><blockquote><p>水题</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void solve() {    ll x,a,b; cin&gt;&gt;x&gt;&gt;a&gt;&gt;b;    int ans=0;    string s; cin&gt;&gt;s;    int len=s.length();    rep(i,0,len){        if(s[i]=='0') x+=b;        else{            if(x&gt;=a) {x-=a; ans++;}            else x+=b;        }    }    cout&lt;&lt;ans;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="e-小沙的长路-图论欧拉图"> *E 小沙的长路 (图论/欧拉图)</span></h2><blockquote><p>题意：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>​ 阶竞赛图(可以自定义每条边的方向)，每条边只能走一次，询问最长路径的最小值和最大值</p><p>题解：</p><p>最长路的最小值：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span>。如果图上有环，那么我们肯定能尽可能多的走环，这样的话我一定会比我不走环更长，所以我们构造的图要尽可能的没环。在没环的情况下，我们只会经过每个点各一次，所以总长度是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span></p><p>最长路的最大值：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 为奇数：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">(n-1)n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mord mathit">n</span><span class="mord mathrm">/</span><span class="mord mathrm">2</span></span></span></span> ; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 为偶数：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo>−</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo>)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n(n-1)/2-(n-2)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mord mathrm">/</span><span class="mord mathrm">2</span><span class="mbin">−</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">2</span><span class="mclose">)</span><span class="mord mathrm">/</span><span class="mord mathrm">2</span></span></span></span> 。我们考虑尽可能的将每一条路都走遍，我们可以理解为对一个完全图进行<strong>删边</strong>，我们需要删尽可能少的边，从而使他能够从头走到尾，也就是构造出一个<strong>欧拉回路</strong>。又由欧拉回路的定义可知，我们需要将每个点的<strong>出入度控制为偶数即可组成欧拉回路</strong>，所以奇偶特判即可。 (TIPS: 删去 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo>)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">(n-2)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">2</span><span class="mclose">)</span><span class="mord mathrm">/</span><span class="mord mathrm">2</span></span></span></span> 即为使原图仅有两个奇度顶点构成欧拉图)</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void solve() {    ll n; cin&gt;&gt;n;    ll mx,mn;    mn=n-1;    if(n&amp;1) {         mx=(n-1)*n/2;       }else{        mx=n*(n-1)/2-(n-2)/2;    }    cout&lt;&lt;mn&lt;&lt;" "&lt;&lt;mx;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="f-小沙的算数-模拟桶逆元"> F 小沙的算数 (模拟/桶/逆元)</span></h2><blockquote><p>题意：给定仅有+和×的算式，q次询问，每次将第x个算数变为y，问每次修改后原式的值为多少？答案对1e9+7取模</p><p>题解：由于运算有优先级，每个+分开各个区间，提前将区间内的信息整合到数组里保存，然后进行计算即可，需要用逆元处理除法</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a[maxn], pos[maxn];ll res[maxn];ll quickpow(ll a, ll b) {    ll ans = 1;    ll res = a % mod;    while (b) {        if (b &amp; 1)            ans = ans * res % mod;        b &gt;&gt;= 1;        res = res * res % mod;    }    return ans % mod;}ll inv(ll x) {    return quickpow(x, mod - 2);}void solve(){    int n, q;    cin &gt;&gt; n &gt;&gt; q;    char c;    int tmppos = 1;    rep(i, 1, n) {        cin &gt;&gt; c;        if (i == n - 1) {            if (c == '+') {                pos[i] = tmppos;                pos[i + 1] = tmppos + 1;            } else {                pos[i] = tmppos;                pos[i + 1] = tmppos;            }        } else {            if (c == '+') {                pos[i] = tmppos;                tmppos++;            } else {                pos[i] = tmppos;            }        }    }    ll ans = 0;    ll tmp = 1;    tmppos = 1;    rep(i, 1, n + 1) {        cin &gt;&gt; a[i];        if (pos[i] == tmppos) {            tmp = (tmp * (a[i] % mod)) % mod;        } else {            ans = (ans + tmp) % mod;            res[tmppos] = tmp;            tmp = a[i] % mod;            tmppos++;        }    }    if (tmppos == pos[n]) {        ans = (ans + tmp) % mod;        res[tmppos] = tmp;    }    int x, y;    rep(i, 0, q) {        cin &gt;&gt; x &gt;&gt; y;        tmppos = pos[x];        ans = (ans - res[tmppos] + mod) % mod;        res[tmppos] = (res[tmppos] * inv(a[x] * 1ll) % mod * y) % mod;        ans = (ans + res[tmppos]) % mod;        a[x] = y;        cout &lt;&lt; ans &lt;&lt; endl;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="h-小沙的数数-位运算"> H 小沙的数数 (位运算)</span></h2><blockquote><p>题意：</p><p>有一个a数组，我们已知他的长度为n，a[+]的和为m，请问如果我们想要a[⊕]的值最大，数组a在满足a[+]=m时有多少种情况？我们定义a[+]指a1+a2…ana_1+a_2…a_na1+a2…an的值；a[⊕]指a1a_1a1⊕a2a_2a2⊕a3a_3a3…an…a_n…an的值，a数组全部为非负整数</p><p>题解：</p><p>由于在二进制拆位最后同位情况下如果存在不止一个一，那么异或之后的贡献一定小于我们的费用，所以我们要保证对于每一位的个数要么是0，要么是1，这样的话才能保证a[<sup>]=a[+]，随后我们发现对于每一位来说，他们均不相互干扰，那么他们可能产生的情况便都是n种，所以我们只需要求二进制下m有多少个1，随后求n</sup>x次方即可</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int foo(ll x) { //计算二进制有多少个1    int count = 0;    while (x) {        count++;        x = x &amp; (x - 1);    }    return count;}ll quickpow(ll a, ll b) {    ll ans = 1;    ll res = a % mod;    while (b) {        if (b &amp; 1)            ans = ans * res % mod;        b &gt;&gt;= 1;        res = res * res % mod;    }    return ans % mod;}void solve() {    ll n,m; cin&gt;&gt;n&gt;&gt;m;    int base=foo(m);    ll ans = 0;    if(base==1) cout&lt;&lt;n%mod;    else cout&lt;&lt;quickpow(n,base)%mod;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="i-小沙的构造"> I 小沙的构造</span></h2><blockquote><p>构造题，贪心构造即可</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string all="\"!\'*+-.08:=^_WTYUIOAHXVM|"; //25string db="&lt;&gt;\\/[]{}()"; //10char s[maxn];void solve() {    int n,m; cin&gt;&gt;n&gt;&gt;m;    if(m==36 || n&lt;m) {cout&lt;&lt;-1; return;}    int have=0;    int dbpos=0,allpos=0;    bool add=true;    rep(i,0,n/2){        if(have&lt;m){            if(dbpos&lt;10 &amp;&amp; have+2&lt;m){                s[i]=db[dbpos];                dbpos++;                s[n-1-i]=db[dbpos];                  dbpos++;                have+=2;            }else{                s[i]=all[allpos];                s[n-1-i]=all[allpos];                have++;                if(have&lt;m) allpos++;            }        }else{            s[i]=all[allpos];            s[n-1-i]=all[allpos];            add=false;        }    }    if(n&amp;1){        s[n/2]=all[allpos];        if(add) have++;    }     if(have&lt;m) {cout&lt;&lt;-1; return;}    rep(i,0,n) cout&lt;&lt;s[i];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="k-小沙的步伐"> K 小沙的步伐</span></h2><blockquote><p>水题</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void solve() {    string s;    cin&gt;&gt;s;    int len=s.length();    int a[15];    mem(a,0);    rep(i,0,len){        if(s[i]=='5'){            continue;        }else{            a[5]++;            int tmp=int(s[i]-'0');            a[tmp]++;        }    }    rep(i,1,10){        cout&lt;&lt;a[i]&lt;&lt;" ";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>待补…</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h1&gt;&lt;span id=&quot;2022牛客寒假算法</summary>
      
    
    
    
    <category term="SOLUTIONS" scheme="https://maskros.top/categories/SOLUTIONS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="solutions" scheme="https://maskros.top/tags/solutions/"/>
    
    <category term="思维" scheme="https://maskros.top/tags/%E6%80%9D%E7%BB%B4/"/>
    
    <category term="二分" scheme="https://maskros.top/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="位运算" scheme="https://maskros.top/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    <category term="图论" scheme="https://maskros.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="nowcoder" scheme="https://maskros.top/tags/nowcoder/"/>
    
    <category term="逆元" scheme="https://maskros.top/tags/%E9%80%86%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 768 (Div.2)</title>
    <link href="https://maskros.top/post/codeforces/cf%20768.html"/>
    <id>https://maskros.top/post/codeforces/cf%20768.html</id>
    <published>2022-01-29T10:30:00.000Z</published>
    <updated>2022-01-29T13:27:03.905Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1><span id="codeforces-round-768-div2"> Codeforces Round #768 (Div.2)</span></h1><blockquote><p>康复训练第二场cf</p></blockquote><h2><span id="a_min_max_swap"> A_Min_Max_Swap</span></h2><blockquote><p>水题，模拟</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span> cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>b<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="b_fun_with_even_subarrays"> B_Fun_with_Even_Subarrays</span></h2><blockquote><p>题意：</p><p>给一个序列，规定操作：选择起点为<code>l</code>将长为<code>k</code>的序列用它相邻的下一个长为<code>k</code>的序列覆盖，问最少经过多少次操作才能使序列中所有数相同？</p><p>思路：</p><p>同样粗略地模拟一下，从序列尾部向前反推即可</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span> cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sd<span class="token operator">=</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">red</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>sd<span class="token punctuation">)</span><span class="token punctuation">{</span> len<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>                i<span class="token operator">=</span>i<span class="token operator">-</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                len<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="c_and_matching"> C_And_Matching</span></h2><blockquote><p>题意：</p><p>给定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>, 要求将 0,1,2,…,n-1 构造出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mord mathrm">/</span><span class="mord mathrm">2</span></span></span></span> 对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo>]</mo></mrow><annotation encoding="application/x-tex">[a_i,b_i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">]</span></span></span></span>，满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msubsup><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">&amp;</mi><msub><mi>b</mi><mi>i</mi></msub><mo>=</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">\sum^{n/2}_{i=1}a_i\&amp; b_i=k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.0448em;"></span><span class="strut bottom" style="height:1.321664em;vertical-align:-0.27686399999999994em;"></span><span class="base textstyle uncramped"><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.27686399999999994em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.5198em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mord mathrm">/</span><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathrm">&amp;</span><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>​</p><p><strong>规定</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 是 2 的幂，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>k</mi><mo>&lt;</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0&lt;k&lt;n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mrel">&lt;</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mrel">&lt;</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span></p><p>思路：</p><p>一开始因为读题漏掉了规定条件导致一时没法做，一定要仔细读题。</p><p>可以找到规律：序列首尾依次做AND操作一定为0，不妨将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span> 相与，因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span> 必定所有位都为1，所以与值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>。然后再首尾依次相与，原本理应与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> 相与的数使它与0相与即可。特别的，当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k=n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mrel">=</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span>时，特殊考虑一种组合方法即可。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll n<span class="token punctuation">,</span>k<span class="token punctuation">;</span> cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">4</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">eif</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">-</span><span class="token number">3</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">||</span> i <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">||</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>k<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!=</span>i <span class="token operator">&amp;&amp;</span> k<span class="token operator">!=</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                    cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="d_range_and_partition"> D_Range_and_Partition</span></h2><blockquote><p>题意：</p><p>给定一个长为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">n</span></span></span></span> 的序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> ，找到一系列区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[x,y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathit">x</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span> (x&lt;=y)，将序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span></span></span></span> 分为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> 个子序列，要求每个序列中在区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[x,y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">[</span><span class="mord mathit">x</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span> 的数严格大于在区间外的数，要求最小化 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>−</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">y-x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.58333em;"></span><span class="strut bottom" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mbin">−</span><span class="mord mathit">x</span></span></span></span></p><p>规定 k&lt;=n&lt;=<strong>2e5</strong></p><p>思路：</p><p>由题可知，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span> 段中每一段在区间的数的数量至少比不在区间内的数的数量多1, 并且只要整个数组满足整个条件那么一定存在将数组分成k段仍然满足的方法。判断条件：设整个数组中在区间内的数的数量为 <code>num</code>，不在区间内的为<code>n-num</code>。只要<code>num-(n-num)&gt;=k</code>即满足条件。<br>于是我们枚举区间的左边界，二分求解满足条件的最小右边界即可。</p></blockquote><p>:::tip</p><p>当发现 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>−</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">y-x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.58333em;"></span><span class="strut bottom" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mbin">−</span><span class="mord mathit">x</span></span></span></span>、最小化差值对象、数据范围为<strong>2e5</strong>时，我们首先考虑：</p><p>（1）尺取法(双指针) （2）结论题 （3）枚举一端，另一端 log/O(1) 复杂度</p><p>:::</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxn</span> <span class="token expression"><span class="token number">200005</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>    <span class="token function">mem</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         vis<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//计数</span>    <span class="token punctuation">}</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>vis<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//前缀和统计区间计数</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//枚举区间左边界</span>        <span class="token keyword">int</span> l<span class="token operator">=</span>i<span class="token punctuation">,</span> r<span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span>vis<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>vis<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token punctuation">(</span>n<span class="token operator">-</span>num<span class="token punctuation">)</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 不存在以i为左边界的合法区间</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>            num<span class="token operator">=</span>vis<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">-</span>vis<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//区间范围内的数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token punctuation">(</span>n<span class="token operator">-</span>num<span class="token punctuation">)</span><span class="token operator">&gt;=</span>k<span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">-</span>i<span class="token operator">&lt;</span>y<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span> x<span class="token operator">=</span>i<span class="token punctuation">;</span> y<span class="token operator">=</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>y<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> l<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> l<span class="token operator">=</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>l<span class="token punctuation">,</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>l<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> cnt1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> cnt2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">&gt;=</span>x <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">&lt;=</span>y<span class="token punctuation">)</span> cnt1<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> cnt2<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cnt1<span class="token operator">&lt;=</span>cnt2<span class="token punctuation">)</span> r<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout<span class="token operator">&lt;&lt;</span>l<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>r<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>反思：一场不如一场，寄</p></blockquote>]]></content>
    
    
    <summary type="html">Codeforces Round 768 (Div.2)</summary>
    
    
    
    <category term="SOLUTIONS" scheme="https://maskros.top/categories/SOLUTIONS/"/>
    
    
    <category term="ACM" scheme="https://maskros.top/tags/ACM/"/>
    
    <category term="solutions" scheme="https://maskros.top/tags/solutions/"/>
    
    <category term="codeforces" scheme="https://maskros.top/tags/codeforces/"/>
    
    <category term="思维" scheme="https://maskros.top/tags/%E6%80%9D%E7%BB%B4/"/>
    
    <category term="构造" scheme="https://maskros.top/tags/%E6%9E%84%E9%80%A0/"/>
    
    <category term="二分" scheme="https://maskros.top/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
</feed>
