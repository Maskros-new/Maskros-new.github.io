{"title":"kmp专题训练","uid":"eb0105647eb3a218c386b75ad79d5f5a","slug":"algorithm/exercise/kmp_problem","date":"2021-11-26T13:59:50.000Z","updated":"2021-11-27T04:15:38.843Z","comments":true,"path":"api/articles/algorithm/exercise/kmp_problem.json","keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css\"><h1 id=\"kmp-ekmp-专题训练\"><a href=\"#kmp-ekmp-专题训练\" class=\"headerlink\" title=\"kmp/ekmp 专题训练\"></a>kmp/ekmp 专题训练</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>🐴糙人蠢凑合看</p></blockquote>\n<h2 id=\"0x01-剪花布条-HDU-2087\"><a href=\"#0x01-剪花布条-HDU-2087\" class=\"headerlink\" title=\"0x01 剪花布条 HDU-2087\"></a>0x01 剪花布条 HDU-2087</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://vjudge.net/problem/HDU-2087\">link</a></p>\n<p>纯纯kmp裸题，不可重叠计数 </p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;bits&#x2F;stdc++.h&gt;\nusing namespace std;\nvoid kmp_pre(string p, int next[])\n&#123;\n    int i, j;\n    j &#x3D; next[0] &#x3D; -1;\n    i &#x3D; 0;\n    while (i &lt; p.length())\n    &#123;\n        while (-1 !&#x3D; j &amp;&amp; p[i] !&#x3D; p[j])\n            j &#x3D; next[j];\n        next[++i] &#x3D; ++j;\n    &#125;\n&#125;\nint kmp_Count(string x, string y, int next[])\n&#123; \n    int i, j;\n    int ans &#x3D; 0;\n    kmp_pre(x, next);\n    i &#x3D; j &#x3D; 0;\n    while (i &lt; y.length())\n    &#123;\n        while (-1 !&#x3D; j &amp;&amp; y[i] !&#x3D; x[j])\n            j &#x3D; next[j];\n        i++;\n        j++;\n        if (j &gt;&#x3D; x.length())\n        &#123;\n            ans++;\n            j &#x3D; 0;       &#x2F;&#x2F;不可重叠计数\n        &#125;\n    &#125;\n    return ans;\n&#125;\nint main()&#123;\n    string a,b;\n    int nxt[1005];\n    while(1)&#123;\n        cin&gt;&gt;a;\n        if(a&#x3D;&#x3D;&quot;#&quot;) break;\n        else&#123;\n            cin&gt;&gt;b;\n            memset(nxt,0,b.length()+1);\n            int ans&#x3D;kmp_Count(b,a,nxt);\n            cout&lt;&lt;ans&lt;&lt;endl;            \n        &#125;\n    &#125;    \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"0x02-Secret-HDU-6153\"><a href=\"#0x02-Secret-HDU-6153\" class=\"headerlink\" title=\"0x02 Secret HDU-6153\"></a>0x02 Secret HDU-6153</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://vjudge.net/problem/HDU-6153\">link</a></p>\n<p>题意：</p>\n<p>给两个串s1,s2，求s2所有的后缀子串的长度乘在主串s1中出现的次数之和</p>\n<p>解法：</p>\n<p>挨个枚举后缀是🐷b做法，我们可以先把字符串<strong>翻转</strong>，这样后缀变前缀，就来到了我们熟悉的kmp匹配环节</p>\n<p>解法一：exkmp</p>\n<p>翻转后发现这不就正好利用extend[]数组的定义直接求解，做一遍ekmp，遍历extend[]数组，对每个值做 <code>(1+entend[i])*entend[i]&gt;&gt;1</code> 处理，全部加和即为答案</p>\n<p>解法二：kmp</p>\n<p>利用对next[]数组的理解，暂时鸽了，因为想了很久没想明白</p></blockquote>\n<p>解法一： ekmp </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>猛wa之后给了我深刻的教训：数组开 longlong😅😅</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;bits&#x2F;stdc++.h&gt;\nusing namespace std;\nconst int mod &#x3D; 1000000007;\n#define ll long long\n#define maxn 1000005\n#define rep(i,x,y) for(int i&#x3D;x;i&lt;y;i++)\nll nxt[maxn], extend[maxn];\nvoid ekmp_pre(string x, ll next[])\n&#123;\n    int m &#x3D; x.length();\n    next[0] &#x3D; m;\n    int j &#x3D; 0;\n    while (j + 1 &lt; m &amp;&amp; x[j] &#x3D;&#x3D; x[j + 1])\n        j++;\n    next[1] &#x3D; j;\n    int k &#x3D; 1;\n    for (int i &#x3D; 2; i &lt; m; i++)\n    &#123;\n        int p &#x3D; next[k] + k - 1;\n        int L &#x3D; next[i - k];\n        if (i + L &lt; p + 1)\n            next[i] &#x3D; L;\n        else\n        &#123;\n            j &#x3D; max(0, p - i + 1);\n            while (i + j &lt; m &amp;&amp; x[i + j] &#x3D;&#x3D; x[j])\n                j++;\n            next[i] &#x3D; j;\n            k &#x3D; i;\n        &#125;\n    &#125;\n&#125;\nll ekmp(string x, string y, ll next[], ll extend[])\n&#123;\n    ekmp_pre(x, next);\n    int j &#x3D; 0;\n    ll ret &#x3D; 0;\n    int m &#x3D; x.length(), n &#x3D; y.length();\n    while (j &lt; n &amp;&amp; j &lt; m &amp;&amp; x[j] &#x3D;&#x3D; y[j])\n        j++;\n    extend[0] &#x3D; j;\n    int k &#x3D; 0;\n    for (int i &#x3D; 1; i &lt; n; i++)\n    &#123;\n        int p &#x3D; extend[k] + k - 1;\n        int L &#x3D; next[i - k];\n        if (i + L &lt; p + 1)\n            extend[i] &#x3D; L;\n        else\n        &#123;\n            j &#x3D; max(0, p - i + 1);\n            while (i + j &lt; n &amp;&amp; j &lt; m &amp;&amp; y[i + j] &#x3D;&#x3D; x[j])\n                j++;\n            extend[i] &#x3D; j;\n            k &#x3D; i;\n        &#125;\n    &#125;\n    rep(i, 0, n)\n    &#123;\n        ret &#x3D; (ret % mod + (((1 + extend[i])* extend[i])&gt;&gt;1) % mod) % mod;\n    &#125;\n    return ret;\n&#125;\nint main()\n&#123;\n    int t;\n    ios::sync_with_stdio(false);\n    cin &gt;&gt; t;\n    while (t--)\n    &#123;\n        string s, p;\n        cin &gt;&gt; s &gt;&gt; p;\n        reverse(s.begin(), s.end());\n        reverse(p.begin(), p.end());\n        memset(nxt, 0, p.length() + 1);\n        memset(extend, 0, s.length() + 1);\n        ll ans;\n        ans&#x3D;ekmp(p, s, nxt, extend);\n        cout&lt;&lt;ans&lt;&lt;endl;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解法二：kmp</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 寄<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"0x03-Cow-Patterns-POJ-3167\"><a href=\"#0x03-Cow-Patterns-POJ-3167\" class=\"headerlink\" title=\"0x03 Cow Patterns POJ-3167\"></a>0x03 Cow Patterns POJ-3167</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://vjudge.net/problem/POJ-3167\">link</a> 牛题</p>\n<p>题意：</p>\n<p><strong>模式串可以浮动的模式匹配问题</strong></p>\n<p>给出模式串的相对大小顺序，需要找出在主串中模式串的匹配次数和起始位置</p>\n<p>样例：</p>\n<p>S: 5 6 2 10 10 7 3 2 9  </p>\n<p>P: 1 4 4 3 2 1</p>\n<p>故 2 10 10 7 3 2 符合要求，输出为 1 3</p>\n<p>解法： KMP+前缀和</p>\n<p>统计比当前数小，和于当前数相等的，然后进行kmp</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;POJ 3167\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;vector&gt;\nusing namespace std;\nconst int MAXN &#x3D; 100005;\nconst int MAXM &#x3D; 25005;\n\nint a[MAXN];       &#x2F;&#x2F; 存放主串\nint b[MAXM];       &#x2F;&#x2F; 存放模式串\nint as[MAXN][30];  &#x2F;&#x2F; as[i][j] &#x3D; k表示0 - i位中有k个数字j\nint bs[MAXM][30];  &#x2F;&#x2F; bs[i][j] &#x3D; k表示0 - i位中有k个数字j\nint next[MAXM];    &#x2F;&#x2F; 存放模式串失配时的移动位数\nvector&lt;int&gt; ans;   &#x2F;&#x2F; 存放结果\nint n, m, s;\n\nvoid Init() &#123;\n    ans.clear();\n    memset(as, 0, sizeof(as));\n    memset(bs, 0, sizeof(bs));\n    as[1][a[1]] &#x3D; 1;\n    bs[1][b[1]] &#x3D; 1;\n    for (int i &#x3D; 2; i &lt;&#x3D; n; ++i) &#123;\n        memcpy(as[i], as[i - 1], sizeof(as[0]));\n        ++as[i][a[i]];\n    &#125;\n    for (int i &#x3D; 2; i &lt;&#x3D; m; ++i) &#123;\n        memcpy(bs[i], bs[i - 1], sizeof(bs[0]));\n        ++bs[i][b[i]];\n    &#125;\n&#125;\n\nvoid GetNext() &#123;\n    memset(next, 0, sizeof(next));\n    int i &#x3D; 1, j &#x3D; 0, k &#x3D; 0;\n    next[1] &#x3D; 0;\n    while (i &lt;&#x3D; m) &#123;\n        int si &#x3D; 0, sj &#x3D; 0, ei &#x3D; 0, ej &#x3D; 0;\n        for (k &#x3D; 1; k &lt; b[i]; ++k)\n            si +&#x3D; bs[i][k] - bs[i - j][k];\n        ei &#x3D; bs[i][k] - bs[i - j][k];\n        for (k &#x3D; 1; k &lt; b[j]; ++k)\n            sj +&#x3D; bs[j][k];\n        ej &#x3D; bs[j][k];\n        if (0 &#x3D;&#x3D; j || (si &#x3D;&#x3D; sj &amp;&amp; ei &#x3D;&#x3D; ej))\n            next[++i] &#x3D; ++j;\n        else\n            j &#x3D; next[j];\n    &#125;\n&#125;\n\nvoid Kmp() &#123;\n    int i &#x3D; 1, j &#x3D; 1, k &#x3D; 1;\n    while (i &lt;&#x3D; n) &#123;\n        int si &#x3D; 0, sj &#x3D; 0, ei &#x3D; 0, ej &#x3D; 0;\n        for (k &#x3D; 1; k &lt; a[i]; ++k)\n            si +&#x3D; as[i][k] - as[i - j][k];\n        ei &#x3D; as[i][k] - as[i - j][k];\n        for (k &#x3D; 1; k &lt; b[j]; ++k)\n            sj +&#x3D; bs[j][k];\n        ej &#x3D; bs[j][k];\n        if (0 &#x3D;&#x3D; j || (si &#x3D;&#x3D; sj &amp;&amp; ei &#x3D;&#x3D; ej))\n            ++i, ++j;\n        else\n            j &#x3D; next[j];\n        if (j &#x3D;&#x3D; m + 1) &#123;\n            ans.push_back(i - m);\n            j &#x3D; next[j];\n        &#125;\n    &#125;\n&#125;\n\nint main() &#123;\n    while (scanf(&quot;%d %d %d&quot;, &amp;n, &amp;m, &amp;s) &#x3D;&#x3D; 3) &#123;\n        for (int i &#x3D; 1; i &lt;&#x3D; n; ++i)\n            scanf(&quot;%d&quot;, &amp;a[i]);\n        for (int i &#x3D; 1; i &lt;&#x3D; m; ++i)\n            scanf(&quot;%d&quot;, &amp;b[i]);\n        Init();\n        GetNext();\n        Kmp();\n        size_t len &#x3D; ans.size();\n        printf(&quot;%d\\n&quot;, len);\n        for (size_t i &#x3D; 0; i &lt; len; ++i)\n            printf(&quot;%d\\n&quot;, ans[i]);\n    &#125;\n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"kmp/ekmp 专题训练 🐴糙人蠢凑合看 0x01 剪花布条 HDU-2087 link 纯纯kmp裸题，不可重叠计数 #include&lt;bits&#x2F;stdc++.h&gt; using namespace std; void kmp_pre(string p, ...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"ALGORITHM TRAINING","slug":"ALGORITHM-TRAINING","count":2,"path":"api/categories/ALGORITHM-TRAINING.json"}],"tags":[{"name":"ACM","slug":"ACM","count":20,"path":"api/tags/ACM.json"},{"name":"string","slug":"string","count":5,"path":"api/tags/string.json"},{"name":"algorithm","slug":"algorithm","count":8,"path":"api/tags/algorithm.json"},{"name":"dp","slug":"dp","count":3,"path":"api/tags/dp.json"},{"name":"kmp","slug":"kmp","count":1,"path":"api/tags/kmp.json"},{"name":"前缀和","slug":"前缀和","count":1,"path":"api/tags/前缀和.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#kmp-ekmp-%E4%B8%93%E9%A2%98%E8%AE%AD%E7%BB%83\"><span class=\"toc-text\">kmp&#x2F;ekmp 专题训练</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E5%89%AA%E8%8A%B1%E5%B8%83%E6%9D%A1-HDU-2087\"><span class=\"toc-text\">0x01 剪花布条 HDU-2087</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-Secret-HDU-6153\"><span class=\"toc-text\">0x02 Secret HDU-6153</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-Cow-Patterns-POJ-3167\"><span class=\"toc-text\">0x03 Cow Patterns POJ-3167</span></a></li></ol></li></ol>","author":{"name":"Maskros","slug":"blog-author","avatar":"/img/logo_Maskros.jpg","link":"/","description":"Be Legendary within the hasty keys","socials":{"github":"https://github.com/Maskros-new","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"iconfont icon-bilibili-line","link":"https://space.bilibili.com/355516889"},"codeforces":{"icon":"iconfont icon-codeforces","link":"https://codeforces.com/profile/1ronMaker"},"mail":{"icon":"iconfont icon-mail","link":"mailto:1164528260@qq.com"}}}},"mapped":true,"prev_post":{"title":"Trie","uid":"f9c5a67ed89813cc4d2fda9f690375dd","slug":"algorithm/learn/trie","date":"2021-11-27T03:55:50.000Z","updated":"2022-01-22T09:37:06.172Z","comments":true,"path":"api/articles/algorithm/learn/trie.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F202001%2F20200113201445546817.jpg&refer=http%3A%2F%2Fimage.bubuko.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1640577246&t=4f6b0ed3fef63f86e86da00e1973e1f0","text":"Trie字典树/前缀树 什么是Trie 从根节点到每个单词结点的路径上所有字母连接成的字符串就是该结点对应的字符串 多叉树，最大分支数由字典的字符集含有的字符数决定 操作 插入字符串 insert 初始化 root = 0 , 遍历字符串, 对于其每一个字符, 计算其映射值 id...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"ALGORITHMS","slug":"ALGORITHMS","count":5,"path":"api/categories/ALGORITHMS.json"}],"tags":[{"name":"ACM","slug":"ACM","count":20,"path":"api/tags/ACM.json"},{"name":"string","slug":"string","count":5,"path":"api/tags/string.json"},{"name":"algorithm","slug":"algorithm","count":8,"path":"api/tags/algorithm.json"},{"name":"note","slug":"note","count":10,"path":"api/tags/note.json"},{"name":"Trie","slug":"Trie","count":2,"path":"api/tags/Trie.json"}],"author":{"name":"Maskros","slug":"blog-author","avatar":"/img/logo_Maskros.jpg","link":"/","description":"Be Legendary within the hasty keys","socials":{"github":"https://github.com/Maskros-new","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"iconfont icon-bilibili-line","link":"https://space.bilibili.com/355516889"},"codeforces":{"icon":"iconfont icon-codeforces","link":"https://codeforces.com/profile/1ronMaker"},"mail":{"icon":"iconfont icon-mail","link":"mailto:1164528260@qq.com"}}}}},"next_post":{"title":"2021CCPC广州站vp","uid":"38cc96ca6220c98ec8c78c52ef6fea74","slug":"xcpc/2021ccpc_guangzhou","date":"2021-11-24T16:42:00.000Z","updated":"2022-01-25T07:51:49.608Z","comments":true,"path":"api/articles/xcpc/2021ccpc_guangzhou.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_match%2F0%2F11826008261%2F0.jpg&refer=http%3A%2F%2Finews.gtimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1640364066&t=f43edaa90e76b5d34affabb3a3fd33d5","text":"2021CCPC广州站vp “如何解方程” C_Necklace 二分+贪心 读题比较关键 没改明白wa3 #include &lt;bits/stdc++.h> #define gcd(a, b) __gcd(a, b) #define INF 0x3f3f3f3f3f #de...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"SOLUTIONS","slug":"SOLUTIONS","count":11,"path":"api/categories/SOLUTIONS.json"}],"tags":[{"name":"solutions","slug":"solutions","count":11,"path":"api/tags/solutions.json"},{"name":"ACM","slug":"ACM","count":20,"path":"api/tags/ACM.json"},{"name":"二分","slug":"二分","count":5,"path":"api/tags/二分.json"},{"name":"CCPC","slug":"CCPC","count":3,"path":"api/tags/CCPC.json"},{"name":"打表","slug":"打表","count":1,"path":"api/tags/打表.json"},{"name":"数学","slug":"数学","count":2,"path":"api/tags/数学.json"},{"name":"贪心","slug":"贪心","count":1,"path":"api/tags/贪心.json"}],"author":{"name":"Maskros","slug":"blog-author","avatar":"/img/logo_Maskros.jpg","link":"/","description":"Be Legendary within the hasty keys","socials":{"github":"https://github.com/Maskros-new","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"iconfont icon-bilibili-line","link":"https://space.bilibili.com/355516889"},"codeforces":{"icon":"iconfont icon-codeforces","link":"https://codeforces.com/profile/1ronMaker"},"mail":{"icon":"iconfont icon-mail","link":"mailto:1164528260@qq.com"}}}}}}