{"title":"2021CCPC广州站vp","uid":"38cc96ca6220c98ec8c78c52ef6fea74","slug":"xcpc/2021ccpc_guangzhou","date":"2021-11-24T16:42:00.000Z","updated":"2022-01-25T07:51:49.608Z","comments":true,"path":"api/articles/xcpc/2021ccpc_guangzhou.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_match%2F0%2F11826008261%2F0.jpg&refer=http%3A%2F%2Finews.gtimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1640364066&t=f43edaa90e76b5d34affabb3a3fd33d5","content":"<link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css\"><h1><span id=\"2021ccpc广州站vp\">2021CCPC广州站vp</span></h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>“如何解方程”</p></blockquote>\n<h2><span id=\"c_necklace\">C_Necklace</span></h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>二分+贪心</p>\n<p>读题比较关键 没改明白wa3</p></blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">gcd</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token function\">__gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">0x3f3f3f3f3f</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">eps</span> <span class=\"token expression\"><span class=\"token number\">1e-6</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token function\">acos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">pb</span> <span class=\"token expression\">push_back</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">eif</span> <span class=\"token expression\"><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">en</span> <span class=\"token expression\"><span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">'\\n'</span><span class=\"token expression\"><span class=\"token punctuation\">)</span>#include <span class=\"token operator\">&lt;</span>bits<span class=\"token operator\">/</span>stdc<span class=\"token operator\">++</span><span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">gcd</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token function\">__gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">0x3f3f3f3f3f</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">eps</span> <span class=\"token expression\"><span class=\"token number\">1e-6</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token function\">acos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">pb</span> <span class=\"token expression\">push_back</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">mp</span> <span class=\"token expression\">make_pair</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">fst</span> <span class=\"token expression\">first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">sec</span> <span class=\"token expression\">second</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">eif</span> <span class=\"token expression\"><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">en</span> <span class=\"token expression\"><span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">'\\n'</span><span class=\"token expression\"><span class=\"token punctuation\">)</span>    </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">rep</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">red</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> y<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">mem</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IOS</span> <span class=\"token expression\">cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">1000005</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">co</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> </span><span class=\"token string\">\" \"</span><span class=\"token expression\"><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">pll</span> <span class=\"token expression\">pair<span class=\"token operator\">&lt;</span>ll<span class=\"token punctuation\">,</span> ll<span class=\"token operator\">></span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nll M<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">;</span>\nll pos<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    ll last<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tmp<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">;</span>\n    end<span class=\"token operator\">=</span>N<span class=\"token operator\">-</span>pos<span class=\"token punctuation\">[</span>M<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rep</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">&lt;=</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>last<span class=\"token operator\">=</span>end<span class=\"token punctuation\">;</span> end<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span> end<span class=\"token operator\">-=</span>x<span class=\"token punctuation\">;</span>  last<span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token function\">eif</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>M<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> tmp<span class=\"token operator\">=</span>end<span class=\"token operator\">+</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> tmp<span class=\"token operator\">=</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        ll can<span class=\"token operator\">=</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        can<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>can<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>can<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        ll sub<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>last<span class=\"token operator\">></span>can<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>can<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">>=</span>sub<span class=\"token punctuation\">)</span> tmp<span class=\"token operator\">-=</span>sub<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> tmp<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">&lt;=</span>x<span class=\"token punctuation\">)</span> last<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// N=read(); M=read();</span>\n    cin<span class=\"token operator\">>></span>N<span class=\"token operator\">>></span>M<span class=\"token punctuation\">;</span>\n    ll ans<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>tmp<span class=\"token punctuation\">,</span>last<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rep</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cin<span class=\"token operator\">>></span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span>N<span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    ll l<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token operator\">=</span>N<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ll mid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            ans<span class=\"token operator\">=</span>mid<span class=\"token punctuation\">;</span>\n            r<span class=\"token operator\">=</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            l<span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>   \n    cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> T <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    IOS<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// cin >> T;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2><span id=\"h_three-intergers-数学\">H_Three Intergers (数学)</span></h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>题意：给a,b,c，求满足x%y=a, y%z=b, z%x=c 的任意一组x,y,z</p>\n<p>思路：数学题，方程化简，根据条件直接造，起初忘记了模的性质导致解不出方程，看了题解恍然大悟 <a href=\"https://blog.csdn.net/qq_45323960/article/details/121368980\">题解</a></p></blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"YES\\n\"</span><span class=\"token punctuation\">;</span>\n                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span>\n                cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"NO\\n\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        ll x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">></span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            k <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">=</span> k <span class=\"token operator\">*</span> b <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n            z <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">*</span> b <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            k <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">*</span> a <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            z <span class=\"token operator\">=</span> k <span class=\"token operator\">*</span> a <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            k <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">*</span> c <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">=</span> k <span class=\"token operator\">*</span> c <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            z <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span>\n            <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"YES\\n\"</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> z <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> y <span class=\"token operator\">==</span> a <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">%</span> z <span class=\"token operator\">==</span> b <span class=\"token operator\">&amp;&amp;</span> z <span class=\"token operator\">%</span> x <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1e18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1e18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1e18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2><span id=\"i_pudding-store-打表\">I_Pudding Store （打表）</span></h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>手算了一下太麻烦，全排列打表找规律即可</p></blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">gcd</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token function\">__gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">0x3f3f3f3f</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">eps</span> <span class=\"token expression\"><span class=\"token number\">1e-6</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token function\">acos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">pb</span> <span class=\"token expression\">push_back</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">mp</span> <span class=\"token expression\">make_pair</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">fst</span> <span class=\"token expression\">first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">sec</span> <span class=\"token expression\">second</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">eif</span> <span class=\"token expression\"><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">en</span> <span class=\"token expression\"><span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">'\\n'</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">rep</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">red</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> y<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">mem</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IOS</span> <span class=\"token expression\">cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">400005</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">co</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> </span><span class=\"token string\">\" \"</span><span class=\"token expression\"><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">pll</span> <span class=\"token expression\">pair<span class=\"token operator\">&lt;</span>ll<span class=\"token punctuation\">,</span> ll<span class=\"token operator\">></span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">mod</span> <span class=\"token expression\"><span class=\"token number\">998244353</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1 2 6 12 24 48 96 192 384 768</span>\n<span class=\"token comment\">// int a[50];</span>\n<span class=\"token comment\">// void init(int n)&#123;</span>\n<span class=\"token comment\">//     rep(i,1,n+1) a[i]=i;</span>\n<span class=\"token comment\">// &#125;</span>\n<span class=\"token comment\">// void dfs()&#123;</span>\n<span class=\"token comment\">//     rep(i,1,11)&#123;</span>\n<span class=\"token comment\">//         ll cnt=0;</span>\n<span class=\"token comment\">//         init(i);</span>\n<span class=\"token comment\">//         bool t=true;</span>\n<span class=\"token comment\">//         while(t)&#123;</span>\n<span class=\"token comment\">//             bool can=false;</span>\n<span class=\"token comment\">//             rep(j,1,i+1)&#123;</span>\n<span class=\"token comment\">//                 ll fuck=0;</span>\n<span class=\"token comment\">//                 rep(k,1,j+1)&#123;</span>\n<span class=\"token comment\">//                     fuck+=a[k];</span>\n<span class=\"token comment\">//                 &#125;</span>\n<span class=\"token comment\">//                 fuck*=2;</span>\n<span class=\"token comment\">//                 if(fuck%j==0) can=true;</span>\n<span class=\"token comment\">//                 else &#123;can=false; break;&#125;</span>\n<span class=\"token comment\">//             &#125;</span>\n<span class=\"token comment\">//             if(can) cnt++;</span>\n<span class=\"token comment\">//             t=next_permutation(a+1,a+i+1);</span>\n<span class=\"token comment\">//         &#125;</span>\n<span class=\"token comment\">//         cout&lt;&lt;cnt&lt;&lt;\" \";</span>\n<span class=\"token comment\">//     &#125;</span>\n<span class=\"token comment\">// &#125;</span>\nll <span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span> ll b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    ll ans<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    ll res<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n    res<span class=\"token operator\">%=</span>mod<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> ans<span class=\"token operator\">=</span>ans<span class=\"token operator\">*</span>res<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span> b<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> res<span class=\"token operator\">=</span>res<span class=\"token operator\">*</span>res<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span> cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">eif</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">eif</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        ll tmp<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n        ll add<span class=\"token operator\">=</span><span class=\"token function\">qpow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tmp<span class=\"token operator\">=</span>add<span class=\"token operator\">%</span>mod<span class=\"token operator\">*</span>tmp<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span>tmp<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> T <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    IOS<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// dfs();</span>\n    cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结：什么时候才能不粗心</p></blockquote>\n","text":"2021CCPC广州站vp “如何解方程” C_Necklace 二分+贪心 读题比较关键 没改明白wa3 #include &lt;bits/stdc++.h> #define gcd(a, b) __gcd(a, b) #define INF 0x3f3f3f3f3f #de...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"SOLUTIONS","slug":"SOLUTIONS","count":12,"path":"api/categories/SOLUTIONS.json"}],"tags":[{"name":"solutions","slug":"solutions","count":11,"path":"api/tags/solutions.json"},{"name":"ACM","slug":"ACM","count":20,"path":"api/tags/ACM.json"},{"name":"二分","slug":"二分","count":5,"path":"api/tags/二分.json"},{"name":"CCPC","slug":"CCPC","count":3,"path":"api/tags/CCPC.json"},{"name":"打表","slug":"打表","count":1,"path":"api/tags/打表.json"},{"name":"数学","slug":"数学","count":2,"path":"api/tags/数学.json"},{"name":"贪心","slug":"贪心","count":1,"path":"api/tags/贪心.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">2021CCPC广州站vp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C_Necklace</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">H_Three Intergers (数学)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">I_Pudding Store （打表）</span></a></li></ol></li></ol>","author":{"name":"Maskros","slug":"blog-author","avatar":"/img/logo_Maskros.jpg","link":"/","description":"Be Legendary within the hasty keys","socials":{"github":"https://github.com/Maskros-new","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"iconfont icon-bilibili-line","link":"https://space.bilibili.com/355516889"},"codeforces":{"icon":"iconfont icon-codeforces","link":"https://codeforces.com/profile/1ronMaker"},"mail":{"icon":"iconfont icon-mail","link":"mailto:1164528260@qq.com"}}}},"mapped":true,"prev_post":{"title":"kmp专题训练","uid":"eb0105647eb3a218c386b75ad79d5f5a","slug":"algorithm/exercise/kmp_problem","date":"2021-11-26T13:59:50.000Z","updated":"2021-11-27T04:15:38.843Z","comments":true,"path":"api/articles/algorithm/exercise/kmp_problem.json","keywords":null,"cover":null,"text":"kmp/ekmp 专题训练 🐴糙人蠢凑合看 0x01 剪花布条 HDU-2087 link 纯纯kmp裸题，不可重叠计数 #include&lt;bits&#x2F;stdc++.h&gt; using namespace std; void kmp_pre(string p, ...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"ALGORITHM TRAINING","slug":"ALGORITHM-TRAINING","count":2,"path":"api/categories/ALGORITHM-TRAINING.json"}],"tags":[{"name":"ACM","slug":"ACM","count":20,"path":"api/tags/ACM.json"},{"name":"string","slug":"string","count":5,"path":"api/tags/string.json"},{"name":"algorithm","slug":"algorithm","count":8,"path":"api/tags/algorithm.json"},{"name":"kmp","slug":"kmp","count":1,"path":"api/tags/kmp.json"},{"name":"dp","slug":"dp","count":3,"path":"api/tags/dp.json"},{"name":"前缀和","slug":"前缀和","count":1,"path":"api/tags/前缀和.json"}],"author":{"name":"Maskros","slug":"blog-author","avatar":"/img/logo_Maskros.jpg","link":"/","description":"Be Legendary within the hasty keys","socials":{"github":"https://github.com/Maskros-new","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"iconfont icon-bilibili-line","link":"https://space.bilibili.com/355516889"},"codeforces":{"icon":"iconfont icon-codeforces","link":"https://codeforces.com/profile/1ronMaker"},"mail":{"icon":"iconfont icon-mail","link":"mailto:1164528260@qq.com"}}}}},"next_post":{"title":"2021CCPC桂林站vp","uid":"5746fb5b2209a46ecf437112c82754ca","slug":"xcpc/2021ccpc_guilin","date":"2021-11-23T16:03:00.000Z","updated":"2022-01-25T07:52:52.927Z","comments":true,"path":"api/articles/xcpc/2021ccpc_guilin.json","keywords":null,"cover":"https://img0.baidu.com/it/u=2194827238,221628150&fm=26&fmt=auto","text":"2021CCPC桂林站vp ”祭奠擦肩而过的桂林两日游“ A_Hero Named Magnus 水题。为什么不ban猛犸？输出2n-1 #include &lt;bits/stdc++.h> #define gcd(a, b) __gcd(a, b) #define INF 0...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"SOLUTIONS","slug":"SOLUTIONS","count":12,"path":"api/categories/SOLUTIONS.json"}],"tags":[{"name":"solutions","slug":"solutions","count":11,"path":"api/tags/solutions.json"},{"name":"ACM","slug":"ACM","count":20,"path":"api/tags/ACM.json"},{"name":"思维","slug":"思维","count":10,"path":"api/tags/思维.json"},{"name":"二分","slug":"二分","count":5,"path":"api/tags/二分.json"},{"name":"CCPC","slug":"CCPC","count":3,"path":"api/tags/CCPC.json"},{"name":"模拟","slug":"模拟","count":2,"path":"api/tags/模拟.json"},{"name":"图论","slug":"图论","count":2,"path":"api/tags/图论.json"},{"name":"Dijkstra","slug":"Dijkstra","count":1,"path":"api/tags/Dijkstra.json"}],"author":{"name":"Maskros","slug":"blog-author","avatar":"/img/logo_Maskros.jpg","link":"/","description":"Be Legendary within the hasty keys","socials":{"github":"https://github.com/Maskros-new","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"iconfont icon-bilibili-line","link":"https://space.bilibili.com/355516889"},"codeforces":{"icon":"iconfont icon-codeforces","link":"https://codeforces.com/profile/1ronMaker"},"mail":{"icon":"iconfont icon-mail","link":"mailto:1164528260@qq.com"}}}}}}