{"title":"Educational Codeforces Round 117 (Div.2)","uid":"790ed4c1d654821efb9fe604376d5483","slug":"codeforces/cf Edu 117","date":"2021-11-23T10:02:00.000Z","updated":"2022-01-25T07:51:13.529Z","comments":true,"path":"api/articles/codeforces/cf Edu 117.json","keywords":null,"cover":null,"content":"<link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css\"><h1><span id=\"educational-codeforces-round-117-rated-for-div-2\">Educational Codeforces Round 117 (Rated for Div. 2)</span></h1><h2><span id=\"a_distance\">A_Distance</span></h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>签到</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;bits&#x2F;stdc++.h&gt;\n\n#define gcd(a, b) __gcd(a, b)\n#define INF 0x3f3f3f3f3f\n#define eps 1e-6\n#define PI acos(-1.0)\n#define pb push_back\n#define mp make_pair\n#define fst first\n#define sec second\n#define eif else if\n#define en putchar(&#39;\\n&#39;)\n#define rep(i, x, y) for (int i &#x3D; x; i &lt; y; i++)\n#define red(i, x, y) for (int i &#x3D; x - 1; i &gt;&#x3D; y; i--)\n#define mem(a, x) memset(a, x, sizeof(a))\n#define IOS cin.tie(0), ios::sync_with_stdio(false)\n#define maxn 400005\n#define co(x) cout &lt;&lt; x &lt;&lt; &quot; &quot;;\ntypedef long long ll;\n#define pll pair&lt;ll, ll&gt;\nusing namespace std;\nvoid solve() &#123;\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    int xx &#x3D; -1, yy &#x3D; -1;\n    int tot &#x3D; x + y;\n    if (abs(tot) % 2 &#x3D;&#x3D; 1) &#123;\n        cout &lt;&lt; xx &lt;&lt; &quot; &quot; &lt;&lt; yy &lt;&lt; endl;\n        return;\n    &#125; else &#123;\n        if (abs(x) % 2 &#x3D;&#x3D; 0 &amp;&amp; abs(y) % 2 &#x3D;&#x3D; 0) &#123;\n            cout &lt;&lt; x &#x2F; 2 &lt;&lt; &quot; &quot; &lt;&lt; y &#x2F; 2 &lt;&lt; endl;\n            return;\n        &#125; else &#123;\n            tot &#x2F;&#x3D; 2;\n            if (x &gt; y)\n                cout &lt;&lt; tot &lt;&lt; &quot; &quot; &lt;&lt; 0 &lt;&lt; endl;\n            else\n                cout &lt;&lt; 0 &lt;&lt; &quot; &quot; &lt;&lt; tot &lt;&lt; endl;\n        &#125;\n    &#125;\n&#125;\nint main() &#123;\n    int T &#x3D; 1;\n    cin &gt;&gt; T;\n    while (T--) &#123;\n        solve();\n    &#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2><span id=\"b_special_permutation\">B_Special_Permutation</span></h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>贪心构造</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;bits&#x2F;stdc++.h&gt;\n\n#define gcd(a, b) __gcd(a, b)\n#define INF 0x3f3f3f3f3f\n#define eps 1e-6\n#define PI acos(-1.0)\n#define pb push_back\n#define mp make_pair\n#define fst first\n#define sec second\n#define eif else if\n#define en putchar(&#39;\\n&#39;)\n#define rep(i, x, y) for (int i &#x3D; x; i &lt; y; i++)\n#define red(i, x, y) for (int i &#x3D; x - 1; i &gt;&#x3D; y; i--)\n#define mem(a, x) memset(a, x, sizeof(a))\n#define IOS cin.tie(0), ios::sync_with_stdio(false)\n#define maxn 400005\n#define co(x) cout &lt;&lt; x &lt;&lt; &quot; &quot;;\ntypedef long long ll;\n#define pll pair&lt;ll, ll&gt;\nusing namespace std;\nint num[105];\nbool vis[105];\nvoid solve() &#123;\n    int n,a,b; cin&gt;&gt;n&gt;&gt;a&gt;&gt;b;\n    memset(vis,0,sizeof(vis));\n    memset(num, 0, sizeof(num));\n    vis[a]&#x3D;1;\n    vis[b]&#x3D;1;\n    num[n&#x2F;2+1]&#x3D;b;\n    num[1]&#x3D;a;\n    int tmp&#x3D;1;\n    bool find;\n    rep(i,n&#x2F;2+2,n+1)&#123;\n        find&#x3D;false;\n        rep(j,tmp,b)&#123;\n            if(!vis[j])&#123;\n                vis[j]&#x3D;1;\n                num[i]&#x3D;j;\n                tmp&#x3D;j+1;\n                find&#x3D;1;\n                break;\n            &#125;\n        &#125;\n        if(!find) &#123;cout&lt;&lt;-1&lt;&lt;endl; return;&#125;\n    &#125;\n    tmp&#x3D;n;\n    rep(i,2,n&#x2F;2+1)&#123;\n        find&#x3D;false;\n        red(j,tmp+1,a)&#123;\n            if(!vis[j])&#123;\n                vis[j]&#x3D;1;\n                num[i]&#x3D;j;\n                tmp&#x3D;j-1;\n                find&#x3D;1;\n                break;\n            &#125;\n        &#125;\n        if(!find) &#123;cout&lt;&lt;-1&lt;&lt;endl; return;&#125;\n    &#125;\n    rep(i,1,n+1)&#123;\n        cout&lt;&lt;num[i]&lt;&lt;&quot; &quot;;\n    &#125;\n    cout&lt;&lt;endl;\n&#125;\nint main() &#123;\n    int T &#x3D; 1;\n    cin &gt;&gt; T;\n    while (T--) &#123;\n        solve();\n    &#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2><span id=\"c_chat_ban\">C_Chat_Ban</span></h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>题意：</p>\n<p>输入k,x ; 你有2k-1条信息要发，信息的长度为1,2,3…k-1,k,k-1…1，在发出当前信息时，你已经发送的总长度必须小于x，问你最多能发多少条</p>\n<p>思路：</p>\n<p>二分答案即可</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;bits&#x2F;stdc++.h&gt;\n\n#define gcd(a, b) __gcd(a, b)\n#define INF 0x3f3f3f3f3f\n#define eps 1e-6\n#define PI acos(-1.0)\n#define pb push_back\n#define mp make_pair\n#define fst first\n#define sec second\n#define eif else if\n#define en putchar(&#39;\\n&#39;)\n#define rep(i, x, y) for (int i &#x3D; x; i &lt; y; i++)\n#define red(i, x, y) for (int i &#x3D; x - 1; i &gt;&#x3D; y; i--)\n#define mem(a, x) memset(a, x, sizeof(a))\n#define IOS cin.tie(0), ios::sync_with_stdio(false)\n#define maxn 400005\n#define co(x) cout &lt;&lt; x &lt;&lt; &quot; &quot;;\ntypedef long long ll;\n#define pll pair&lt;ll, ll&gt;\nusing namespace std;\nll cal(ll begin, ll end)&#123;\n    ll ret;\n    if((begin+end)%2&#x3D;&#x3D;0)&#123;\n        ret&#x3D;(begin+end)&#x2F;2*(end-begin+1);\n    &#125;else&#123;\n        ret&#x3D;(end-begin+1)&#x2F;2*(begin+end);\n    &#125;\n    return ret;\n&#125;\nvoid solve() &#123;\n    ll k,x; cin&gt;&gt;k&gt;&gt;x;\n    ll ans&#x3D;0;\n    ll test&#x3D;cal(1,k);\n    if(test&#x3D;&#x3D;x)&#123;\n        cout&lt;&lt;k&lt;&lt;endl;\n        return;\n    &#125;eif(test&lt;x)&#123;\n        ans+&#x3D;k;\n        x-&#x3D;test;\n        test&#x3D;cal(1,k-1);\n        if(test&lt;&#x3D;x)&#123; cout&lt;&lt;2*k-1&lt;&lt;endl; return;&#125;\n        else&#123;\n            ll l&#x3D;1,r&#x3D;k;\n            ll mid;\n            ll tmp&#x3D;0;\n            while(l&lt;&#x3D;r)&#123;\n                mid&#x3D;(l+r)&gt;&gt;1;\n                test&#x3D;cal(mid,k-1);\n                if(test&#x3D;&#x3D;x)&#123;\n                    tmp&#x3D;k-mid;\n                    break;\n                &#125;eif(test&lt;x)&#123;\n                    tmp&#x3D;k-mid+1;\n                    r&#x3D;mid-1;\n                &#125;else&#123;\n                    l&#x3D;mid+1;\n                &#125;\n            &#125;\n            ans+&#x3D;tmp;\n            cout&lt;&lt;ans&lt;&lt;endl;\n        &#125;\n    &#125;else&#123;\n        ll l&#x3D;1,r&#x3D;k;\n        ll mid;\n        while(l&lt;&#x3D;r)&#123;\n            mid&#x3D;(l+r)&gt;&gt;1;\n            test&#x3D;cal(1,mid);\n            if(test&#x3D;&#x3D;x)&#123;\n                ans&#x3D;mid;\n                break;\n            &#125;eif(test&lt;x)&#123;\n                ans&#x3D;mid+1;\n                l&#x3D;mid+1;\n            &#125;else&#123;\n                r&#x3D;mid-1;\n            &#125;\n        &#125;\n        cout&lt;&lt;ans&lt;&lt;endl;\n    &#125;\n\n&#125;\nint main() &#123;\n    int T &#x3D; 1;\n    cin &gt;&gt; T;\n    while (T--) &#123;\n        solve();\n    &#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2><span id=\"d_x_magic_pair-gcd\">D_X_Magic_Pair (gcd)</span></h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>题意：</p>\n<p>给你 a, b, x，每次操作可以将a或b替换为 |a-b|, 询问能否将a或b进行任意次操作后替换为 x</p>\n<p>思路：</p>\n<p>gcd变种，每次判断一下 <strong>a%b</strong> 是否等于 <strong>x%b</strong>，即 (a-x)%b==0 ，如果相等即为YES，否则即为NO</p></blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">0x3f3f3f3f3f</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">eps</span> <span class=\"token expression\"><span class=\"token number\">1e-6</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token function\">acos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">pb</span> <span class=\"token expression\">push_back</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">mp</span> <span class=\"token expression\">make_pair</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">fst</span> <span class=\"token expression\">first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">sec</span> <span class=\"token expression\">second</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">eif</span> <span class=\"token expression\"><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">en</span> <span class=\"token expression\"><span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">'\\n'</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">rep</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">red</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> y<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">mem</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IOS</span> <span class=\"token expression\">cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">maxn</span> <span class=\"token expression\"><span class=\"token number\">400005</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">co</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> </span><span class=\"token string\">\" \"</span><span class=\"token expression\"><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">pll</span> <span class=\"token expression\">pair<span class=\"token operator\">&lt;</span>ll<span class=\"token punctuation\">,</span> ll<span class=\"token operator\">></span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nll a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>ll a<span class=\"token punctuation\">,</span> ll b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span>x<span class=\"token operator\">||</span>b<span class=\"token operator\">==</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>x<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>b<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">></span>x<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>a<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>a<span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    cin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token operator\">>></span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span>a<span class=\"token operator\">&amp;&amp;</span>x<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"NO\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span>a<span class=\"token operator\">||</span>x<span class=\"token operator\">==</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"YES\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    ll tmpa<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span>\n    ll tmpb<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>b<span class=\"token operator\">:</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>tmpa<span class=\"token punctuation\">,</span>tmpb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> T <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> T<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2><span id=\"总结\">总结</span></h2><p>仨签到很顺溜，最后一个题因为判断条件结果sb了，掉分</p>\n","text":"Educational Codeforces Round 117 (Rated for Div. 2)A_Distance 签到 #include &lt;bits&#x2F;stdc++.h&gt; #define gcd(a, b) __gcd(a, b) #define I...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"SOLUTIONS","slug":"SOLUTIONS","count":21,"path":"api/categories/SOLUTIONS.json"}],"tags":[{"name":"ACM","slug":"ACM","count":32,"path":"api/tags/ACM.json"},{"name":"思维","slug":"思维","count":14,"path":"api/tags/思维.json"},{"name":"solutions","slug":"solutions","count":19,"path":"api/tags/solutions.json"},{"name":"二分","slug":"二分","count":9,"path":"api/tags/二分.json"},{"name":"codeforces","slug":"codeforces","count":11,"path":"api/tags/codeforces.json"},{"name":"gcd","slug":"gcd","count":1,"path":"api/tags/gcd.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Educational Codeforces Round 117 (Rated for Div. 2)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">A_Distance</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">B_Special_Permutation</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">C_Chat_Ban</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">D_X_Magic_Pair (gcd)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"Maskros","slug":"blog-author","avatar":"/img/logo_Maskros.jpg","link":"/","description":"Be Legendary within the hasty keys","socials":{"github":"https://github.com/Maskros-new","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"iconfont icon-bilibili-line","link":"https://space.bilibili.com/355516889"},"codeforces":{"icon":"iconfont icon-codeforces","link":"https://codeforces.com/profile/1ronMaker"},"mail":{"icon":"iconfont icon-mail","link":"mailto:1164528260@qq.com"}}}},"mapped":true,"prev_post":{"title":"2021CCPC桂林站vp","uid":"5746fb5b2209a46ecf437112c82754ca","slug":"xcpc/2021ccpc_guilin","date":"2021-11-23T16:03:00.000Z","updated":"2022-01-25T07:52:52.927Z","comments":true,"path":"api/articles/xcpc/2021ccpc_guilin.json","keywords":null,"cover":"https://img0.baidu.com/it/u=2194827238,221628150&fm=26&fmt=auto","text":"2021CCPC桂林站vp ”祭奠擦肩而过的桂林两日游“ A_Hero Named Magnus 水题。为什么不ban猛犸？输出2n-1 #include &lt;bits/stdc++.h> #define gcd(a, b) __gcd(a, b) #define INF 0...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"SOLUTIONS","slug":"SOLUTIONS","count":21,"path":"api/categories/SOLUTIONS.json"}],"tags":[{"name":"ACM","slug":"ACM","count":32,"path":"api/tags/ACM.json"},{"name":"思维","slug":"思维","count":14,"path":"api/tags/思维.json"},{"name":"solutions","slug":"solutions","count":19,"path":"api/tags/solutions.json"},{"name":"CCPC","slug":"CCPC","count":3,"path":"api/tags/CCPC.json"},{"name":"二分","slug":"二分","count":9,"path":"api/tags/二分.json"},{"name":"模拟","slug":"模拟","count":3,"path":"api/tags/模拟.json"},{"name":"图论","slug":"图论","count":2,"path":"api/tags/图论.json"},{"name":"Dijkstra","slug":"Dijkstra","count":1,"path":"api/tags/Dijkstra.json"}],"author":{"name":"Maskros","slug":"blog-author","avatar":"/img/logo_Maskros.jpg","link":"/","description":"Be Legendary within the hasty keys","socials":{"github":"https://github.com/Maskros-new","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"iconfont icon-bilibili-line","link":"https://space.bilibili.com/355516889"},"codeforces":{"icon":"iconfont icon-codeforces","link":"https://codeforces.com/profile/1ronMaker"},"mail":{"icon":"iconfont icon-mail","link":"mailto:1164528260@qq.com"}}}}},"next_post":{"title":"进行一个毛概题库的爬","uid":"a2c6874fc71d3b8d32c3fc7e259ed58d","slug":"projects/maogai_crawler","date":"2021-11-10T14:43:00.000Z","updated":"2021-12-25T07:17:11.282Z","comments":true,"path":"api/articles/projects/maogai_crawler.json","keywords":null,"cover":null,"text":"进行一个毛概题库的爬 前言：🐷b毛概题库要截止了，几个时间段的题库各自有截止日期😅，眼见着ddl就要到了可👴又不想去刷，所以萌生了借助python爬虫来进行偷懒的想法 办事流程 由于之前👴说过：“python狗都不用”，“用python的都沙比” 的名言，所以一开始是拒绝的，但是...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"PROJECT","slug":"PROJECT","count":1,"path":"api/categories/PROJECT.json"}],"tags":[{"name":"Crawler","slug":"Crawler","count":2,"path":"api/tags/Crawler.json"},{"name":"python","slug":"python","count":3,"path":"api/tags/python.json"},{"name":"requests","slug":"requests","count":1,"path":"api/tags/requests.json"}],"author":{"name":"Maskros","slug":"blog-author","avatar":"/img/logo_Maskros.jpg","link":"/","description":"Be Legendary within the hasty keys","socials":{"github":"https://github.com/Maskros-new","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"iconfont icon-bilibili-line","link":"https://space.bilibili.com/355516889"},"codeforces":{"icon":"iconfont icon-codeforces","link":"https://codeforces.com/profile/1ronMaker"},"mail":{"icon":"iconfont icon-mail","link":"mailto:1164528260@qq.com"}}}}}}